model User {
    id              String         @id @default(uuid()) @db.Uuid
    fullname        String         @db.VarChar(50)
    username        String         @unique @db.VarChar(50)
    email           String         @unique @db.VarChar(255)
    phone           String?        @db.VarChar(20)
    hashingPassword String?        @map("hashing_password") @db.VarChar(255)
    accountType     AccountType    @default(EMAIL) @map("account_type")
    avatarUrl       String?        @map("avatar_url") @db.VarChar(500)
    address         String?        @db.VarChar(500)
    city            String?        @db.VarChar(50)
    state           String?        @db.VarChar(50)
    roles           UserRole[]
    flags           UserFlag[]
    createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz()
    visible         UserVisibility @default(PUBLIC)
    isBanned        Boolean        @default(false) @map("is_banned")
    isLocked        Boolean        @default(false) @map("is_locked")
    isVerified      Boolean        @default(false) @map("is_verified")
    lastActived     DateTime?      @map("last_actived") @db.Timestamptz()

    // relation
    sessions   Session[]    @relation("sessions")
    codes      Code?
    Oauth2User Oauth2User[] @relation("oauth2")
    shops      Shop[]

    @@index([email])
    @@index([username])
}

model Oauth2User {
    id             String   @id @default(uuid()) @db.Uuid
    provider       Provider
    providerUserId String   @map("provider_user_id") @db.VarChar(500)
    email          String   @unique @db.VarChar(255)
    phone          String?  @db.VarChar(20)
    firstname      String?  @db.VarChar(50)
    lastname       String?  @db.VarChar(50)
    fullname       String?  @db.VarChar(50)
    avatarUrl      String?  @map("avatar_url") @db.VarChar(500)
    username       String?  @db.VarChar(50)
    createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

    userId String @map("user_id") @db.Uuid
    user   User   @relation(name: "oauth2", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("oauth2_user")
}

enum UserRole {
    ROOT
    ADMINSTRATOR
    SUPPORTER
    COLLABORATOR
    SELLER
    USER

    @@map("user_role")
}

enum UserFlag {
    BEST_CUSTOMER
    DIAMOND_CUSTOMER
    GOLD_CUSTOMER
    SILVER_CUSTOMER
    COPPER_CUSTOMER
    CUSTOMER

    @@map("user_flag")
}

enum UserVisibility {
    PUBLIC
    PRIVATE
    CONTACT_ONLY

    @@map("user_visibility")
}

enum Provider {
    FACEBOOK
    GOOGLE
}

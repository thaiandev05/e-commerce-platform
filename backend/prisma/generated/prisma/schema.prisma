model Session {
  id                  String   @id @default(uuid()) @db.Uuid
  hashingRefreshToken String?  @map("hasing_refreshtoken") @db.VarChar(255)
  userAgent           String   @unique @db.VarChar(50)
  userIp              String?  @db.VarChar(100)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime @updatedAt @map("updated_at")

  loginedAt  DateTime @map("logined_at") @db.Timestamptz()
  logoutedAt DateTime @map("logouted_at") @db.Timestamptz()

  // realtion
  userId String @db.Uuid
  user   User   @relation(name: "sessions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("session")
}

model Code {
  id        String   @id @default(uuid()) @db.Uuid
  code      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  // relation
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("code")
}

enum TYPECODE {
  EMAIL
  PHONE

  @@map("type_code")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  fullname       String         @db.VarChar(50)
  username       String         @unique @db.VarChar(50)
  email          String         @unique @db.VarChar(255)
  phone          String?        @db.VarChar(20)
  hasingPassword String         @map("hasing_password") @db.VarChar(255)
  avatarUrl      String?        @map("avatar_url") @db.VarChar(500)
  address        String?        @db.VarChar(500)
  city           String?        @db.VarChar(50)
  state          String?        @db.VarChar(50)
  roles          UserRole[]
  flags          UserFlag[]
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime       @updatedAt @map("updated_at") @db.Timestamptz()
  visible        UserVisibility @default(PUBLIC)
  isBanned       Boolean        @default(false) @map("is_banned")
  isLocked       Boolean        @default(false) @map("is_locked")
  isVerified     Boolean        @default(false) @map("is_verified")
  lastActived    DateTime?      @map("last_actived") @db.Timestamptz()

  // relation
  sessions Session[] @relation("sessions")
  codes    Code?

  @@index([email])
  @@index([username])
}

enum UserRole {
  ROOT
  ADMINSTRATOR
  SUPPORTER
  COLLABORATOR
  SELLER
  USER

  @@map("user_role")
}

enum UserFlag {
  BEST_CUSTOMER
  DIAMOND_CUSTOMER
  GOLD_CUSTOMER
  SILVER_CUSTOMER
  COPPER_CUSTOMER
  CUSTOMER

  @@map("user_flag")
}

enum UserVisibility {
  PUBLIC
  PRIVATE
  CONTACT_ONLY

  @@map("user_visibility")
}


/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Code
 * 
 */
export type Code = $Result.DefaultSelection<Prisma.$CodePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Spu
 * 
 */
export type Spu = $Result.DefaultSelection<Prisma.$SpuPayload>
/**
 * Model Sku
 * 
 */
export type Sku = $Result.DefaultSelection<Prisma.$SkuPayload>
/**
 * Model SpuImage
 * 
 */
export type SpuImage = $Result.DefaultSelection<Prisma.$SpuImagePayload>
/**
 * Model SkuImage
 * 
 */
export type SkuImage = $Result.DefaultSelection<Prisma.$SkuImagePayload>
/**
 * Model Attribute
 * 
 */
export type Attribute = $Result.DefaultSelection<Prisma.$AttributePayload>
/**
 * Model AttributeValue
 * 
 */
export type AttributeValue = $Result.DefaultSelection<Prisma.$AttributeValuePayload>
/**
 * Model SpuAttribute
 * 
 */
export type SpuAttribute = $Result.DefaultSelection<Prisma.$SpuAttributePayload>
/**
 * Model SkuAttribute
 * 
 */
export type SkuAttribute = $Result.DefaultSelection<Prisma.$SkuAttributePayload>
/**
 * Model SpuVariation
 * 
 */
export type SpuVariation = $Result.DefaultSelection<Prisma.$SpuVariationPayload>
/**
 * Model SkuVariationValue
 * 
 */
export type SkuVariationValue = $Result.DefaultSelection<Prisma.$SkuVariationValuePayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model SpuTag
 * 
 */
export type SpuTag = $Result.DefaultSelection<Prisma.$SpuTagPayload>
/**
 * Model Shop
 * 
 */
export type Shop = $Result.DefaultSelection<Prisma.$ShopPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Oauth2User
 * 
 */
export type Oauth2User = $Result.DefaultSelection<Prisma.$Oauth2UserPayload>
/**
 * Model CreditCard
 * 
 */
export type CreditCard = $Result.DefaultSelection<Prisma.$CreditCardPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TYPECODE: {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE'
};

export type TYPECODE = (typeof TYPECODE)[keyof typeof TYPECODE]


export const AccountType: {
  EMAIL: 'EMAIL',
  OAUTH2: 'OAUTH2'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]


export const SpuStatus: {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

export type SpuStatus = (typeof SpuStatus)[keyof typeof SpuStatus]


export const SkuStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  DISCONTINUED: 'DISCONTINUED'
};

export type SkuStatus = (typeof SkuStatus)[keyof typeof SkuStatus]


export const AttributeType: {
  TEXT: 'TEXT',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  COLOR: 'COLOR',
  IMAGE: 'IMAGE',
  SELECT: 'SELECT',
  MULTI_SELECT: 'MULTI_SELECT'
};

export type AttributeType = (typeof AttributeType)[keyof typeof AttributeType]


export const ShopStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED',
  CLOSED: 'CLOSED'
};

export type ShopStatus = (typeof ShopStatus)[keyof typeof ShopStatus]


export const UserRole: {
  ROOT: 'ROOT',
  ADMINSTRATOR: 'ADMINSTRATOR',
  SUPPORTER: 'SUPPORTER',
  COLLABORATOR: 'COLLABORATOR',
  SELLER: 'SELLER',
  USER: 'USER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserFlag: {
  BEST_CUSTOMER: 'BEST_CUSTOMER',
  DIAMOND_CUSTOMER: 'DIAMOND_CUSTOMER',
  GOLD_CUSTOMER: 'GOLD_CUSTOMER',
  SILVER_CUSTOMER: 'SILVER_CUSTOMER',
  COPPER_CUSTOMER: 'COPPER_CUSTOMER',
  CUSTOMER: 'CUSTOMER'
};

export type UserFlag = (typeof UserFlag)[keyof typeof UserFlag]


export const UserVisibility: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONTACT_ONLY: 'CONTACT_ONLY'
};

export type UserVisibility = (typeof UserVisibility)[keyof typeof UserVisibility]


export const Provider: {
  FACEBOOK: 'FACEBOOK',
  GOOGLE: 'GOOGLE'
};

export type Provider = (typeof Provider)[keyof typeof Provider]

}

export type TYPECODE = $Enums.TYPECODE

export const TYPECODE: typeof $Enums.TYPECODE

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

export type SpuStatus = $Enums.SpuStatus

export const SpuStatus: typeof $Enums.SpuStatus

export type SkuStatus = $Enums.SkuStatus

export const SkuStatus: typeof $Enums.SkuStatus

export type AttributeType = $Enums.AttributeType

export const AttributeType: typeof $Enums.AttributeType

export type ShopStatus = $Enums.ShopStatus

export const ShopStatus: typeof $Enums.ShopStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserFlag = $Enums.UserFlag

export const UserFlag: typeof $Enums.UserFlag

export type UserVisibility = $Enums.UserVisibility

export const UserVisibility: typeof $Enums.UserVisibility

export type Provider = $Enums.Provider

export const Provider: typeof $Enums.Provider

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.code`: Exposes CRUD operations for the **Code** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Codes
    * const codes = await prisma.code.findMany()
    * ```
    */
  get code(): Prisma.CodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spu`: Exposes CRUD operations for the **Spu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spus
    * const spus = await prisma.spu.findMany()
    * ```
    */
  get spu(): Prisma.SpuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sku`: Exposes CRUD operations for the **Sku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skus
    * const skus = await prisma.sku.findMany()
    * ```
    */
  get sku(): Prisma.SkuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spuImage`: Exposes CRUD operations for the **SpuImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpuImages
    * const spuImages = await prisma.spuImage.findMany()
    * ```
    */
  get spuImage(): Prisma.SpuImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuImage`: Exposes CRUD operations for the **SkuImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuImages
    * const skuImages = await prisma.skuImage.findMany()
    * ```
    */
  get skuImage(): Prisma.SkuImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attribute`: Exposes CRUD operations for the **Attribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attributes
    * const attributes = await prisma.attribute.findMany()
    * ```
    */
  get attribute(): Prisma.AttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attributeValue`: Exposes CRUD operations for the **AttributeValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttributeValues
    * const attributeValues = await prisma.attributeValue.findMany()
    * ```
    */
  get attributeValue(): Prisma.AttributeValueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spuAttribute`: Exposes CRUD operations for the **SpuAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpuAttributes
    * const spuAttributes = await prisma.spuAttribute.findMany()
    * ```
    */
  get spuAttribute(): Prisma.SpuAttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuAttribute`: Exposes CRUD operations for the **SkuAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuAttributes
    * const skuAttributes = await prisma.skuAttribute.findMany()
    * ```
    */
  get skuAttribute(): Prisma.SkuAttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spuVariation`: Exposes CRUD operations for the **SpuVariation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpuVariations
    * const spuVariations = await prisma.spuVariation.findMany()
    * ```
    */
  get spuVariation(): Prisma.SpuVariationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuVariationValue`: Exposes CRUD operations for the **SkuVariationValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuVariationValues
    * const skuVariationValues = await prisma.skuVariationValue.findMany()
    * ```
    */
  get skuVariationValue(): Prisma.SkuVariationValueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spuTag`: Exposes CRUD operations for the **SpuTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpuTags
    * const spuTags = await prisma.spuTag.findMany()
    * ```
    */
  get spuTag(): Prisma.SpuTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oauth2User`: Exposes CRUD operations for the **Oauth2User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Oauth2Users
    * const oauth2Users = await prisma.oauth2User.findMany()
    * ```
    */
  get oauth2User(): Prisma.Oauth2UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.creditCard`: Exposes CRUD operations for the **CreditCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditCards
    * const creditCards = await prisma.creditCard.findMany()
    * ```
    */
  get creditCard(): Prisma.CreditCardDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Session: 'Session',
    Code: 'Code',
    Category: 'Category',
    Brand: 'Brand',
    Spu: 'Spu',
    Sku: 'Sku',
    SpuImage: 'SpuImage',
    SkuImage: 'SkuImage',
    Attribute: 'Attribute',
    AttributeValue: 'AttributeValue',
    SpuAttribute: 'SpuAttribute',
    SkuAttribute: 'SkuAttribute',
    SpuVariation: 'SpuVariation',
    SkuVariationValue: 'SkuVariationValue',
    Tag: 'Tag',
    SpuTag: 'SpuTag',
    Shop: 'Shop',
    User: 'User',
    Oauth2User: 'Oauth2User',
    CreditCard: 'CreditCard'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "session" | "code" | "category" | "brand" | "spu" | "sku" | "spuImage" | "skuImage" | "attribute" | "attributeValue" | "spuAttribute" | "skuAttribute" | "spuVariation" | "skuVariationValue" | "tag" | "spuTag" | "shop" | "user" | "oauth2User" | "creditCard"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Code: {
        payload: Prisma.$CodePayload<ExtArgs>
        fields: Prisma.CodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          findFirst: {
            args: Prisma.CodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          findMany: {
            args: Prisma.CodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>[]
          }
          create: {
            args: Prisma.CodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          createMany: {
            args: Prisma.CodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>[]
          }
          delete: {
            args: Prisma.CodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          update: {
            args: Prisma.CodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          deleteMany: {
            args: Prisma.CodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>[]
          }
          upsert: {
            args: Prisma.CodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodePayload>
          }
          aggregate: {
            args: Prisma.CodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCode>
          }
          groupBy: {
            args: Prisma.CodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodeCountArgs<ExtArgs>
            result: $Utils.Optional<CodeCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Spu: {
        payload: Prisma.$SpuPayload<ExtArgs>
        fields: Prisma.SpuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          findFirst: {
            args: Prisma.SpuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          findMany: {
            args: Prisma.SpuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>[]
          }
          create: {
            args: Prisma.SpuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          createMany: {
            args: Prisma.SpuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>[]
          }
          delete: {
            args: Prisma.SpuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          update: {
            args: Prisma.SpuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          deleteMany: {
            args: Prisma.SpuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>[]
          }
          upsert: {
            args: Prisma.SpuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuPayload>
          }
          aggregate: {
            args: Prisma.SpuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpu>
          }
          groupBy: {
            args: Prisma.SpuGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpuGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpuCountArgs<ExtArgs>
            result: $Utils.Optional<SpuCountAggregateOutputType> | number
          }
        }
      }
      Sku: {
        payload: Prisma.$SkuPayload<ExtArgs>
        fields: Prisma.SkuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          findFirst: {
            args: Prisma.SkuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          findMany: {
            args: Prisma.SkuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          create: {
            args: Prisma.SkuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          createMany: {
            args: Prisma.SkuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          delete: {
            args: Prisma.SkuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          update: {
            args: Prisma.SkuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          deleteMany: {
            args: Prisma.SkuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          upsert: {
            args: Prisma.SkuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          aggregate: {
            args: Prisma.SkuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSku>
          }
          groupBy: {
            args: Prisma.SkuGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuCountArgs<ExtArgs>
            result: $Utils.Optional<SkuCountAggregateOutputType> | number
          }
        }
      }
      SpuImage: {
        payload: Prisma.$SpuImagePayload<ExtArgs>
        fields: Prisma.SpuImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpuImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpuImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          findFirst: {
            args: Prisma.SpuImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpuImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          findMany: {
            args: Prisma.SpuImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>[]
          }
          create: {
            args: Prisma.SpuImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          createMany: {
            args: Prisma.SpuImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpuImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>[]
          }
          delete: {
            args: Prisma.SpuImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          update: {
            args: Prisma.SpuImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          deleteMany: {
            args: Prisma.SpuImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpuImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpuImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>[]
          }
          upsert: {
            args: Prisma.SpuImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuImagePayload>
          }
          aggregate: {
            args: Prisma.SpuImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpuImage>
          }
          groupBy: {
            args: Prisma.SpuImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpuImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpuImageCountArgs<ExtArgs>
            result: $Utils.Optional<SpuImageCountAggregateOutputType> | number
          }
        }
      }
      SkuImage: {
        payload: Prisma.$SkuImagePayload<ExtArgs>
        fields: Prisma.SkuImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          findFirst: {
            args: Prisma.SkuImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          findMany: {
            args: Prisma.SkuImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          create: {
            args: Prisma.SkuImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          createMany: {
            args: Prisma.SkuImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          delete: {
            args: Prisma.SkuImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          update: {
            args: Prisma.SkuImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          deleteMany: {
            args: Prisma.SkuImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          upsert: {
            args: Prisma.SkuImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          aggregate: {
            args: Prisma.SkuImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuImage>
          }
          groupBy: {
            args: Prisma.SkuImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuImageCountArgs<ExtArgs>
            result: $Utils.Optional<SkuImageCountAggregateOutputType> | number
          }
        }
      }
      Attribute: {
        payload: Prisma.$AttributePayload<ExtArgs>
        fields: Prisma.AttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findFirst: {
            args: Prisma.AttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findMany: {
            args: Prisma.AttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          create: {
            args: Prisma.AttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          createMany: {
            args: Prisma.AttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          delete: {
            args: Prisma.AttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          update: {
            args: Prisma.AttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          deleteMany: {
            args: Prisma.AttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttributeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          upsert: {
            args: Prisma.AttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          aggregate: {
            args: Prisma.AttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttribute>
          }
          groupBy: {
            args: Prisma.AttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttributeCountArgs<ExtArgs>
            result: $Utils.Optional<AttributeCountAggregateOutputType> | number
          }
        }
      }
      AttributeValue: {
        payload: Prisma.$AttributeValuePayload<ExtArgs>
        fields: Prisma.AttributeValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttributeValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttributeValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          findFirst: {
            args: Prisma.AttributeValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttributeValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          findMany: {
            args: Prisma.AttributeValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>[]
          }
          create: {
            args: Prisma.AttributeValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          createMany: {
            args: Prisma.AttributeValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttributeValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>[]
          }
          delete: {
            args: Prisma.AttributeValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          update: {
            args: Prisma.AttributeValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          deleteMany: {
            args: Prisma.AttributeValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttributeValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttributeValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>[]
          }
          upsert: {
            args: Prisma.AttributeValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributeValuePayload>
          }
          aggregate: {
            args: Prisma.AttributeValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttributeValue>
          }
          groupBy: {
            args: Prisma.AttributeValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttributeValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttributeValueCountArgs<ExtArgs>
            result: $Utils.Optional<AttributeValueCountAggregateOutputType> | number
          }
        }
      }
      SpuAttribute: {
        payload: Prisma.$SpuAttributePayload<ExtArgs>
        fields: Prisma.SpuAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpuAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpuAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          findFirst: {
            args: Prisma.SpuAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpuAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          findMany: {
            args: Prisma.SpuAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>[]
          }
          create: {
            args: Prisma.SpuAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          createMany: {
            args: Prisma.SpuAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpuAttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>[]
          }
          delete: {
            args: Prisma.SpuAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          update: {
            args: Prisma.SpuAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          deleteMany: {
            args: Prisma.SpuAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpuAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpuAttributeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>[]
          }
          upsert: {
            args: Prisma.SpuAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuAttributePayload>
          }
          aggregate: {
            args: Prisma.SpuAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpuAttribute>
          }
          groupBy: {
            args: Prisma.SpuAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpuAttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpuAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<SpuAttributeCountAggregateOutputType> | number
          }
        }
      }
      SkuAttribute: {
        payload: Prisma.$SkuAttributePayload<ExtArgs>
        fields: Prisma.SkuAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          findFirst: {
            args: Prisma.SkuAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          findMany: {
            args: Prisma.SkuAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>[]
          }
          create: {
            args: Prisma.SkuAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          createMany: {
            args: Prisma.SkuAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuAttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>[]
          }
          delete: {
            args: Prisma.SkuAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          update: {
            args: Prisma.SkuAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          deleteMany: {
            args: Prisma.SkuAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuAttributeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>[]
          }
          upsert: {
            args: Prisma.SkuAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuAttributePayload>
          }
          aggregate: {
            args: Prisma.SkuAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuAttribute>
          }
          groupBy: {
            args: Prisma.SkuAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuAttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<SkuAttributeCountAggregateOutputType> | number
          }
        }
      }
      SpuVariation: {
        payload: Prisma.$SpuVariationPayload<ExtArgs>
        fields: Prisma.SpuVariationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpuVariationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpuVariationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          findFirst: {
            args: Prisma.SpuVariationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpuVariationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          findMany: {
            args: Prisma.SpuVariationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>[]
          }
          create: {
            args: Prisma.SpuVariationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          createMany: {
            args: Prisma.SpuVariationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpuVariationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>[]
          }
          delete: {
            args: Prisma.SpuVariationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          update: {
            args: Prisma.SpuVariationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          deleteMany: {
            args: Prisma.SpuVariationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpuVariationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpuVariationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>[]
          }
          upsert: {
            args: Prisma.SpuVariationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuVariationPayload>
          }
          aggregate: {
            args: Prisma.SpuVariationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpuVariation>
          }
          groupBy: {
            args: Prisma.SpuVariationGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpuVariationGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpuVariationCountArgs<ExtArgs>
            result: $Utils.Optional<SpuVariationCountAggregateOutputType> | number
          }
        }
      }
      SkuVariationValue: {
        payload: Prisma.$SkuVariationValuePayload<ExtArgs>
        fields: Prisma.SkuVariationValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuVariationValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuVariationValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          findFirst: {
            args: Prisma.SkuVariationValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuVariationValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          findMany: {
            args: Prisma.SkuVariationValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>[]
          }
          create: {
            args: Prisma.SkuVariationValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          createMany: {
            args: Prisma.SkuVariationValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuVariationValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>[]
          }
          delete: {
            args: Prisma.SkuVariationValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          update: {
            args: Prisma.SkuVariationValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          deleteMany: {
            args: Prisma.SkuVariationValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuVariationValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuVariationValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>[]
          }
          upsert: {
            args: Prisma.SkuVariationValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuVariationValuePayload>
          }
          aggregate: {
            args: Prisma.SkuVariationValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuVariationValue>
          }
          groupBy: {
            args: Prisma.SkuVariationValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuVariationValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuVariationValueCountArgs<ExtArgs>
            result: $Utils.Optional<SkuVariationValueCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      SpuTag: {
        payload: Prisma.$SpuTagPayload<ExtArgs>
        fields: Prisma.SpuTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpuTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpuTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          findFirst: {
            args: Prisma.SpuTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpuTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          findMany: {
            args: Prisma.SpuTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>[]
          }
          create: {
            args: Prisma.SpuTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          createMany: {
            args: Prisma.SpuTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpuTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>[]
          }
          delete: {
            args: Prisma.SpuTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          update: {
            args: Prisma.SpuTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          deleteMany: {
            args: Prisma.SpuTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpuTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpuTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>[]
          }
          upsert: {
            args: Prisma.SpuTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpuTagPayload>
          }
          aggregate: {
            args: Prisma.SpuTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpuTag>
          }
          groupBy: {
            args: Prisma.SpuTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpuTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpuTagCountArgs<ExtArgs>
            result: $Utils.Optional<SpuTagCountAggregateOutputType> | number
          }
        }
      }
      Shop: {
        payload: Prisma.$ShopPayload<ExtArgs>
        fields: Prisma.ShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findFirst: {
            args: Prisma.ShopFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findMany: {
            args: Prisma.ShopFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          create: {
            args: Prisma.ShopCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          createMany: {
            args: Prisma.ShopCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShopCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          delete: {
            args: Prisma.ShopDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          update: {
            args: Prisma.ShopUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          deleteMany: {
            args: Prisma.ShopDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShopUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShopUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          upsert: {
            args: Prisma.ShopUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          aggregate: {
            args: Prisma.ShopAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShop>
          }
          groupBy: {
            args: Prisma.ShopGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopCountArgs<ExtArgs>
            result: $Utils.Optional<ShopCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Oauth2User: {
        payload: Prisma.$Oauth2UserPayload<ExtArgs>
        fields: Prisma.Oauth2UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Oauth2UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Oauth2UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          findFirst: {
            args: Prisma.Oauth2UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Oauth2UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          findMany: {
            args: Prisma.Oauth2UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>[]
          }
          create: {
            args: Prisma.Oauth2UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          createMany: {
            args: Prisma.Oauth2UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Oauth2UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>[]
          }
          delete: {
            args: Prisma.Oauth2UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          update: {
            args: Prisma.Oauth2UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          deleteMany: {
            args: Prisma.Oauth2UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Oauth2UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Oauth2UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>[]
          }
          upsert: {
            args: Prisma.Oauth2UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Oauth2UserPayload>
          }
          aggregate: {
            args: Prisma.Oauth2UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOauth2User>
          }
          groupBy: {
            args: Prisma.Oauth2UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<Oauth2UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.Oauth2UserCountArgs<ExtArgs>
            result: $Utils.Optional<Oauth2UserCountAggregateOutputType> | number
          }
        }
      }
      CreditCard: {
        payload: Prisma.$CreditCardPayload<ExtArgs>
        fields: Prisma.CreditCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          findFirst: {
            args: Prisma.CreditCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          findMany: {
            args: Prisma.CreditCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          create: {
            args: Prisma.CreditCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          createMany: {
            args: Prisma.CreditCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CreditCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          delete: {
            args: Prisma.CreditCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          update: {
            args: Prisma.CreditCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          deleteMany: {
            args: Prisma.CreditCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CreditCardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          upsert: {
            args: Prisma.CreditCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          aggregate: {
            args: Prisma.CreditCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditCard>
          }
          groupBy: {
            args: Prisma.CreditCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditCardCountArgs<ExtArgs>
            result: $Utils.Optional<CreditCardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    session?: SessionOmit
    code?: CodeOmit
    category?: CategoryOmit
    brand?: BrandOmit
    spu?: SpuOmit
    sku?: SkuOmit
    spuImage?: SpuImageOmit
    skuImage?: SkuImageOmit
    attribute?: AttributeOmit
    attributeValue?: AttributeValueOmit
    spuAttribute?: SpuAttributeOmit
    skuAttribute?: SkuAttributeOmit
    spuVariation?: SpuVariationOmit
    skuVariationValue?: SkuVariationValueOmit
    tag?: TagOmit
    spuTag?: SpuTagOmit
    shop?: ShopOmit
    user?: UserOmit
    oauth2User?: Oauth2UserOmit
    creditCard?: CreditCardOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    spus: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    spus?: boolean | CategoryCountOutputTypeCountSpusArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSpusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    spus: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spus?: boolean | BrandCountOutputTypeCountSpusArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountSpusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuWhereInput
  }


  /**
   * Count Type SpuCountOutputType
   */

  export type SpuCountOutputType = {
    skus: number
    spuImages: number
    spuAttributes: number
    spuTags: number
    spuVariations: number
  }

  export type SpuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skus?: boolean | SpuCountOutputTypeCountSkusArgs
    spuImages?: boolean | SpuCountOutputTypeCountSpuImagesArgs
    spuAttributes?: boolean | SpuCountOutputTypeCountSpuAttributesArgs
    spuTags?: boolean | SpuCountOutputTypeCountSpuTagsArgs
    spuVariations?: boolean | SpuCountOutputTypeCountSpuVariationsArgs
  }

  // Custom InputTypes
  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuCountOutputType
     */
    select?: SpuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeCountSkusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuWhereInput
  }

  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeCountSpuImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuImageWhereInput
  }

  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeCountSpuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuAttributeWhereInput
  }

  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeCountSpuTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuTagWhereInput
  }

  /**
   * SpuCountOutputType without action
   */
  export type SpuCountOutputTypeCountSpuVariationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuVariationWhereInput
  }


  /**
   * Count Type SkuCountOutputType
   */

  export type SkuCountOutputType = {
    skuImages: number
    skuAttributes: number
    skuVariationValues: number
  }

  export type SkuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skuImages?: boolean | SkuCountOutputTypeCountSkuImagesArgs
    skuAttributes?: boolean | SkuCountOutputTypeCountSkuAttributesArgs
    skuVariationValues?: boolean | SkuCountOutputTypeCountSkuVariationValuesArgs
  }

  // Custom InputTypes
  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuCountOutputType
     */
    select?: SkuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountSkuImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuImageWhereInput
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountSkuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuAttributeWhereInput
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountSkuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuVariationValueWhereInput
  }


  /**
   * Count Type AttributeCountOutputType
   */

  export type AttributeCountOutputType = {
    spuAttributes: number
    skuAttributes: number
    attributeValues: number
    spuVariations: number
  }

  export type AttributeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spuAttributes?: boolean | AttributeCountOutputTypeCountSpuAttributesArgs
    skuAttributes?: boolean | AttributeCountOutputTypeCountSkuAttributesArgs
    attributeValues?: boolean | AttributeCountOutputTypeCountAttributeValuesArgs
    spuVariations?: boolean | AttributeCountOutputTypeCountSpuVariationsArgs
  }

  // Custom InputTypes
  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeCountOutputType
     */
    select?: AttributeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeCountSpuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuAttributeWhereInput
  }

  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeCountSkuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuAttributeWhereInput
  }

  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeCountAttributeValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeValueWhereInput
  }

  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeCountSpuVariationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuVariationWhereInput
  }


  /**
   * Count Type AttributeValueCountOutputType
   */

  export type AttributeValueCountOutputType = {
    spuAttributes: number
    skuAttributes: number
    skuVariationValues: number
  }

  export type AttributeValueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spuAttributes?: boolean | AttributeValueCountOutputTypeCountSpuAttributesArgs
    skuAttributes?: boolean | AttributeValueCountOutputTypeCountSkuAttributesArgs
    skuVariationValues?: boolean | AttributeValueCountOutputTypeCountSkuVariationValuesArgs
  }

  // Custom InputTypes
  /**
   * AttributeValueCountOutputType without action
   */
  export type AttributeValueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValueCountOutputType
     */
    select?: AttributeValueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttributeValueCountOutputType without action
   */
  export type AttributeValueCountOutputTypeCountSpuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuAttributeWhereInput
  }

  /**
   * AttributeValueCountOutputType without action
   */
  export type AttributeValueCountOutputTypeCountSkuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuAttributeWhereInput
  }

  /**
   * AttributeValueCountOutputType without action
   */
  export type AttributeValueCountOutputTypeCountSkuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuVariationValueWhereInput
  }


  /**
   * Count Type SpuVariationCountOutputType
   */

  export type SpuVariationCountOutputType = {
    skuVariationValues: number
  }

  export type SpuVariationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skuVariationValues?: boolean | SpuVariationCountOutputTypeCountSkuVariationValuesArgs
  }

  // Custom InputTypes
  /**
   * SpuVariationCountOutputType without action
   */
  export type SpuVariationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariationCountOutputType
     */
    select?: SpuVariationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpuVariationCountOutputType without action
   */
  export type SpuVariationCountOutputTypeCountSkuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuVariationValueWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    spuTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spuTags?: boolean | TagCountOutputTypeCountSpuTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountSpuTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuTagWhereInput
  }


  /**
   * Count Type ShopCountOutputType
   */

  export type ShopCountOutputType = {
    spus: number
  }

  export type ShopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spus?: boolean | ShopCountOutputTypeCountSpusArgs
  }

  // Custom InputTypes
  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     */
    select?: ShopCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeCountSpusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    Oauth2User: number
    shops: number
    CreditCard: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    Oauth2User?: boolean | UserCountOutputTypeCountOauth2UserArgs
    shops?: boolean | UserCountOutputTypeCountShopsArgs
    CreditCard?: boolean | UserCountOutputTypeCountCreditCardArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauth2UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Oauth2UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreditCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditCardWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    hashingRefreshToken: string | null
    userAgent: string | null
    userIp: string | null
    createdAt: Date | null
    updatedAt: Date | null
    loginedAt: Date | null
    logoutedAt: Date | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    hashingRefreshToken: string | null
    userAgent: string | null
    userIp: string | null
    createdAt: Date | null
    updatedAt: Date | null
    loginedAt: Date | null
    logoutedAt: Date | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    hashingRefreshToken: number
    userAgent: number
    userIp: number
    createdAt: number
    updatedAt: number
    loginedAt: number
    logoutedAt: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    hashingRefreshToken?: true
    userAgent?: true
    userIp?: true
    createdAt?: true
    updatedAt?: true
    loginedAt?: true
    logoutedAt?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    hashingRefreshToken?: true
    userAgent?: true
    userIp?: true
    createdAt?: true
    updatedAt?: true
    loginedAt?: true
    logoutedAt?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    hashingRefreshToken?: true
    userAgent?: true
    userIp?: true
    createdAt?: true
    updatedAt?: true
    loginedAt?: true
    logoutedAt?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    hashingRefreshToken: string | null
    userAgent: string
    userIp: string | null
    createdAt: Date
    updatedAt: Date
    loginedAt: Date | null
    logoutedAt: Date | null
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hashingRefreshToken?: boolean
    userAgent?: boolean
    userIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginedAt?: boolean
    logoutedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hashingRefreshToken?: boolean
    userAgent?: boolean
    userIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginedAt?: boolean
    logoutedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hashingRefreshToken?: boolean
    userAgent?: boolean
    userIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginedAt?: boolean
    logoutedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    hashingRefreshToken?: boolean
    userAgent?: boolean
    userIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginedAt?: boolean
    logoutedAt?: boolean
    userId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hashingRefreshToken" | "userAgent" | "userIp" | "createdAt" | "updatedAt" | "loginedAt" | "logoutedAt" | "userId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hashingRefreshToken: string | null
      userAgent: string
      userIp: string | null
      createdAt: Date
      updatedAt: Date
      loginedAt: Date | null
      logoutedAt: Date | null
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly hashingRefreshToken: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userIp: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly loginedAt: FieldRef<"Session", 'DateTime'>
    readonly logoutedAt: FieldRef<"Session", 'DateTime'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Code
   */

  export type AggregateCode = {
    _count: CodeCountAggregateOutputType | null
    _min: CodeMinAggregateOutputType | null
    _max: CodeMaxAggregateOutputType | null
  }

  export type CodeMinAggregateOutputType = {
    id: string | null
    code: string | null
    createdAt: Date | null
    expiredAt: Date | null
    userId: string | null
  }

  export type CodeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    createdAt: Date | null
    expiredAt: Date | null
    userId: string | null
  }

  export type CodeCountAggregateOutputType = {
    id: number
    code: number
    createdAt: number
    expiredAt: number
    userId: number
    _all: number
  }


  export type CodeMinAggregateInputType = {
    id?: true
    code?: true
    createdAt?: true
    expiredAt?: true
    userId?: true
  }

  export type CodeMaxAggregateInputType = {
    id?: true
    code?: true
    createdAt?: true
    expiredAt?: true
    userId?: true
  }

  export type CodeCountAggregateInputType = {
    id?: true
    code?: true
    createdAt?: true
    expiredAt?: true
    userId?: true
    _all?: true
  }

  export type CodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Code to aggregate.
     */
    where?: CodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodeOrderByWithRelationInput | CodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Codes
    **/
    _count?: true | CodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodeMaxAggregateInputType
  }

  export type GetCodeAggregateType<T extends CodeAggregateArgs> = {
        [P in keyof T & keyof AggregateCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCode[P]>
      : GetScalarType<T[P], AggregateCode[P]>
  }




  export type CodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodeWhereInput
    orderBy?: CodeOrderByWithAggregationInput | CodeOrderByWithAggregationInput[]
    by: CodeScalarFieldEnum[] | CodeScalarFieldEnum
    having?: CodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodeCountAggregateInputType | true
    _min?: CodeMinAggregateInputType
    _max?: CodeMaxAggregateInputType
  }

  export type CodeGroupByOutputType = {
    id: string
    code: string
    createdAt: Date
    expiredAt: Date
    userId: string
    _count: CodeCountAggregateOutputType | null
    _min: CodeMinAggregateOutputType | null
    _max: CodeMaxAggregateOutputType | null
  }

  type GetCodeGroupByPayload<T extends CodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodeGroupByOutputType[P]>
            : GetScalarType<T[P], CodeGroupByOutputType[P]>
        }
      >
    >


  export type CodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["code"]>

  export type CodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["code"]>

  export type CodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["code"]>

  export type CodeSelectScalar = {
    id?: boolean
    code?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    userId?: boolean
  }

  export type CodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "createdAt" | "expiredAt" | "userId", ExtArgs["result"]["code"]>
  export type CodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Code"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      createdAt: Date
      expiredAt: Date
      userId: string
    }, ExtArgs["result"]["code"]>
    composites: {}
  }

  type CodeGetPayload<S extends boolean | null | undefined | CodeDefaultArgs> = $Result.GetResult<Prisma.$CodePayload, S>

  type CodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CodeCountAggregateInputType | true
    }

  export interface CodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Code'], meta: { name: 'Code' } }
    /**
     * Find zero or one Code that matches the filter.
     * @param {CodeFindUniqueArgs} args - Arguments to find a Code
     * @example
     * // Get one Code
     * const code = await prisma.code.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodeFindUniqueArgs>(args: SelectSubset<T, CodeFindUniqueArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Code that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CodeFindUniqueOrThrowArgs} args - Arguments to find a Code
     * @example
     * // Get one Code
     * const code = await prisma.code.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodeFindUniqueOrThrowArgs>(args: SelectSubset<T, CodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Code that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeFindFirstArgs} args - Arguments to find a Code
     * @example
     * // Get one Code
     * const code = await prisma.code.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodeFindFirstArgs>(args?: SelectSubset<T, CodeFindFirstArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Code that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeFindFirstOrThrowArgs} args - Arguments to find a Code
     * @example
     * // Get one Code
     * const code = await prisma.code.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodeFindFirstOrThrowArgs>(args?: SelectSubset<T, CodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Codes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Codes
     * const codes = await prisma.code.findMany()
     * 
     * // Get first 10 Codes
     * const codes = await prisma.code.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codeWithIdOnly = await prisma.code.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodeFindManyArgs>(args?: SelectSubset<T, CodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Code.
     * @param {CodeCreateArgs} args - Arguments to create a Code.
     * @example
     * // Create one Code
     * const Code = await prisma.code.create({
     *   data: {
     *     // ... data to create a Code
     *   }
     * })
     * 
     */
    create<T extends CodeCreateArgs>(args: SelectSubset<T, CodeCreateArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Codes.
     * @param {CodeCreateManyArgs} args - Arguments to create many Codes.
     * @example
     * // Create many Codes
     * const code = await prisma.code.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodeCreateManyArgs>(args?: SelectSubset<T, CodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Codes and returns the data saved in the database.
     * @param {CodeCreateManyAndReturnArgs} args - Arguments to create many Codes.
     * @example
     * // Create many Codes
     * const code = await prisma.code.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Codes and only return the `id`
     * const codeWithIdOnly = await prisma.code.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodeCreateManyAndReturnArgs>(args?: SelectSubset<T, CodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Code.
     * @param {CodeDeleteArgs} args - Arguments to delete one Code.
     * @example
     * // Delete one Code
     * const Code = await prisma.code.delete({
     *   where: {
     *     // ... filter to delete one Code
     *   }
     * })
     * 
     */
    delete<T extends CodeDeleteArgs>(args: SelectSubset<T, CodeDeleteArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Code.
     * @param {CodeUpdateArgs} args - Arguments to update one Code.
     * @example
     * // Update one Code
     * const code = await prisma.code.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodeUpdateArgs>(args: SelectSubset<T, CodeUpdateArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Codes.
     * @param {CodeDeleteManyArgs} args - Arguments to filter Codes to delete.
     * @example
     * // Delete a few Codes
     * const { count } = await prisma.code.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodeDeleteManyArgs>(args?: SelectSubset<T, CodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Codes
     * const code = await prisma.code.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodeUpdateManyArgs>(args: SelectSubset<T, CodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Codes and returns the data updated in the database.
     * @param {CodeUpdateManyAndReturnArgs} args - Arguments to update many Codes.
     * @example
     * // Update many Codes
     * const code = await prisma.code.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Codes and only return the `id`
     * const codeWithIdOnly = await prisma.code.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CodeUpdateManyAndReturnArgs>(args: SelectSubset<T, CodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Code.
     * @param {CodeUpsertArgs} args - Arguments to update or create a Code.
     * @example
     * // Update or create a Code
     * const code = await prisma.code.upsert({
     *   create: {
     *     // ... data to create a Code
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Code we want to update
     *   }
     * })
     */
    upsert<T extends CodeUpsertArgs>(args: SelectSubset<T, CodeUpsertArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Codes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeCountArgs} args - Arguments to filter Codes to count.
     * @example
     * // Count the number of Codes
     * const count = await prisma.code.count({
     *   where: {
     *     // ... the filter for the Codes we want to count
     *   }
     * })
    **/
    count<T extends CodeCountArgs>(
      args?: Subset<T, CodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Code.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodeAggregateArgs>(args: Subset<T, CodeAggregateArgs>): Prisma.PrismaPromise<GetCodeAggregateType<T>>

    /**
     * Group by Code.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodeGroupByArgs['orderBy'] }
        : { orderBy?: CodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Code model
   */
  readonly fields: CodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Code.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Code model
   */
  interface CodeFieldRefs {
    readonly id: FieldRef<"Code", 'String'>
    readonly code: FieldRef<"Code", 'String'>
    readonly createdAt: FieldRef<"Code", 'DateTime'>
    readonly expiredAt: FieldRef<"Code", 'DateTime'>
    readonly userId: FieldRef<"Code", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Code findUnique
   */
  export type CodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter, which Code to fetch.
     */
    where: CodeWhereUniqueInput
  }

  /**
   * Code findUniqueOrThrow
   */
  export type CodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter, which Code to fetch.
     */
    where: CodeWhereUniqueInput
  }

  /**
   * Code findFirst
   */
  export type CodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter, which Code to fetch.
     */
    where?: CodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodeOrderByWithRelationInput | CodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codes.
     */
    cursor?: CodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codes.
     */
    distinct?: CodeScalarFieldEnum | CodeScalarFieldEnum[]
  }

  /**
   * Code findFirstOrThrow
   */
  export type CodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter, which Code to fetch.
     */
    where?: CodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodeOrderByWithRelationInput | CodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codes.
     */
    cursor?: CodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codes.
     */
    distinct?: CodeScalarFieldEnum | CodeScalarFieldEnum[]
  }

  /**
   * Code findMany
   */
  export type CodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter, which Codes to fetch.
     */
    where?: CodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codes to fetch.
     */
    orderBy?: CodeOrderByWithRelationInput | CodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Codes.
     */
    cursor?: CodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codes.
     */
    skip?: number
    distinct?: CodeScalarFieldEnum | CodeScalarFieldEnum[]
  }

  /**
   * Code create
   */
  export type CodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * The data needed to create a Code.
     */
    data: XOR<CodeCreateInput, CodeUncheckedCreateInput>
  }

  /**
   * Code createMany
   */
  export type CodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Codes.
     */
    data: CodeCreateManyInput | CodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Code createManyAndReturn
   */
  export type CodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * The data used to create many Codes.
     */
    data: CodeCreateManyInput | CodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Code update
   */
  export type CodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * The data needed to update a Code.
     */
    data: XOR<CodeUpdateInput, CodeUncheckedUpdateInput>
    /**
     * Choose, which Code to update.
     */
    where: CodeWhereUniqueInput
  }

  /**
   * Code updateMany
   */
  export type CodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Codes.
     */
    data: XOR<CodeUpdateManyMutationInput, CodeUncheckedUpdateManyInput>
    /**
     * Filter which Codes to update
     */
    where?: CodeWhereInput
    /**
     * Limit how many Codes to update.
     */
    limit?: number
  }

  /**
   * Code updateManyAndReturn
   */
  export type CodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * The data used to update Codes.
     */
    data: XOR<CodeUpdateManyMutationInput, CodeUncheckedUpdateManyInput>
    /**
     * Filter which Codes to update
     */
    where?: CodeWhereInput
    /**
     * Limit how many Codes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Code upsert
   */
  export type CodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * The filter to search for the Code to update in case it exists.
     */
    where: CodeWhereUniqueInput
    /**
     * In case the Code found by the `where` argument doesn't exist, create a new Code with this data.
     */
    create: XOR<CodeCreateInput, CodeUncheckedCreateInput>
    /**
     * In case the Code was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodeUpdateInput, CodeUncheckedUpdateInput>
  }

  /**
   * Code delete
   */
  export type CodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    /**
     * Filter which Code to delete.
     */
    where: CodeWhereUniqueInput
  }

  /**
   * Code deleteMany
   */
  export type CodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Codes to delete
     */
    where?: CodeWhereInput
    /**
     * Limit how many Codes to delete.
     */
    limit?: number
  }

  /**
   * Code without action
   */
  export type CodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type CategorySumAggregateOutputType = {
    sortOrder: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    parentId: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    sortOrder?: true
  }

  export type CategorySumAggregateInputType = {
    sortOrder?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string | null
    imageUrl: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    parentId: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    spus?: boolean | Category$spusArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "imageUrl" | "isActive" | "sortOrder" | "createdAt" | "updatedAt" | "parentId", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    spus?: boolean | Category$spusArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      spus: Prisma.$SpuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string | null
      imageUrl: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
      parentId: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spus<T extends Category$spusArgs<ExtArgs> = {}>(args?: Subset<T, Category$spusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly imageUrl: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly sortOrder: FieldRef<"Category", 'Int'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly parentId: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.spus
   */
  export type Category$spusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    where?: SpuWhereInput
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    cursor?: SpuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    logoUrl: string | null
    websiteUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    logoUrl: string | null
    websiteUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    logoUrl: number
    websiteUrl: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    websiteUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    websiteUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    websiteUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string | null
    logoUrl: string | null
    websiteUrl: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    websiteUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spus?: boolean | Brand$spusArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    websiteUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    websiteUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    websiteUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "logoUrl" | "websiteUrl" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spus?: boolean | Brand$spusArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      spus: Prisma.$SpuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string | null
      logoUrl: string | null
      websiteUrl: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spus<T extends Brand$spusArgs<ExtArgs> = {}>(args?: Subset<T, Brand$spusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly slug: FieldRef<"Brand", 'String'>
    readonly description: FieldRef<"Brand", 'String'>
    readonly logoUrl: FieldRef<"Brand", 'String'>
    readonly websiteUrl: FieldRef<"Brand", 'String'>
    readonly isActive: FieldRef<"Brand", 'Boolean'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.spus
   */
  export type Brand$spusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    where?: SpuWhereInput
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    cursor?: SpuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Spu
   */

  export type AggregateSpu = {
    _count: SpuCountAggregateOutputType | null
    _min: SpuMinAggregateOutputType | null
    _max: SpuMaxAggregateOutputType | null
  }

  export type SpuMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    shortDesc: string | null
    status: $Enums.SpuStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    brandId: string | null
    shopId: string | null
  }

  export type SpuMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    shortDesc: string | null
    status: $Enums.SpuStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    brandId: string | null
    shopId: string | null
  }

  export type SpuCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    shortDesc: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    categoryId: number
    brandId: number
    shopId: number
    _all: number
  }


  export type SpuMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    shortDesc?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    brandId?: true
    shopId?: true
  }

  export type SpuMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    shortDesc?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    brandId?: true
    shopId?: true
  }

  export type SpuCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    shortDesc?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    brandId?: true
    shopId?: true
    _all?: true
  }

  export type SpuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spu to aggregate.
     */
    where?: SpuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spus to fetch.
     */
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spus
    **/
    _count?: true | SpuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpuMaxAggregateInputType
  }

  export type GetSpuAggregateType<T extends SpuAggregateArgs> = {
        [P in keyof T & keyof AggregateSpu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpu[P]>
      : GetScalarType<T[P], AggregateSpu[P]>
  }




  export type SpuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuWhereInput
    orderBy?: SpuOrderByWithAggregationInput | SpuOrderByWithAggregationInput[]
    by: SpuScalarFieldEnum[] | SpuScalarFieldEnum
    having?: SpuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpuCountAggregateInputType | true
    _min?: SpuMinAggregateInputType
    _max?: SpuMaxAggregateInputType
  }

  export type SpuGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string | null
    shortDesc: string | null
    status: $Enums.SpuStatus
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    categoryId: string
    brandId: string
    shopId: string
    _count: SpuCountAggregateOutputType | null
    _min: SpuMinAggregateOutputType | null
    _max: SpuMaxAggregateOutputType | null
  }

  type GetSpuGroupByPayload<T extends SpuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpuGroupByOutputType[P]>
            : GetScalarType<T[P], SpuGroupByOutputType[P]>
        }
      >
    >


  export type SpuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    shortDesc?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    brandId?: boolean
    shopId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
    skus?: boolean | Spu$skusArgs<ExtArgs>
    spuImages?: boolean | Spu$spuImagesArgs<ExtArgs>
    spuAttributes?: boolean | Spu$spuAttributesArgs<ExtArgs>
    spuTags?: boolean | Spu$spuTagsArgs<ExtArgs>
    spuVariations?: boolean | Spu$spuVariationsArgs<ExtArgs>
    _count?: boolean | SpuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spu"]>

  export type SpuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    shortDesc?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    brandId?: boolean
    shopId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spu"]>

  export type SpuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    shortDesc?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    brandId?: boolean
    shopId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spu"]>

  export type SpuSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    shortDesc?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    brandId?: boolean
    shopId?: boolean
  }

  export type SpuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "shortDesc" | "status" | "isActive" | "createdAt" | "updatedAt" | "categoryId" | "brandId" | "shopId", ExtArgs["result"]["spu"]>
  export type SpuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
    skus?: boolean | Spu$skusArgs<ExtArgs>
    spuImages?: boolean | Spu$spuImagesArgs<ExtArgs>
    spuAttributes?: boolean | Spu$spuAttributesArgs<ExtArgs>
    spuTags?: boolean | Spu$spuTagsArgs<ExtArgs>
    spuVariations?: boolean | Spu$spuVariationsArgs<ExtArgs>
    _count?: boolean | SpuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }
  export type SpuIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }

  export type $SpuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Spu"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      brand: Prisma.$BrandPayload<ExtArgs>
      shop: Prisma.$ShopPayload<ExtArgs>
      skus: Prisma.$SkuPayload<ExtArgs>[]
      spuImages: Prisma.$SpuImagePayload<ExtArgs>[]
      spuAttributes: Prisma.$SpuAttributePayload<ExtArgs>[]
      spuTags: Prisma.$SpuTagPayload<ExtArgs>[]
      spuVariations: Prisma.$SpuVariationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string | null
      shortDesc: string | null
      status: $Enums.SpuStatus
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      categoryId: string
      brandId: string
      shopId: string
    }, ExtArgs["result"]["spu"]>
    composites: {}
  }

  type SpuGetPayload<S extends boolean | null | undefined | SpuDefaultArgs> = $Result.GetResult<Prisma.$SpuPayload, S>

  type SpuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpuCountAggregateInputType | true
    }

  export interface SpuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Spu'], meta: { name: 'Spu' } }
    /**
     * Find zero or one Spu that matches the filter.
     * @param {SpuFindUniqueArgs} args - Arguments to find a Spu
     * @example
     * // Get one Spu
     * const spu = await prisma.spu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpuFindUniqueArgs>(args: SelectSubset<T, SpuFindUniqueArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Spu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpuFindUniqueOrThrowArgs} args - Arguments to find a Spu
     * @example
     * // Get one Spu
     * const spu = await prisma.spu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpuFindUniqueOrThrowArgs>(args: SelectSubset<T, SpuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuFindFirstArgs} args - Arguments to find a Spu
     * @example
     * // Get one Spu
     * const spu = await prisma.spu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpuFindFirstArgs>(args?: SelectSubset<T, SpuFindFirstArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuFindFirstOrThrowArgs} args - Arguments to find a Spu
     * @example
     * // Get one Spu
     * const spu = await prisma.spu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpuFindFirstOrThrowArgs>(args?: SelectSubset<T, SpuFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Spus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spus
     * const spus = await prisma.spu.findMany()
     * 
     * // Get first 10 Spus
     * const spus = await prisma.spu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spuWithIdOnly = await prisma.spu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpuFindManyArgs>(args?: SelectSubset<T, SpuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Spu.
     * @param {SpuCreateArgs} args - Arguments to create a Spu.
     * @example
     * // Create one Spu
     * const Spu = await prisma.spu.create({
     *   data: {
     *     // ... data to create a Spu
     *   }
     * })
     * 
     */
    create<T extends SpuCreateArgs>(args: SelectSubset<T, SpuCreateArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Spus.
     * @param {SpuCreateManyArgs} args - Arguments to create many Spus.
     * @example
     * // Create many Spus
     * const spu = await prisma.spu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpuCreateManyArgs>(args?: SelectSubset<T, SpuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Spus and returns the data saved in the database.
     * @param {SpuCreateManyAndReturnArgs} args - Arguments to create many Spus.
     * @example
     * // Create many Spus
     * const spu = await prisma.spu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Spus and only return the `id`
     * const spuWithIdOnly = await prisma.spu.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpuCreateManyAndReturnArgs>(args?: SelectSubset<T, SpuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Spu.
     * @param {SpuDeleteArgs} args - Arguments to delete one Spu.
     * @example
     * // Delete one Spu
     * const Spu = await prisma.spu.delete({
     *   where: {
     *     // ... filter to delete one Spu
     *   }
     * })
     * 
     */
    delete<T extends SpuDeleteArgs>(args: SelectSubset<T, SpuDeleteArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Spu.
     * @param {SpuUpdateArgs} args - Arguments to update one Spu.
     * @example
     * // Update one Spu
     * const spu = await prisma.spu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpuUpdateArgs>(args: SelectSubset<T, SpuUpdateArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Spus.
     * @param {SpuDeleteManyArgs} args - Arguments to filter Spus to delete.
     * @example
     * // Delete a few Spus
     * const { count } = await prisma.spu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpuDeleteManyArgs>(args?: SelectSubset<T, SpuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spus
     * const spu = await prisma.spu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpuUpdateManyArgs>(args: SelectSubset<T, SpuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spus and returns the data updated in the database.
     * @param {SpuUpdateManyAndReturnArgs} args - Arguments to update many Spus.
     * @example
     * // Update many Spus
     * const spu = await prisma.spu.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Spus and only return the `id`
     * const spuWithIdOnly = await prisma.spu.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpuUpdateManyAndReturnArgs>(args: SelectSubset<T, SpuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Spu.
     * @param {SpuUpsertArgs} args - Arguments to update or create a Spu.
     * @example
     * // Update or create a Spu
     * const spu = await prisma.spu.upsert({
     *   create: {
     *     // ... data to create a Spu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spu we want to update
     *   }
     * })
     */
    upsert<T extends SpuUpsertArgs>(args: SelectSubset<T, SpuUpsertArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Spus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuCountArgs} args - Arguments to filter Spus to count.
     * @example
     * // Count the number of Spus
     * const count = await prisma.spu.count({
     *   where: {
     *     // ... the filter for the Spus we want to count
     *   }
     * })
    **/
    count<T extends SpuCountArgs>(
      args?: Subset<T, SpuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpuAggregateArgs>(args: Subset<T, SpuAggregateArgs>): Prisma.PrismaPromise<GetSpuAggregateType<T>>

    /**
     * Group by Spu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpuGroupByArgs['orderBy'] }
        : { orderBy?: SpuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Spu model
   */
  readonly fields: SpuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Spu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shop<T extends ShopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopDefaultArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skus<T extends Spu$skusArgs<ExtArgs> = {}>(args?: Subset<T, Spu$skusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spuImages<T extends Spu$spuImagesArgs<ExtArgs> = {}>(args?: Subset<T, Spu$spuImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spuAttributes<T extends Spu$spuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, Spu$spuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spuTags<T extends Spu$spuTagsArgs<ExtArgs> = {}>(args?: Subset<T, Spu$spuTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spuVariations<T extends Spu$spuVariationsArgs<ExtArgs> = {}>(args?: Subset<T, Spu$spuVariationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Spu model
   */
  interface SpuFieldRefs {
    readonly id: FieldRef<"Spu", 'String'>
    readonly name: FieldRef<"Spu", 'String'>
    readonly slug: FieldRef<"Spu", 'String'>
    readonly description: FieldRef<"Spu", 'String'>
    readonly shortDesc: FieldRef<"Spu", 'String'>
    readonly status: FieldRef<"Spu", 'SpuStatus'>
    readonly isActive: FieldRef<"Spu", 'Boolean'>
    readonly createdAt: FieldRef<"Spu", 'DateTime'>
    readonly updatedAt: FieldRef<"Spu", 'DateTime'>
    readonly categoryId: FieldRef<"Spu", 'String'>
    readonly brandId: FieldRef<"Spu", 'String'>
    readonly shopId: FieldRef<"Spu", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Spu findUnique
   */
  export type SpuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter, which Spu to fetch.
     */
    where: SpuWhereUniqueInput
  }

  /**
   * Spu findUniqueOrThrow
   */
  export type SpuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter, which Spu to fetch.
     */
    where: SpuWhereUniqueInput
  }

  /**
   * Spu findFirst
   */
  export type SpuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter, which Spu to fetch.
     */
    where?: SpuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spus to fetch.
     */
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spus.
     */
    cursor?: SpuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spus.
     */
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Spu findFirstOrThrow
   */
  export type SpuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter, which Spu to fetch.
     */
    where?: SpuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spus to fetch.
     */
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spus.
     */
    cursor?: SpuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spus.
     */
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Spu findMany
   */
  export type SpuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter, which Spus to fetch.
     */
    where?: SpuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spus to fetch.
     */
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spus.
     */
    cursor?: SpuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spus.
     */
    skip?: number
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Spu create
   */
  export type SpuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * The data needed to create a Spu.
     */
    data: XOR<SpuCreateInput, SpuUncheckedCreateInput>
  }

  /**
   * Spu createMany
   */
  export type SpuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spus.
     */
    data: SpuCreateManyInput | SpuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Spu createManyAndReturn
   */
  export type SpuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * The data used to create many Spus.
     */
    data: SpuCreateManyInput | SpuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spu update
   */
  export type SpuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * The data needed to update a Spu.
     */
    data: XOR<SpuUpdateInput, SpuUncheckedUpdateInput>
    /**
     * Choose, which Spu to update.
     */
    where: SpuWhereUniqueInput
  }

  /**
   * Spu updateMany
   */
  export type SpuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spus.
     */
    data: XOR<SpuUpdateManyMutationInput, SpuUncheckedUpdateManyInput>
    /**
     * Filter which Spus to update
     */
    where?: SpuWhereInput
    /**
     * Limit how many Spus to update.
     */
    limit?: number
  }

  /**
   * Spu updateManyAndReturn
   */
  export type SpuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * The data used to update Spus.
     */
    data: XOR<SpuUpdateManyMutationInput, SpuUncheckedUpdateManyInput>
    /**
     * Filter which Spus to update
     */
    where?: SpuWhereInput
    /**
     * Limit how many Spus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spu upsert
   */
  export type SpuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * The filter to search for the Spu to update in case it exists.
     */
    where: SpuWhereUniqueInput
    /**
     * In case the Spu found by the `where` argument doesn't exist, create a new Spu with this data.
     */
    create: XOR<SpuCreateInput, SpuUncheckedCreateInput>
    /**
     * In case the Spu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpuUpdateInput, SpuUncheckedUpdateInput>
  }

  /**
   * Spu delete
   */
  export type SpuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    /**
     * Filter which Spu to delete.
     */
    where: SpuWhereUniqueInput
  }

  /**
   * Spu deleteMany
   */
  export type SpuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spus to delete
     */
    where?: SpuWhereInput
    /**
     * Limit how many Spus to delete.
     */
    limit?: number
  }

  /**
   * Spu.skus
   */
  export type Spu$skusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    where?: SkuWhereInput
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    cursor?: SkuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Spu.spuImages
   */
  export type Spu$spuImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    where?: SpuImageWhereInput
    orderBy?: SpuImageOrderByWithRelationInput | SpuImageOrderByWithRelationInput[]
    cursor?: SpuImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuImageScalarFieldEnum | SpuImageScalarFieldEnum[]
  }

  /**
   * Spu.spuAttributes
   */
  export type Spu$spuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    where?: SpuAttributeWhereInput
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    cursor?: SpuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * Spu.spuTags
   */
  export type Spu$spuTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    where?: SpuTagWhereInput
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    cursor?: SpuTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuTagScalarFieldEnum | SpuTagScalarFieldEnum[]
  }

  /**
   * Spu.spuVariations
   */
  export type Spu$spuVariationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    where?: SpuVariationWhereInput
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    cursor?: SpuVariationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuVariationScalarFieldEnum | SpuVariationScalarFieldEnum[]
  }

  /**
   * Spu without action
   */
  export type SpuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
  }


  /**
   * Model Sku
   */

  export type AggregateSku = {
    _count: SkuCountAggregateOutputType | null
    _avg: SkuAvgAggregateOutputType | null
    _sum: SkuSumAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  export type SkuAvgAggregateOutputType = {
    originalPrice: Decimal | null
    salePrice: Decimal | null
    stock: number | null
    weight: Decimal | null
    length: Decimal | null
    width: Decimal | null
    height: Decimal | null
  }

  export type SkuSumAggregateOutputType = {
    originalPrice: Decimal | null
    salePrice: Decimal | null
    stock: number | null
    weight: Decimal | null
    length: Decimal | null
    width: Decimal | null
    height: Decimal | null
  }

  export type SkuMinAggregateOutputType = {
    id: string | null
    skuCode: string | null
    name: string | null
    originalPrice: Decimal | null
    salePrice: Decimal | null
    stock: number | null
    weight: Decimal | null
    length: Decimal | null
    width: Decimal | null
    height: Decimal | null
    status: $Enums.SkuStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    spuId: string | null
  }

  export type SkuMaxAggregateOutputType = {
    id: string | null
    skuCode: string | null
    name: string | null
    originalPrice: Decimal | null
    salePrice: Decimal | null
    stock: number | null
    weight: Decimal | null
    length: Decimal | null
    width: Decimal | null
    height: Decimal | null
    status: $Enums.SkuStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    spuId: string | null
  }

  export type SkuCountAggregateOutputType = {
    id: number
    skuCode: number
    name: number
    originalPrice: number
    salePrice: number
    stock: number
    weight: number
    length: number
    width: number
    height: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    spuId: number
    _all: number
  }


  export type SkuAvgAggregateInputType = {
    originalPrice?: true
    salePrice?: true
    stock?: true
    weight?: true
    length?: true
    width?: true
    height?: true
  }

  export type SkuSumAggregateInputType = {
    originalPrice?: true
    salePrice?: true
    stock?: true
    weight?: true
    length?: true
    width?: true
    height?: true
  }

  export type SkuMinAggregateInputType = {
    id?: true
    skuCode?: true
    name?: true
    originalPrice?: true
    salePrice?: true
    stock?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    spuId?: true
  }

  export type SkuMaxAggregateInputType = {
    id?: true
    skuCode?: true
    name?: true
    originalPrice?: true
    salePrice?: true
    stock?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    spuId?: true
  }

  export type SkuCountAggregateInputType = {
    id?: true
    skuCode?: true
    name?: true
    originalPrice?: true
    salePrice?: true
    stock?: true
    weight?: true
    length?: true
    width?: true
    height?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    spuId?: true
    _all?: true
  }

  export type SkuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sku to aggregate.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skus
    **/
    _count?: true | SkuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuMaxAggregateInputType
  }

  export type GetSkuAggregateType<T extends SkuAggregateArgs> = {
        [P in keyof T & keyof AggregateSku]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSku[P]>
      : GetScalarType<T[P], AggregateSku[P]>
  }




  export type SkuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuWhereInput
    orderBy?: SkuOrderByWithAggregationInput | SkuOrderByWithAggregationInput[]
    by: SkuScalarFieldEnum[] | SkuScalarFieldEnum
    having?: SkuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuCountAggregateInputType | true
    _avg?: SkuAvgAggregateInputType
    _sum?: SkuSumAggregateInputType
    _min?: SkuMinAggregateInputType
    _max?: SkuMaxAggregateInputType
  }

  export type SkuGroupByOutputType = {
    id: string
    skuCode: string
    name: string
    originalPrice: Decimal
    salePrice: Decimal | null
    stock: number
    weight: Decimal | null
    length: Decimal | null
    width: Decimal | null
    height: Decimal | null
    status: $Enums.SkuStatus
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    spuId: string
    _count: SkuCountAggregateOutputType | null
    _avg: SkuAvgAggregateOutputType | null
    _sum: SkuSumAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  type GetSkuGroupByPayload<T extends SkuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuGroupByOutputType[P]>
            : GetScalarType<T[P], SkuGroupByOutputType[P]>
        }
      >
    >


  export type SkuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuCode?: boolean
    name?: boolean
    originalPrice?: boolean
    salePrice?: boolean
    stock?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    skuImages?: boolean | Sku$skuImagesArgs<ExtArgs>
    skuAttributes?: boolean | Sku$skuAttributesArgs<ExtArgs>
    skuVariationValues?: boolean | Sku$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | SkuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuCode?: boolean
    name?: boolean
    originalPrice?: boolean
    salePrice?: boolean
    stock?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuCode?: boolean
    name?: boolean
    originalPrice?: boolean
    salePrice?: boolean
    stock?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectScalar = {
    id?: boolean
    skuCode?: boolean
    name?: boolean
    originalPrice?: boolean
    salePrice?: boolean
    stock?: boolean
    weight?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuId?: boolean
  }

  export type SkuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skuCode" | "name" | "originalPrice" | "salePrice" | "stock" | "weight" | "length" | "width" | "height" | "status" | "isActive" | "createdAt" | "updatedAt" | "spuId", ExtArgs["result"]["sku"]>
  export type SkuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    skuImages?: boolean | Sku$skuImagesArgs<ExtArgs>
    skuAttributes?: boolean | Sku$skuAttributesArgs<ExtArgs>
    skuVariationValues?: boolean | Sku$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | SkuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }
  export type SkuIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }

  export type $SkuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sku"
    objects: {
      spu: Prisma.$SpuPayload<ExtArgs>
      skuImages: Prisma.$SkuImagePayload<ExtArgs>[]
      skuAttributes: Prisma.$SkuAttributePayload<ExtArgs>[]
      skuVariationValues: Prisma.$SkuVariationValuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skuCode: string
      name: string
      originalPrice: Prisma.Decimal
      salePrice: Prisma.Decimal | null
      stock: number
      weight: Prisma.Decimal | null
      length: Prisma.Decimal | null
      width: Prisma.Decimal | null
      height: Prisma.Decimal | null
      status: $Enums.SkuStatus
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      spuId: string
    }, ExtArgs["result"]["sku"]>
    composites: {}
  }

  type SkuGetPayload<S extends boolean | null | undefined | SkuDefaultArgs> = $Result.GetResult<Prisma.$SkuPayload, S>

  type SkuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuCountAggregateInputType | true
    }

  export interface SkuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sku'], meta: { name: 'Sku' } }
    /**
     * Find zero or one Sku that matches the filter.
     * @param {SkuFindUniqueArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuFindUniqueArgs>(args: SelectSubset<T, SkuFindUniqueArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sku that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuFindUniqueOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindFirstArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuFindFirstArgs>(args?: SelectSubset<T, SkuFindFirstArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sku that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindFirstOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skus
     * const skus = await prisma.sku.findMany()
     * 
     * // Get first 10 Skus
     * const skus = await prisma.sku.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuWithIdOnly = await prisma.sku.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuFindManyArgs>(args?: SelectSubset<T, SkuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sku.
     * @param {SkuCreateArgs} args - Arguments to create a Sku.
     * @example
     * // Create one Sku
     * const Sku = await prisma.sku.create({
     *   data: {
     *     // ... data to create a Sku
     *   }
     * })
     * 
     */
    create<T extends SkuCreateArgs>(args: SelectSubset<T, SkuCreateArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skus.
     * @param {SkuCreateManyArgs} args - Arguments to create many Skus.
     * @example
     * // Create many Skus
     * const sku = await prisma.sku.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuCreateManyArgs>(args?: SelectSubset<T, SkuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skus and returns the data saved in the database.
     * @param {SkuCreateManyAndReturnArgs} args - Arguments to create many Skus.
     * @example
     * // Create many Skus
     * const sku = await prisma.sku.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skus and only return the `id`
     * const skuWithIdOnly = await prisma.sku.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sku.
     * @param {SkuDeleteArgs} args - Arguments to delete one Sku.
     * @example
     * // Delete one Sku
     * const Sku = await prisma.sku.delete({
     *   where: {
     *     // ... filter to delete one Sku
     *   }
     * })
     * 
     */
    delete<T extends SkuDeleteArgs>(args: SelectSubset<T, SkuDeleteArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sku.
     * @param {SkuUpdateArgs} args - Arguments to update one Sku.
     * @example
     * // Update one Sku
     * const sku = await prisma.sku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuUpdateArgs>(args: SelectSubset<T, SkuUpdateArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skus.
     * @param {SkuDeleteManyArgs} args - Arguments to filter Skus to delete.
     * @example
     * // Delete a few Skus
     * const { count } = await prisma.sku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuDeleteManyArgs>(args?: SelectSubset<T, SkuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skus
     * const sku = await prisma.sku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuUpdateManyArgs>(args: SelectSubset<T, SkuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skus and returns the data updated in the database.
     * @param {SkuUpdateManyAndReturnArgs} args - Arguments to update many Skus.
     * @example
     * // Update many Skus
     * const sku = await prisma.sku.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skus and only return the `id`
     * const skuWithIdOnly = await prisma.sku.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sku.
     * @param {SkuUpsertArgs} args - Arguments to update or create a Sku.
     * @example
     * // Update or create a Sku
     * const sku = await prisma.sku.upsert({
     *   create: {
     *     // ... data to create a Sku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sku we want to update
     *   }
     * })
     */
    upsert<T extends SkuUpsertArgs>(args: SelectSubset<T, SkuUpsertArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuCountArgs} args - Arguments to filter Skus to count.
     * @example
     * // Count the number of Skus
     * const count = await prisma.sku.count({
     *   where: {
     *     // ... the filter for the Skus we want to count
     *   }
     * })
    **/
    count<T extends SkuCountArgs>(
      args?: Subset<T, SkuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuAggregateArgs>(args: Subset<T, SkuAggregateArgs>): Prisma.PrismaPromise<GetSkuAggregateType<T>>

    /**
     * Group by Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuGroupByArgs['orderBy'] }
        : { orderBy?: SkuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sku model
   */
  readonly fields: SkuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spu<T extends SpuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuDefaultArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skuImages<T extends Sku$skuImagesArgs<ExtArgs> = {}>(args?: Subset<T, Sku$skuImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skuAttributes<T extends Sku$skuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, Sku$skuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skuVariationValues<T extends Sku$skuVariationValuesArgs<ExtArgs> = {}>(args?: Subset<T, Sku$skuVariationValuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sku model
   */
  interface SkuFieldRefs {
    readonly id: FieldRef<"Sku", 'String'>
    readonly skuCode: FieldRef<"Sku", 'String'>
    readonly name: FieldRef<"Sku", 'String'>
    readonly originalPrice: FieldRef<"Sku", 'Decimal'>
    readonly salePrice: FieldRef<"Sku", 'Decimal'>
    readonly stock: FieldRef<"Sku", 'Int'>
    readonly weight: FieldRef<"Sku", 'Decimal'>
    readonly length: FieldRef<"Sku", 'Decimal'>
    readonly width: FieldRef<"Sku", 'Decimal'>
    readonly height: FieldRef<"Sku", 'Decimal'>
    readonly status: FieldRef<"Sku", 'SkuStatus'>
    readonly isActive: FieldRef<"Sku", 'Boolean'>
    readonly createdAt: FieldRef<"Sku", 'DateTime'>
    readonly updatedAt: FieldRef<"Sku", 'DateTime'>
    readonly spuId: FieldRef<"Sku", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Sku findUnique
   */
  export type SkuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku findUniqueOrThrow
   */
  export type SkuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku findFirst
   */
  export type SkuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku findFirstOrThrow
   */
  export type SkuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku findMany
   */
  export type SkuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Skus to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku create
   */
  export type SkuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The data needed to create a Sku.
     */
    data: XOR<SkuCreateInput, SkuUncheckedCreateInput>
  }

  /**
   * Sku createMany
   */
  export type SkuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skus.
     */
    data: SkuCreateManyInput | SkuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sku createManyAndReturn
   */
  export type SkuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * The data used to create many Skus.
     */
    data: SkuCreateManyInput | SkuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sku update
   */
  export type SkuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The data needed to update a Sku.
     */
    data: XOR<SkuUpdateInput, SkuUncheckedUpdateInput>
    /**
     * Choose, which Sku to update.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku updateMany
   */
  export type SkuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skus.
     */
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyInput>
    /**
     * Filter which Skus to update
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to update.
     */
    limit?: number
  }

  /**
   * Sku updateManyAndReturn
   */
  export type SkuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * The data used to update Skus.
     */
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyInput>
    /**
     * Filter which Skus to update
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sku upsert
   */
  export type SkuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The filter to search for the Sku to update in case it exists.
     */
    where: SkuWhereUniqueInput
    /**
     * In case the Sku found by the `where` argument doesn't exist, create a new Sku with this data.
     */
    create: XOR<SkuCreateInput, SkuUncheckedCreateInput>
    /**
     * In case the Sku was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuUpdateInput, SkuUncheckedUpdateInput>
  }

  /**
   * Sku delete
   */
  export type SkuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter which Sku to delete.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku deleteMany
   */
  export type SkuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skus to delete
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to delete.
     */
    limit?: number
  }

  /**
   * Sku.skuImages
   */
  export type Sku$skuImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    where?: SkuImageWhereInput
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    cursor?: SkuImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * Sku.skuAttributes
   */
  export type Sku$skuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    where?: SkuAttributeWhereInput
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    cursor?: SkuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * Sku.skuVariationValues
   */
  export type Sku$skuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    where?: SkuVariationValueWhereInput
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    cursor?: SkuVariationValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * Sku without action
   */
  export type SkuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
  }


  /**
   * Model SpuImage
   */

  export type AggregateSpuImage = {
    _count: SpuImageCountAggregateOutputType | null
    _avg: SpuImageAvgAggregateOutputType | null
    _sum: SpuImageSumAggregateOutputType | null
    _min: SpuImageMinAggregateOutputType | null
    _max: SpuImageMaxAggregateOutputType | null
  }

  export type SpuImageAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type SpuImageSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type SpuImageMinAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    altText: string | null
    sortOrder: number | null
    isMain: boolean | null
    createdAt: Date | null
    spuId: string | null
  }

  export type SpuImageMaxAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    altText: string | null
    sortOrder: number | null
    isMain: boolean | null
    createdAt: Date | null
    spuId: string | null
  }

  export type SpuImageCountAggregateOutputType = {
    id: number
    imageUrl: number
    altText: number
    sortOrder: number
    isMain: number
    createdAt: number
    spuId: number
    _all: number
  }


  export type SpuImageAvgAggregateInputType = {
    sortOrder?: true
  }

  export type SpuImageSumAggregateInputType = {
    sortOrder?: true
  }

  export type SpuImageMinAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    spuId?: true
  }

  export type SpuImageMaxAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    spuId?: true
  }

  export type SpuImageCountAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    spuId?: true
    _all?: true
  }

  export type SpuImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuImage to aggregate.
     */
    where?: SpuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuImages to fetch.
     */
    orderBy?: SpuImageOrderByWithRelationInput | SpuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpuImages
    **/
    _count?: true | SpuImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpuImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpuImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpuImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpuImageMaxAggregateInputType
  }

  export type GetSpuImageAggregateType<T extends SpuImageAggregateArgs> = {
        [P in keyof T & keyof AggregateSpuImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpuImage[P]>
      : GetScalarType<T[P], AggregateSpuImage[P]>
  }




  export type SpuImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuImageWhereInput
    orderBy?: SpuImageOrderByWithAggregationInput | SpuImageOrderByWithAggregationInput[]
    by: SpuImageScalarFieldEnum[] | SpuImageScalarFieldEnum
    having?: SpuImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpuImageCountAggregateInputType | true
    _avg?: SpuImageAvgAggregateInputType
    _sum?: SpuImageSumAggregateInputType
    _min?: SpuImageMinAggregateInputType
    _max?: SpuImageMaxAggregateInputType
  }

  export type SpuImageGroupByOutputType = {
    id: string
    imageUrl: string
    altText: string | null
    sortOrder: number
    isMain: boolean
    createdAt: Date
    spuId: string
    _count: SpuImageCountAggregateOutputType | null
    _avg: SpuImageAvgAggregateOutputType | null
    _sum: SpuImageSumAggregateOutputType | null
    _min: SpuImageMinAggregateOutputType | null
    _max: SpuImageMaxAggregateOutputType | null
  }

  type GetSpuImageGroupByPayload<T extends SpuImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpuImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpuImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpuImageGroupByOutputType[P]>
            : GetScalarType<T[P], SpuImageGroupByOutputType[P]>
        }
      >
    >


  export type SpuImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuImage"]>

  export type SpuImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuImage"]>

  export type SpuImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    spuId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuImage"]>

  export type SpuImageSelectScalar = {
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    spuId?: boolean
  }

  export type SpuImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imageUrl" | "altText" | "sortOrder" | "isMain" | "createdAt" | "spuId", ExtArgs["result"]["spuImage"]>
  export type SpuImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }
  export type SpuImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }
  export type SpuImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
  }

  export type $SpuImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpuImage"
    objects: {
      spu: Prisma.$SpuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageUrl: string
      altText: string | null
      sortOrder: number
      isMain: boolean
      createdAt: Date
      spuId: string
    }, ExtArgs["result"]["spuImage"]>
    composites: {}
  }

  type SpuImageGetPayload<S extends boolean | null | undefined | SpuImageDefaultArgs> = $Result.GetResult<Prisma.$SpuImagePayload, S>

  type SpuImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpuImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpuImageCountAggregateInputType | true
    }

  export interface SpuImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpuImage'], meta: { name: 'SpuImage' } }
    /**
     * Find zero or one SpuImage that matches the filter.
     * @param {SpuImageFindUniqueArgs} args - Arguments to find a SpuImage
     * @example
     * // Get one SpuImage
     * const spuImage = await prisma.spuImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpuImageFindUniqueArgs>(args: SelectSubset<T, SpuImageFindUniqueArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpuImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpuImageFindUniqueOrThrowArgs} args - Arguments to find a SpuImage
     * @example
     * // Get one SpuImage
     * const spuImage = await prisma.spuImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpuImageFindUniqueOrThrowArgs>(args: SelectSubset<T, SpuImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageFindFirstArgs} args - Arguments to find a SpuImage
     * @example
     * // Get one SpuImage
     * const spuImage = await prisma.spuImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpuImageFindFirstArgs>(args?: SelectSubset<T, SpuImageFindFirstArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageFindFirstOrThrowArgs} args - Arguments to find a SpuImage
     * @example
     * // Get one SpuImage
     * const spuImage = await prisma.spuImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpuImageFindFirstOrThrowArgs>(args?: SelectSubset<T, SpuImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpuImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpuImages
     * const spuImages = await prisma.spuImage.findMany()
     * 
     * // Get first 10 SpuImages
     * const spuImages = await prisma.spuImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spuImageWithIdOnly = await prisma.spuImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpuImageFindManyArgs>(args?: SelectSubset<T, SpuImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpuImage.
     * @param {SpuImageCreateArgs} args - Arguments to create a SpuImage.
     * @example
     * // Create one SpuImage
     * const SpuImage = await prisma.spuImage.create({
     *   data: {
     *     // ... data to create a SpuImage
     *   }
     * })
     * 
     */
    create<T extends SpuImageCreateArgs>(args: SelectSubset<T, SpuImageCreateArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpuImages.
     * @param {SpuImageCreateManyArgs} args - Arguments to create many SpuImages.
     * @example
     * // Create many SpuImages
     * const spuImage = await prisma.spuImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpuImageCreateManyArgs>(args?: SelectSubset<T, SpuImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpuImages and returns the data saved in the database.
     * @param {SpuImageCreateManyAndReturnArgs} args - Arguments to create many SpuImages.
     * @example
     * // Create many SpuImages
     * const spuImage = await prisma.spuImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpuImages and only return the `id`
     * const spuImageWithIdOnly = await prisma.spuImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpuImageCreateManyAndReturnArgs>(args?: SelectSubset<T, SpuImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpuImage.
     * @param {SpuImageDeleteArgs} args - Arguments to delete one SpuImage.
     * @example
     * // Delete one SpuImage
     * const SpuImage = await prisma.spuImage.delete({
     *   where: {
     *     // ... filter to delete one SpuImage
     *   }
     * })
     * 
     */
    delete<T extends SpuImageDeleteArgs>(args: SelectSubset<T, SpuImageDeleteArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpuImage.
     * @param {SpuImageUpdateArgs} args - Arguments to update one SpuImage.
     * @example
     * // Update one SpuImage
     * const spuImage = await prisma.spuImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpuImageUpdateArgs>(args: SelectSubset<T, SpuImageUpdateArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpuImages.
     * @param {SpuImageDeleteManyArgs} args - Arguments to filter SpuImages to delete.
     * @example
     * // Delete a few SpuImages
     * const { count } = await prisma.spuImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpuImageDeleteManyArgs>(args?: SelectSubset<T, SpuImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpuImages
     * const spuImage = await prisma.spuImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpuImageUpdateManyArgs>(args: SelectSubset<T, SpuImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuImages and returns the data updated in the database.
     * @param {SpuImageUpdateManyAndReturnArgs} args - Arguments to update many SpuImages.
     * @example
     * // Update many SpuImages
     * const spuImage = await prisma.spuImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpuImages and only return the `id`
     * const spuImageWithIdOnly = await prisma.spuImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpuImageUpdateManyAndReturnArgs>(args: SelectSubset<T, SpuImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpuImage.
     * @param {SpuImageUpsertArgs} args - Arguments to update or create a SpuImage.
     * @example
     * // Update or create a SpuImage
     * const spuImage = await prisma.spuImage.upsert({
     *   create: {
     *     // ... data to create a SpuImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpuImage we want to update
     *   }
     * })
     */
    upsert<T extends SpuImageUpsertArgs>(args: SelectSubset<T, SpuImageUpsertArgs<ExtArgs>>): Prisma__SpuImageClient<$Result.GetResult<Prisma.$SpuImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageCountArgs} args - Arguments to filter SpuImages to count.
     * @example
     * // Count the number of SpuImages
     * const count = await prisma.spuImage.count({
     *   where: {
     *     // ... the filter for the SpuImages we want to count
     *   }
     * })
    **/
    count<T extends SpuImageCountArgs>(
      args?: Subset<T, SpuImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpuImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpuImageAggregateArgs>(args: Subset<T, SpuImageAggregateArgs>): Prisma.PrismaPromise<GetSpuImageAggregateType<T>>

    /**
     * Group by SpuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpuImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpuImageGroupByArgs['orderBy'] }
        : { orderBy?: SpuImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpuImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpuImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpuImage model
   */
  readonly fields: SpuImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpuImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpuImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spu<T extends SpuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuDefaultArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpuImage model
   */
  interface SpuImageFieldRefs {
    readonly id: FieldRef<"SpuImage", 'String'>
    readonly imageUrl: FieldRef<"SpuImage", 'String'>
    readonly altText: FieldRef<"SpuImage", 'String'>
    readonly sortOrder: FieldRef<"SpuImage", 'Int'>
    readonly isMain: FieldRef<"SpuImage", 'Boolean'>
    readonly createdAt: FieldRef<"SpuImage", 'DateTime'>
    readonly spuId: FieldRef<"SpuImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpuImage findUnique
   */
  export type SpuImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter, which SpuImage to fetch.
     */
    where: SpuImageWhereUniqueInput
  }

  /**
   * SpuImage findUniqueOrThrow
   */
  export type SpuImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter, which SpuImage to fetch.
     */
    where: SpuImageWhereUniqueInput
  }

  /**
   * SpuImage findFirst
   */
  export type SpuImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter, which SpuImage to fetch.
     */
    where?: SpuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuImages to fetch.
     */
    orderBy?: SpuImageOrderByWithRelationInput | SpuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuImages.
     */
    cursor?: SpuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuImages.
     */
    distinct?: SpuImageScalarFieldEnum | SpuImageScalarFieldEnum[]
  }

  /**
   * SpuImage findFirstOrThrow
   */
  export type SpuImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter, which SpuImage to fetch.
     */
    where?: SpuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuImages to fetch.
     */
    orderBy?: SpuImageOrderByWithRelationInput | SpuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuImages.
     */
    cursor?: SpuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuImages.
     */
    distinct?: SpuImageScalarFieldEnum | SpuImageScalarFieldEnum[]
  }

  /**
   * SpuImage findMany
   */
  export type SpuImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter, which SpuImages to fetch.
     */
    where?: SpuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuImages to fetch.
     */
    orderBy?: SpuImageOrderByWithRelationInput | SpuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpuImages.
     */
    cursor?: SpuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuImages.
     */
    skip?: number
    distinct?: SpuImageScalarFieldEnum | SpuImageScalarFieldEnum[]
  }

  /**
   * SpuImage create
   */
  export type SpuImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * The data needed to create a SpuImage.
     */
    data: XOR<SpuImageCreateInput, SpuImageUncheckedCreateInput>
  }

  /**
   * SpuImage createMany
   */
  export type SpuImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpuImages.
     */
    data: SpuImageCreateManyInput | SpuImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpuImage createManyAndReturn
   */
  export type SpuImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * The data used to create many SpuImages.
     */
    data: SpuImageCreateManyInput | SpuImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuImage update
   */
  export type SpuImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * The data needed to update a SpuImage.
     */
    data: XOR<SpuImageUpdateInput, SpuImageUncheckedUpdateInput>
    /**
     * Choose, which SpuImage to update.
     */
    where: SpuImageWhereUniqueInput
  }

  /**
   * SpuImage updateMany
   */
  export type SpuImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpuImages.
     */
    data: XOR<SpuImageUpdateManyMutationInput, SpuImageUncheckedUpdateManyInput>
    /**
     * Filter which SpuImages to update
     */
    where?: SpuImageWhereInput
    /**
     * Limit how many SpuImages to update.
     */
    limit?: number
  }

  /**
   * SpuImage updateManyAndReturn
   */
  export type SpuImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * The data used to update SpuImages.
     */
    data: XOR<SpuImageUpdateManyMutationInput, SpuImageUncheckedUpdateManyInput>
    /**
     * Filter which SpuImages to update
     */
    where?: SpuImageWhereInput
    /**
     * Limit how many SpuImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuImage upsert
   */
  export type SpuImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * The filter to search for the SpuImage to update in case it exists.
     */
    where: SpuImageWhereUniqueInput
    /**
     * In case the SpuImage found by the `where` argument doesn't exist, create a new SpuImage with this data.
     */
    create: XOR<SpuImageCreateInput, SpuImageUncheckedCreateInput>
    /**
     * In case the SpuImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpuImageUpdateInput, SpuImageUncheckedUpdateInput>
  }

  /**
   * SpuImage delete
   */
  export type SpuImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
    /**
     * Filter which SpuImage to delete.
     */
    where: SpuImageWhereUniqueInput
  }

  /**
   * SpuImage deleteMany
   */
  export type SpuImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuImages to delete
     */
    where?: SpuImageWhereInput
    /**
     * Limit how many SpuImages to delete.
     */
    limit?: number
  }

  /**
   * SpuImage without action
   */
  export type SpuImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuImage
     */
    select?: SpuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuImage
     */
    omit?: SpuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuImageInclude<ExtArgs> | null
  }


  /**
   * Model SkuImage
   */

  export type AggregateSkuImage = {
    _count: SkuImageCountAggregateOutputType | null
    _avg: SkuImageAvgAggregateOutputType | null
    _sum: SkuImageSumAggregateOutputType | null
    _min: SkuImageMinAggregateOutputType | null
    _max: SkuImageMaxAggregateOutputType | null
  }

  export type SkuImageAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type SkuImageSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type SkuImageMinAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    altText: string | null
    sortOrder: number | null
    isMain: boolean | null
    createdAt: Date | null
    skuId: string | null
  }

  export type SkuImageMaxAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    altText: string | null
    sortOrder: number | null
    isMain: boolean | null
    createdAt: Date | null
    skuId: string | null
  }

  export type SkuImageCountAggregateOutputType = {
    id: number
    imageUrl: number
    altText: number
    sortOrder: number
    isMain: number
    createdAt: number
    skuId: number
    _all: number
  }


  export type SkuImageAvgAggregateInputType = {
    sortOrder?: true
  }

  export type SkuImageSumAggregateInputType = {
    sortOrder?: true
  }

  export type SkuImageMinAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    skuId?: true
  }

  export type SkuImageMaxAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    skuId?: true
  }

  export type SkuImageCountAggregateInputType = {
    id?: true
    imageUrl?: true
    altText?: true
    sortOrder?: true
    isMain?: true
    createdAt?: true
    skuId?: true
    _all?: true
  }

  export type SkuImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuImage to aggregate.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuImages
    **/
    _count?: true | SkuImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuImageMaxAggregateInputType
  }

  export type GetSkuImageAggregateType<T extends SkuImageAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuImage[P]>
      : GetScalarType<T[P], AggregateSkuImage[P]>
  }




  export type SkuImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuImageWhereInput
    orderBy?: SkuImageOrderByWithAggregationInput | SkuImageOrderByWithAggregationInput[]
    by: SkuImageScalarFieldEnum[] | SkuImageScalarFieldEnum
    having?: SkuImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuImageCountAggregateInputType | true
    _avg?: SkuImageAvgAggregateInputType
    _sum?: SkuImageSumAggregateInputType
    _min?: SkuImageMinAggregateInputType
    _max?: SkuImageMaxAggregateInputType
  }

  export type SkuImageGroupByOutputType = {
    id: string
    imageUrl: string
    altText: string | null
    sortOrder: number
    isMain: boolean
    createdAt: Date
    skuId: string
    _count: SkuImageCountAggregateOutputType | null
    _avg: SkuImageAvgAggregateOutputType | null
    _sum: SkuImageSumAggregateOutputType | null
    _min: SkuImageMinAggregateOutputType | null
    _max: SkuImageMaxAggregateOutputType | null
  }

  type GetSkuImageGroupByPayload<T extends SkuImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuImageGroupByOutputType[P]>
            : GetScalarType<T[P], SkuImageGroupByOutputType[P]>
        }
      >
    >


  export type SkuImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    skuId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    skuId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    skuId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectScalar = {
    id?: boolean
    imageUrl?: boolean
    altText?: boolean
    sortOrder?: boolean
    isMain?: boolean
    createdAt?: boolean
    skuId?: boolean
  }

  export type SkuImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imageUrl" | "altText" | "sortOrder" | "isMain" | "createdAt" | "skuId", ExtArgs["result"]["skuImage"]>
  export type SkuImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }
  export type SkuImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }
  export type SkuImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }

  export type $SkuImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuImage"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageUrl: string
      altText: string | null
      sortOrder: number
      isMain: boolean
      createdAt: Date
      skuId: string
    }, ExtArgs["result"]["skuImage"]>
    composites: {}
  }

  type SkuImageGetPayload<S extends boolean | null | undefined | SkuImageDefaultArgs> = $Result.GetResult<Prisma.$SkuImagePayload, S>

  type SkuImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuImageCountAggregateInputType | true
    }

  export interface SkuImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuImage'], meta: { name: 'SkuImage' } }
    /**
     * Find zero or one SkuImage that matches the filter.
     * @param {SkuImageFindUniqueArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuImageFindUniqueArgs>(args: SelectSubset<T, SkuImageFindUniqueArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuImageFindUniqueOrThrowArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuImageFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindFirstArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuImageFindFirstArgs>(args?: SelectSubset<T, SkuImageFindFirstArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindFirstOrThrowArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuImageFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuImages
     * const skuImages = await prisma.skuImage.findMany()
     * 
     * // Get first 10 SkuImages
     * const skuImages = await prisma.skuImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuImageFindManyArgs>(args?: SelectSubset<T, SkuImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuImage.
     * @param {SkuImageCreateArgs} args - Arguments to create a SkuImage.
     * @example
     * // Create one SkuImage
     * const SkuImage = await prisma.skuImage.create({
     *   data: {
     *     // ... data to create a SkuImage
     *   }
     * })
     * 
     */
    create<T extends SkuImageCreateArgs>(args: SelectSubset<T, SkuImageCreateArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuImages.
     * @param {SkuImageCreateManyArgs} args - Arguments to create many SkuImages.
     * @example
     * // Create many SkuImages
     * const skuImage = await prisma.skuImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuImageCreateManyArgs>(args?: SelectSubset<T, SkuImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuImages and returns the data saved in the database.
     * @param {SkuImageCreateManyAndReturnArgs} args - Arguments to create many SkuImages.
     * @example
     * // Create many SkuImages
     * const skuImage = await prisma.skuImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuImages and only return the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuImageCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuImage.
     * @param {SkuImageDeleteArgs} args - Arguments to delete one SkuImage.
     * @example
     * // Delete one SkuImage
     * const SkuImage = await prisma.skuImage.delete({
     *   where: {
     *     // ... filter to delete one SkuImage
     *   }
     * })
     * 
     */
    delete<T extends SkuImageDeleteArgs>(args: SelectSubset<T, SkuImageDeleteArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuImage.
     * @param {SkuImageUpdateArgs} args - Arguments to update one SkuImage.
     * @example
     * // Update one SkuImage
     * const skuImage = await prisma.skuImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuImageUpdateArgs>(args: SelectSubset<T, SkuImageUpdateArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuImages.
     * @param {SkuImageDeleteManyArgs} args - Arguments to filter SkuImages to delete.
     * @example
     * // Delete a few SkuImages
     * const { count } = await prisma.skuImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuImageDeleteManyArgs>(args?: SelectSubset<T, SkuImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuImages
     * const skuImage = await prisma.skuImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuImageUpdateManyArgs>(args: SelectSubset<T, SkuImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuImages and returns the data updated in the database.
     * @param {SkuImageUpdateManyAndReturnArgs} args - Arguments to update many SkuImages.
     * @example
     * // Update many SkuImages
     * const skuImage = await prisma.skuImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuImages and only return the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuImageUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuImage.
     * @param {SkuImageUpsertArgs} args - Arguments to update or create a SkuImage.
     * @example
     * // Update or create a SkuImage
     * const skuImage = await prisma.skuImage.upsert({
     *   create: {
     *     // ... data to create a SkuImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuImage we want to update
     *   }
     * })
     */
    upsert<T extends SkuImageUpsertArgs>(args: SelectSubset<T, SkuImageUpsertArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageCountArgs} args - Arguments to filter SkuImages to count.
     * @example
     * // Count the number of SkuImages
     * const count = await prisma.skuImage.count({
     *   where: {
     *     // ... the filter for the SkuImages we want to count
     *   }
     * })
    **/
    count<T extends SkuImageCountArgs>(
      args?: Subset<T, SkuImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuImageAggregateArgs>(args: Subset<T, SkuImageAggregateArgs>): Prisma.PrismaPromise<GetSkuImageAggregateType<T>>

    /**
     * Group by SkuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuImageGroupByArgs['orderBy'] }
        : { orderBy?: SkuImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuImage model
   */
  readonly fields: SkuImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuImage model
   */
  interface SkuImageFieldRefs {
    readonly id: FieldRef<"SkuImage", 'String'>
    readonly imageUrl: FieldRef<"SkuImage", 'String'>
    readonly altText: FieldRef<"SkuImage", 'String'>
    readonly sortOrder: FieldRef<"SkuImage", 'Int'>
    readonly isMain: FieldRef<"SkuImage", 'Boolean'>
    readonly createdAt: FieldRef<"SkuImage", 'DateTime'>
    readonly skuId: FieldRef<"SkuImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SkuImage findUnique
   */
  export type SkuImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage findUniqueOrThrow
   */
  export type SkuImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage findFirst
   */
  export type SkuImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuImages.
     */
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage findFirstOrThrow
   */
  export type SkuImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuImages.
     */
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage findMany
   */
  export type SkuImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImages to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage create
   */
  export type SkuImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuImage.
     */
    data: XOR<SkuImageCreateInput, SkuImageUncheckedCreateInput>
  }

  /**
   * SkuImage createMany
   */
  export type SkuImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuImages.
     */
    data: SkuImageCreateManyInput | SkuImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuImage createManyAndReturn
   */
  export type SkuImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * The data used to create many SkuImages.
     */
    data: SkuImageCreateManyInput | SkuImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuImage update
   */
  export type SkuImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuImage.
     */
    data: XOR<SkuImageUpdateInput, SkuImageUncheckedUpdateInput>
    /**
     * Choose, which SkuImage to update.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage updateMany
   */
  export type SkuImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuImages.
     */
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyInput>
    /**
     * Filter which SkuImages to update
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to update.
     */
    limit?: number
  }

  /**
   * SkuImage updateManyAndReturn
   */
  export type SkuImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * The data used to update SkuImages.
     */
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyInput>
    /**
     * Filter which SkuImages to update
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuImage upsert
   */
  export type SkuImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuImage to update in case it exists.
     */
    where: SkuImageWhereUniqueInput
    /**
     * In case the SkuImage found by the `where` argument doesn't exist, create a new SkuImage with this data.
     */
    create: XOR<SkuImageCreateInput, SkuImageUncheckedCreateInput>
    /**
     * In case the SkuImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuImageUpdateInput, SkuImageUncheckedUpdateInput>
  }

  /**
   * SkuImage delete
   */
  export type SkuImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter which SkuImage to delete.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage deleteMany
   */
  export type SkuImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuImages to delete
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to delete.
     */
    limit?: number
  }

  /**
   * SkuImage without action
   */
  export type SkuImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
  }


  /**
   * Model Attribute
   */

  export type AggregateAttribute = {
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  export type AttributeAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type AttributeSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type AttributeMinAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    type: $Enums.AttributeType | null
    isRequired: boolean | null
    isVariation: boolean | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttributeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    type: $Enums.AttributeType | null
    isRequired: boolean | null
    isVariation: boolean | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttributeCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    type: number
    isRequired: number
    isVariation: number
    sortOrder: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttributeAvgAggregateInputType = {
    sortOrder?: true
  }

  export type AttributeSumAggregateInputType = {
    sortOrder?: true
  }

  export type AttributeMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    isRequired?: true
    isVariation?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttributeMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    isRequired?: true
    isVariation?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttributeCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    isRequired?: true
    isVariation?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attribute to aggregate.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attributes
    **/
    _count?: true | AttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttributeMaxAggregateInputType
  }

  export type GetAttributeAggregateType<T extends AttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttribute[P]>
      : GetScalarType<T[P], AggregateAttribute[P]>
  }




  export type AttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeWhereInput
    orderBy?: AttributeOrderByWithAggregationInput | AttributeOrderByWithAggregationInput[]
    by: AttributeScalarFieldEnum[] | AttributeScalarFieldEnum
    having?: AttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttributeCountAggregateInputType | true
    _avg?: AttributeAvgAggregateInputType
    _sum?: AttributeSumAggregateInputType
    _min?: AttributeMinAggregateInputType
    _max?: AttributeMaxAggregateInputType
  }

  export type AttributeGroupByOutputType = {
    id: string
    name: string
    displayName: string
    type: $Enums.AttributeType
    isRequired: boolean
    isVariation: boolean
    sortOrder: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  type GetAttributeGroupByPayload<T extends AttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttributeGroupByOutputType[P]>
            : GetScalarType<T[P], AttributeGroupByOutputType[P]>
        }
      >
    >


  export type AttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuAttributes?: boolean | Attribute$spuAttributesArgs<ExtArgs>
    skuAttributes?: boolean | Attribute$skuAttributesArgs<ExtArgs>
    attributeValues?: boolean | Attribute$attributeValuesArgs<ExtArgs>
    spuVariations?: boolean | Attribute$spuVariationsArgs<ExtArgs>
    _count?: boolean | AttributeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "displayName" | "type" | "isRequired" | "isVariation" | "sortOrder" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["attribute"]>
  export type AttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spuAttributes?: boolean | Attribute$spuAttributesArgs<ExtArgs>
    skuAttributes?: boolean | Attribute$skuAttributesArgs<ExtArgs>
    attributeValues?: boolean | Attribute$attributeValuesArgs<ExtArgs>
    spuVariations?: boolean | Attribute$spuVariationsArgs<ExtArgs>
    _count?: boolean | AttributeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AttributeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attribute"
    objects: {
      spuAttributes: Prisma.$SpuAttributePayload<ExtArgs>[]
      skuAttributes: Prisma.$SkuAttributePayload<ExtArgs>[]
      attributeValues: Prisma.$AttributeValuePayload<ExtArgs>[]
      spuVariations: Prisma.$SpuVariationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      displayName: string
      type: $Enums.AttributeType
      isRequired: boolean
      isVariation: boolean
      sortOrder: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attribute"]>
    composites: {}
  }

  type AttributeGetPayload<S extends boolean | null | undefined | AttributeDefaultArgs> = $Result.GetResult<Prisma.$AttributePayload, S>

  type AttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttributeCountAggregateInputType | true
    }

  export interface AttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attribute'], meta: { name: 'Attribute' } }
    /**
     * Find zero or one Attribute that matches the filter.
     * @param {AttributeFindUniqueArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttributeFindUniqueArgs>(args: SelectSubset<T, AttributeFindUniqueArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttributeFindUniqueOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, AttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttributeFindFirstArgs>(args?: SelectSubset<T, AttributeFindFirstArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, AttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attributes
     * const attributes = await prisma.attribute.findMany()
     * 
     * // Get first 10 Attributes
     * const attributes = await prisma.attribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attributeWithIdOnly = await prisma.attribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttributeFindManyArgs>(args?: SelectSubset<T, AttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attribute.
     * @param {AttributeCreateArgs} args - Arguments to create a Attribute.
     * @example
     * // Create one Attribute
     * const Attribute = await prisma.attribute.create({
     *   data: {
     *     // ... data to create a Attribute
     *   }
     * })
     * 
     */
    create<T extends AttributeCreateArgs>(args: SelectSubset<T, AttributeCreateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attributes.
     * @param {AttributeCreateManyArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttributeCreateManyArgs>(args?: SelectSubset<T, AttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attributes and returns the data saved in the database.
     * @param {AttributeCreateManyAndReturnArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attributes and only return the `id`
     * const attributeWithIdOnly = await prisma.attribute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, AttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attribute.
     * @param {AttributeDeleteArgs} args - Arguments to delete one Attribute.
     * @example
     * // Delete one Attribute
     * const Attribute = await prisma.attribute.delete({
     *   where: {
     *     // ... filter to delete one Attribute
     *   }
     * })
     * 
     */
    delete<T extends AttributeDeleteArgs>(args: SelectSubset<T, AttributeDeleteArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attribute.
     * @param {AttributeUpdateArgs} args - Arguments to update one Attribute.
     * @example
     * // Update one Attribute
     * const attribute = await prisma.attribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttributeUpdateArgs>(args: SelectSubset<T, AttributeUpdateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attributes.
     * @param {AttributeDeleteManyArgs} args - Arguments to filter Attributes to delete.
     * @example
     * // Delete a few Attributes
     * const { count } = await prisma.attribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttributeDeleteManyArgs>(args?: SelectSubset<T, AttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attributes
     * const attribute = await prisma.attribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttributeUpdateManyArgs>(args: SelectSubset<T, AttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attributes and returns the data updated in the database.
     * @param {AttributeUpdateManyAndReturnArgs} args - Arguments to update many Attributes.
     * @example
     * // Update many Attributes
     * const attribute = await prisma.attribute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attributes and only return the `id`
     * const attributeWithIdOnly = await prisma.attribute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttributeUpdateManyAndReturnArgs>(args: SelectSubset<T, AttributeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attribute.
     * @param {AttributeUpsertArgs} args - Arguments to update or create a Attribute.
     * @example
     * // Update or create a Attribute
     * const attribute = await prisma.attribute.upsert({
     *   create: {
     *     // ... data to create a Attribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attribute we want to update
     *   }
     * })
     */
    upsert<T extends AttributeUpsertArgs>(args: SelectSubset<T, AttributeUpsertArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeCountArgs} args - Arguments to filter Attributes to count.
     * @example
     * // Count the number of Attributes
     * const count = await prisma.attribute.count({
     *   where: {
     *     // ... the filter for the Attributes we want to count
     *   }
     * })
    **/
    count<T extends AttributeCountArgs>(
      args?: Subset<T, AttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttributeAggregateArgs>(args: Subset<T, AttributeAggregateArgs>): Prisma.PrismaPromise<GetAttributeAggregateType<T>>

    /**
     * Group by Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttributeGroupByArgs['orderBy'] }
        : { orderBy?: AttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attribute model
   */
  readonly fields: AttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spuAttributes<T extends Attribute$spuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, Attribute$spuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skuAttributes<T extends Attribute$skuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, Attribute$skuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attributeValues<T extends Attribute$attributeValuesArgs<ExtArgs> = {}>(args?: Subset<T, Attribute$attributeValuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spuVariations<T extends Attribute$spuVariationsArgs<ExtArgs> = {}>(args?: Subset<T, Attribute$spuVariationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attribute model
   */
  interface AttributeFieldRefs {
    readonly id: FieldRef<"Attribute", 'String'>
    readonly name: FieldRef<"Attribute", 'String'>
    readonly displayName: FieldRef<"Attribute", 'String'>
    readonly type: FieldRef<"Attribute", 'AttributeType'>
    readonly isRequired: FieldRef<"Attribute", 'Boolean'>
    readonly isVariation: FieldRef<"Attribute", 'Boolean'>
    readonly sortOrder: FieldRef<"Attribute", 'Int'>
    readonly isActive: FieldRef<"Attribute", 'Boolean'>
    readonly createdAt: FieldRef<"Attribute", 'DateTime'>
    readonly updatedAt: FieldRef<"Attribute", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attribute findUnique
   */
  export type AttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findUniqueOrThrow
   */
  export type AttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findFirst
   */
  export type AttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findFirstOrThrow
   */
  export type AttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findMany
   */
  export type AttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attributes to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute create
   */
  export type AttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a Attribute.
     */
    data: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
  }

  /**
   * Attribute createMany
   */
  export type AttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attribute createManyAndReturn
   */
  export type AttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attribute update
   */
  export type AttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a Attribute.
     */
    data: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
    /**
     * Choose, which Attribute to update.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute updateMany
   */
  export type AttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attributes.
     */
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyInput>
    /**
     * Filter which Attributes to update
     */
    where?: AttributeWhereInput
    /**
     * Limit how many Attributes to update.
     */
    limit?: number
  }

  /**
   * Attribute updateManyAndReturn
   */
  export type AttributeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * The data used to update Attributes.
     */
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyInput>
    /**
     * Filter which Attributes to update
     */
    where?: AttributeWhereInput
    /**
     * Limit how many Attributes to update.
     */
    limit?: number
  }

  /**
   * Attribute upsert
   */
  export type AttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the Attribute to update in case it exists.
     */
    where: AttributeWhereUniqueInput
    /**
     * In case the Attribute found by the `where` argument doesn't exist, create a new Attribute with this data.
     */
    create: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
    /**
     * In case the Attribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
  }

  /**
   * Attribute delete
   */
  export type AttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter which Attribute to delete.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute deleteMany
   */
  export type AttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attributes to delete
     */
    where?: AttributeWhereInput
    /**
     * Limit how many Attributes to delete.
     */
    limit?: number
  }

  /**
   * Attribute.spuAttributes
   */
  export type Attribute$spuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    where?: SpuAttributeWhereInput
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    cursor?: SpuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * Attribute.skuAttributes
   */
  export type Attribute$skuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    where?: SkuAttributeWhereInput
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    cursor?: SkuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * Attribute.attributeValues
   */
  export type Attribute$attributeValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    where?: AttributeValueWhereInput
    orderBy?: AttributeValueOrderByWithRelationInput | AttributeValueOrderByWithRelationInput[]
    cursor?: AttributeValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttributeValueScalarFieldEnum | AttributeValueScalarFieldEnum[]
  }

  /**
   * Attribute.spuVariations
   */
  export type Attribute$spuVariationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    where?: SpuVariationWhereInput
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    cursor?: SpuVariationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuVariationScalarFieldEnum | SpuVariationScalarFieldEnum[]
  }

  /**
   * Attribute without action
   */
  export type AttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
  }


  /**
   * Model AttributeValue
   */

  export type AggregateAttributeValue = {
    _count: AttributeValueCountAggregateOutputType | null
    _avg: AttributeValueAvgAggregateOutputType | null
    _sum: AttributeValueSumAggregateOutputType | null
    _min: AttributeValueMinAggregateOutputType | null
    _max: AttributeValueMaxAggregateOutputType | null
  }

  export type AttributeValueAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type AttributeValueSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type AttributeValueMinAggregateOutputType = {
    id: string | null
    value: string | null
    displayName: string | null
    colorCode: string | null
    imageUrl: string | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    attributeId: string | null
  }

  export type AttributeValueMaxAggregateOutputType = {
    id: string | null
    value: string | null
    displayName: string | null
    colorCode: string | null
    imageUrl: string | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    attributeId: string | null
  }

  export type AttributeValueCountAggregateOutputType = {
    id: number
    value: number
    displayName: number
    colorCode: number
    imageUrl: number
    sortOrder: number
    isActive: number
    createdAt: number
    updatedAt: number
    attributeId: number
    _all: number
  }


  export type AttributeValueAvgAggregateInputType = {
    sortOrder?: true
  }

  export type AttributeValueSumAggregateInputType = {
    sortOrder?: true
  }

  export type AttributeValueMinAggregateInputType = {
    id?: true
    value?: true
    displayName?: true
    colorCode?: true
    imageUrl?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    attributeId?: true
  }

  export type AttributeValueMaxAggregateInputType = {
    id?: true
    value?: true
    displayName?: true
    colorCode?: true
    imageUrl?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    attributeId?: true
  }

  export type AttributeValueCountAggregateInputType = {
    id?: true
    value?: true
    displayName?: true
    colorCode?: true
    imageUrl?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    attributeId?: true
    _all?: true
  }

  export type AttributeValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttributeValue to aggregate.
     */
    where?: AttributeValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttributeValues to fetch.
     */
    orderBy?: AttributeValueOrderByWithRelationInput | AttributeValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttributeValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttributeValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttributeValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttributeValues
    **/
    _count?: true | AttributeValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttributeValueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttributeValueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttributeValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttributeValueMaxAggregateInputType
  }

  export type GetAttributeValueAggregateType<T extends AttributeValueAggregateArgs> = {
        [P in keyof T & keyof AggregateAttributeValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttributeValue[P]>
      : GetScalarType<T[P], AggregateAttributeValue[P]>
  }




  export type AttributeValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeValueWhereInput
    orderBy?: AttributeValueOrderByWithAggregationInput | AttributeValueOrderByWithAggregationInput[]
    by: AttributeValueScalarFieldEnum[] | AttributeValueScalarFieldEnum
    having?: AttributeValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttributeValueCountAggregateInputType | true
    _avg?: AttributeValueAvgAggregateInputType
    _sum?: AttributeValueSumAggregateInputType
    _min?: AttributeValueMinAggregateInputType
    _max?: AttributeValueMaxAggregateInputType
  }

  export type AttributeValueGroupByOutputType = {
    id: string
    value: string
    displayName: string | null
    colorCode: string | null
    imageUrl: string | null
    sortOrder: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    attributeId: string
    _count: AttributeValueCountAggregateOutputType | null
    _avg: AttributeValueAvgAggregateOutputType | null
    _sum: AttributeValueSumAggregateOutputType | null
    _min: AttributeValueMinAggregateOutputType | null
    _max: AttributeValueMaxAggregateOutputType | null
  }

  type GetAttributeValueGroupByPayload<T extends AttributeValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttributeValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttributeValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttributeValueGroupByOutputType[P]>
            : GetScalarType<T[P], AttributeValueGroupByOutputType[P]>
        }
      >
    >


  export type AttributeValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    displayName?: boolean
    colorCode?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attributeId?: boolean
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    spuAttributes?: boolean | AttributeValue$spuAttributesArgs<ExtArgs>
    skuAttributes?: boolean | AttributeValue$skuAttributesArgs<ExtArgs>
    skuVariationValues?: boolean | AttributeValue$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | AttributeValueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attributeValue"]>

  export type AttributeValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    displayName?: boolean
    colorCode?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attributeId?: boolean
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attributeValue"]>

  export type AttributeValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    displayName?: boolean
    colorCode?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attributeId?: boolean
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attributeValue"]>

  export type AttributeValueSelectScalar = {
    id?: boolean
    value?: boolean
    displayName?: boolean
    colorCode?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attributeId?: boolean
  }

  export type AttributeValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "displayName" | "colorCode" | "imageUrl" | "sortOrder" | "isActive" | "createdAt" | "updatedAt" | "attributeId", ExtArgs["result"]["attributeValue"]>
  export type AttributeValueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    spuAttributes?: boolean | AttributeValue$spuAttributesArgs<ExtArgs>
    skuAttributes?: boolean | AttributeValue$skuAttributesArgs<ExtArgs>
    skuVariationValues?: boolean | AttributeValue$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | AttributeValueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttributeValueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }
  export type AttributeValueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }

  export type $AttributeValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttributeValue"
    objects: {
      attribute: Prisma.$AttributePayload<ExtArgs>
      spuAttributes: Prisma.$SpuAttributePayload<ExtArgs>[]
      skuAttributes: Prisma.$SkuAttributePayload<ExtArgs>[]
      skuVariationValues: Prisma.$SkuVariationValuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      value: string
      displayName: string | null
      colorCode: string | null
      imageUrl: string | null
      sortOrder: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      attributeId: string
    }, ExtArgs["result"]["attributeValue"]>
    composites: {}
  }

  type AttributeValueGetPayload<S extends boolean | null | undefined | AttributeValueDefaultArgs> = $Result.GetResult<Prisma.$AttributeValuePayload, S>

  type AttributeValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttributeValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttributeValueCountAggregateInputType | true
    }

  export interface AttributeValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttributeValue'], meta: { name: 'AttributeValue' } }
    /**
     * Find zero or one AttributeValue that matches the filter.
     * @param {AttributeValueFindUniqueArgs} args - Arguments to find a AttributeValue
     * @example
     * // Get one AttributeValue
     * const attributeValue = await prisma.attributeValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttributeValueFindUniqueArgs>(args: SelectSubset<T, AttributeValueFindUniqueArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AttributeValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttributeValueFindUniqueOrThrowArgs} args - Arguments to find a AttributeValue
     * @example
     * // Get one AttributeValue
     * const attributeValue = await prisma.attributeValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttributeValueFindUniqueOrThrowArgs>(args: SelectSubset<T, AttributeValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttributeValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueFindFirstArgs} args - Arguments to find a AttributeValue
     * @example
     * // Get one AttributeValue
     * const attributeValue = await prisma.attributeValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttributeValueFindFirstArgs>(args?: SelectSubset<T, AttributeValueFindFirstArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttributeValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueFindFirstOrThrowArgs} args - Arguments to find a AttributeValue
     * @example
     * // Get one AttributeValue
     * const attributeValue = await prisma.attributeValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttributeValueFindFirstOrThrowArgs>(args?: SelectSubset<T, AttributeValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AttributeValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttributeValues
     * const attributeValues = await prisma.attributeValue.findMany()
     * 
     * // Get first 10 AttributeValues
     * const attributeValues = await prisma.attributeValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attributeValueWithIdOnly = await prisma.attributeValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttributeValueFindManyArgs>(args?: SelectSubset<T, AttributeValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AttributeValue.
     * @param {AttributeValueCreateArgs} args - Arguments to create a AttributeValue.
     * @example
     * // Create one AttributeValue
     * const AttributeValue = await prisma.attributeValue.create({
     *   data: {
     *     // ... data to create a AttributeValue
     *   }
     * })
     * 
     */
    create<T extends AttributeValueCreateArgs>(args: SelectSubset<T, AttributeValueCreateArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AttributeValues.
     * @param {AttributeValueCreateManyArgs} args - Arguments to create many AttributeValues.
     * @example
     * // Create many AttributeValues
     * const attributeValue = await prisma.attributeValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttributeValueCreateManyArgs>(args?: SelectSubset<T, AttributeValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttributeValues and returns the data saved in the database.
     * @param {AttributeValueCreateManyAndReturnArgs} args - Arguments to create many AttributeValues.
     * @example
     * // Create many AttributeValues
     * const attributeValue = await prisma.attributeValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttributeValues and only return the `id`
     * const attributeValueWithIdOnly = await prisma.attributeValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttributeValueCreateManyAndReturnArgs>(args?: SelectSubset<T, AttributeValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AttributeValue.
     * @param {AttributeValueDeleteArgs} args - Arguments to delete one AttributeValue.
     * @example
     * // Delete one AttributeValue
     * const AttributeValue = await prisma.attributeValue.delete({
     *   where: {
     *     // ... filter to delete one AttributeValue
     *   }
     * })
     * 
     */
    delete<T extends AttributeValueDeleteArgs>(args: SelectSubset<T, AttributeValueDeleteArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AttributeValue.
     * @param {AttributeValueUpdateArgs} args - Arguments to update one AttributeValue.
     * @example
     * // Update one AttributeValue
     * const attributeValue = await prisma.attributeValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttributeValueUpdateArgs>(args: SelectSubset<T, AttributeValueUpdateArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AttributeValues.
     * @param {AttributeValueDeleteManyArgs} args - Arguments to filter AttributeValues to delete.
     * @example
     * // Delete a few AttributeValues
     * const { count } = await prisma.attributeValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttributeValueDeleteManyArgs>(args?: SelectSubset<T, AttributeValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttributeValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttributeValues
     * const attributeValue = await prisma.attributeValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttributeValueUpdateManyArgs>(args: SelectSubset<T, AttributeValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttributeValues and returns the data updated in the database.
     * @param {AttributeValueUpdateManyAndReturnArgs} args - Arguments to update many AttributeValues.
     * @example
     * // Update many AttributeValues
     * const attributeValue = await prisma.attributeValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AttributeValues and only return the `id`
     * const attributeValueWithIdOnly = await prisma.attributeValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttributeValueUpdateManyAndReturnArgs>(args: SelectSubset<T, AttributeValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AttributeValue.
     * @param {AttributeValueUpsertArgs} args - Arguments to update or create a AttributeValue.
     * @example
     * // Update or create a AttributeValue
     * const attributeValue = await prisma.attributeValue.upsert({
     *   create: {
     *     // ... data to create a AttributeValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttributeValue we want to update
     *   }
     * })
     */
    upsert<T extends AttributeValueUpsertArgs>(args: SelectSubset<T, AttributeValueUpsertArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AttributeValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueCountArgs} args - Arguments to filter AttributeValues to count.
     * @example
     * // Count the number of AttributeValues
     * const count = await prisma.attributeValue.count({
     *   where: {
     *     // ... the filter for the AttributeValues we want to count
     *   }
     * })
    **/
    count<T extends AttributeValueCountArgs>(
      args?: Subset<T, AttributeValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttributeValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttributeValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttributeValueAggregateArgs>(args: Subset<T, AttributeValueAggregateArgs>): Prisma.PrismaPromise<GetAttributeValueAggregateType<T>>

    /**
     * Group by AttributeValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttributeValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttributeValueGroupByArgs['orderBy'] }
        : { orderBy?: AttributeValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttributeValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttributeValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttributeValue model
   */
  readonly fields: AttributeValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttributeValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttributeValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attribute<T extends AttributeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeDefaultArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    spuAttributes<T extends AttributeValue$spuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValue$spuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skuAttributes<T extends AttributeValue$skuAttributesArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValue$skuAttributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skuVariationValues<T extends AttributeValue$skuVariationValuesArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValue$skuVariationValuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttributeValue model
   */
  interface AttributeValueFieldRefs {
    readonly id: FieldRef<"AttributeValue", 'String'>
    readonly value: FieldRef<"AttributeValue", 'String'>
    readonly displayName: FieldRef<"AttributeValue", 'String'>
    readonly colorCode: FieldRef<"AttributeValue", 'String'>
    readonly imageUrl: FieldRef<"AttributeValue", 'String'>
    readonly sortOrder: FieldRef<"AttributeValue", 'Int'>
    readonly isActive: FieldRef<"AttributeValue", 'Boolean'>
    readonly createdAt: FieldRef<"AttributeValue", 'DateTime'>
    readonly updatedAt: FieldRef<"AttributeValue", 'DateTime'>
    readonly attributeId: FieldRef<"AttributeValue", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AttributeValue findUnique
   */
  export type AttributeValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter, which AttributeValue to fetch.
     */
    where: AttributeValueWhereUniqueInput
  }

  /**
   * AttributeValue findUniqueOrThrow
   */
  export type AttributeValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter, which AttributeValue to fetch.
     */
    where: AttributeValueWhereUniqueInput
  }

  /**
   * AttributeValue findFirst
   */
  export type AttributeValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter, which AttributeValue to fetch.
     */
    where?: AttributeValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttributeValues to fetch.
     */
    orderBy?: AttributeValueOrderByWithRelationInput | AttributeValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttributeValues.
     */
    cursor?: AttributeValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttributeValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttributeValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttributeValues.
     */
    distinct?: AttributeValueScalarFieldEnum | AttributeValueScalarFieldEnum[]
  }

  /**
   * AttributeValue findFirstOrThrow
   */
  export type AttributeValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter, which AttributeValue to fetch.
     */
    where?: AttributeValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttributeValues to fetch.
     */
    orderBy?: AttributeValueOrderByWithRelationInput | AttributeValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttributeValues.
     */
    cursor?: AttributeValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttributeValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttributeValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttributeValues.
     */
    distinct?: AttributeValueScalarFieldEnum | AttributeValueScalarFieldEnum[]
  }

  /**
   * AttributeValue findMany
   */
  export type AttributeValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter, which AttributeValues to fetch.
     */
    where?: AttributeValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttributeValues to fetch.
     */
    orderBy?: AttributeValueOrderByWithRelationInput | AttributeValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttributeValues.
     */
    cursor?: AttributeValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttributeValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttributeValues.
     */
    skip?: number
    distinct?: AttributeValueScalarFieldEnum | AttributeValueScalarFieldEnum[]
  }

  /**
   * AttributeValue create
   */
  export type AttributeValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * The data needed to create a AttributeValue.
     */
    data: XOR<AttributeValueCreateInput, AttributeValueUncheckedCreateInput>
  }

  /**
   * AttributeValue createMany
   */
  export type AttributeValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttributeValues.
     */
    data: AttributeValueCreateManyInput | AttributeValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttributeValue createManyAndReturn
   */
  export type AttributeValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * The data used to create many AttributeValues.
     */
    data: AttributeValueCreateManyInput | AttributeValueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttributeValue update
   */
  export type AttributeValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * The data needed to update a AttributeValue.
     */
    data: XOR<AttributeValueUpdateInput, AttributeValueUncheckedUpdateInput>
    /**
     * Choose, which AttributeValue to update.
     */
    where: AttributeValueWhereUniqueInput
  }

  /**
   * AttributeValue updateMany
   */
  export type AttributeValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttributeValues.
     */
    data: XOR<AttributeValueUpdateManyMutationInput, AttributeValueUncheckedUpdateManyInput>
    /**
     * Filter which AttributeValues to update
     */
    where?: AttributeValueWhereInput
    /**
     * Limit how many AttributeValues to update.
     */
    limit?: number
  }

  /**
   * AttributeValue updateManyAndReturn
   */
  export type AttributeValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * The data used to update AttributeValues.
     */
    data: XOR<AttributeValueUpdateManyMutationInput, AttributeValueUncheckedUpdateManyInput>
    /**
     * Filter which AttributeValues to update
     */
    where?: AttributeValueWhereInput
    /**
     * Limit how many AttributeValues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttributeValue upsert
   */
  export type AttributeValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * The filter to search for the AttributeValue to update in case it exists.
     */
    where: AttributeValueWhereUniqueInput
    /**
     * In case the AttributeValue found by the `where` argument doesn't exist, create a new AttributeValue with this data.
     */
    create: XOR<AttributeValueCreateInput, AttributeValueUncheckedCreateInput>
    /**
     * In case the AttributeValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttributeValueUpdateInput, AttributeValueUncheckedUpdateInput>
  }

  /**
   * AttributeValue delete
   */
  export type AttributeValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
    /**
     * Filter which AttributeValue to delete.
     */
    where: AttributeValueWhereUniqueInput
  }

  /**
   * AttributeValue deleteMany
   */
  export type AttributeValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttributeValues to delete
     */
    where?: AttributeValueWhereInput
    /**
     * Limit how many AttributeValues to delete.
     */
    limit?: number
  }

  /**
   * AttributeValue.spuAttributes
   */
  export type AttributeValue$spuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    where?: SpuAttributeWhereInput
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    cursor?: SpuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * AttributeValue.skuAttributes
   */
  export type AttributeValue$skuAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    where?: SkuAttributeWhereInput
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    cursor?: SkuAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * AttributeValue.skuVariationValues
   */
  export type AttributeValue$skuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    where?: SkuVariationValueWhereInput
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    cursor?: SkuVariationValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * AttributeValue without action
   */
  export type AttributeValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeValue
     */
    select?: AttributeValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttributeValue
     */
    omit?: AttributeValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeValueInclude<ExtArgs> | null
  }


  /**
   * Model SpuAttribute
   */

  export type AggregateSpuAttribute = {
    _count: SpuAttributeCountAggregateOutputType | null
    _min: SpuAttributeMinAggregateOutputType | null
    _max: SpuAttributeMaxAggregateOutputType | null
  }

  export type SpuAttributeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    spuId: string | null
    attributeId: string | null
    attributeValueId: string | null
  }

  export type SpuAttributeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    spuId: string | null
    attributeId: string | null
    attributeValueId: string | null
  }

  export type SpuAttributeCountAggregateOutputType = {
    id: number
    createdAt: number
    spuId: number
    attributeId: number
    attributeValueId: number
    _all: number
  }


  export type SpuAttributeMinAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
    attributeValueId?: true
  }

  export type SpuAttributeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
    attributeValueId?: true
  }

  export type SpuAttributeCountAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
    attributeValueId?: true
    _all?: true
  }

  export type SpuAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuAttribute to aggregate.
     */
    where?: SpuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuAttributes to fetch.
     */
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpuAttributes
    **/
    _count?: true | SpuAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpuAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpuAttributeMaxAggregateInputType
  }

  export type GetSpuAttributeAggregateType<T extends SpuAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateSpuAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpuAttribute[P]>
      : GetScalarType<T[P], AggregateSpuAttribute[P]>
  }




  export type SpuAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuAttributeWhereInput
    orderBy?: SpuAttributeOrderByWithAggregationInput | SpuAttributeOrderByWithAggregationInput[]
    by: SpuAttributeScalarFieldEnum[] | SpuAttributeScalarFieldEnum
    having?: SpuAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpuAttributeCountAggregateInputType | true
    _min?: SpuAttributeMinAggregateInputType
    _max?: SpuAttributeMaxAggregateInputType
  }

  export type SpuAttributeGroupByOutputType = {
    id: string
    createdAt: Date
    spuId: string
    attributeId: string
    attributeValueId: string
    _count: SpuAttributeCountAggregateOutputType | null
    _min: SpuAttributeMinAggregateOutputType | null
    _max: SpuAttributeMaxAggregateOutputType | null
  }

  type GetSpuAttributeGroupByPayload<T extends SpuAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpuAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpuAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpuAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], SpuAttributeGroupByOutputType[P]>
        }
      >
    >


  export type SpuAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuAttribute"]>

  export type SpuAttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuAttribute"]>

  export type SpuAttributeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuAttribute"]>

  export type SpuAttributeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
  }

  export type SpuAttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "spuId" | "attributeId" | "attributeValueId", ExtArgs["result"]["spuAttribute"]>
  export type SpuAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SpuAttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SpuAttributeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }

  export type $SpuAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpuAttribute"
    objects: {
      spu: Prisma.$SpuPayload<ExtArgs>
      attribute: Prisma.$AttributePayload<ExtArgs>
      attributeValue: Prisma.$AttributeValuePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      spuId: string
      attributeId: string
      attributeValueId: string
    }, ExtArgs["result"]["spuAttribute"]>
    composites: {}
  }

  type SpuAttributeGetPayload<S extends boolean | null | undefined | SpuAttributeDefaultArgs> = $Result.GetResult<Prisma.$SpuAttributePayload, S>

  type SpuAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpuAttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpuAttributeCountAggregateInputType | true
    }

  export interface SpuAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpuAttribute'], meta: { name: 'SpuAttribute' } }
    /**
     * Find zero or one SpuAttribute that matches the filter.
     * @param {SpuAttributeFindUniqueArgs} args - Arguments to find a SpuAttribute
     * @example
     * // Get one SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpuAttributeFindUniqueArgs>(args: SelectSubset<T, SpuAttributeFindUniqueArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpuAttribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpuAttributeFindUniqueOrThrowArgs} args - Arguments to find a SpuAttribute
     * @example
     * // Get one SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpuAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, SpuAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeFindFirstArgs} args - Arguments to find a SpuAttribute
     * @example
     * // Get one SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpuAttributeFindFirstArgs>(args?: SelectSubset<T, SpuAttributeFindFirstArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeFindFirstOrThrowArgs} args - Arguments to find a SpuAttribute
     * @example
     * // Get one SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpuAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, SpuAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpuAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpuAttributes
     * const spuAttributes = await prisma.spuAttribute.findMany()
     * 
     * // Get first 10 SpuAttributes
     * const spuAttributes = await prisma.spuAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spuAttributeWithIdOnly = await prisma.spuAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpuAttributeFindManyArgs>(args?: SelectSubset<T, SpuAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpuAttribute.
     * @param {SpuAttributeCreateArgs} args - Arguments to create a SpuAttribute.
     * @example
     * // Create one SpuAttribute
     * const SpuAttribute = await prisma.spuAttribute.create({
     *   data: {
     *     // ... data to create a SpuAttribute
     *   }
     * })
     * 
     */
    create<T extends SpuAttributeCreateArgs>(args: SelectSubset<T, SpuAttributeCreateArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpuAttributes.
     * @param {SpuAttributeCreateManyArgs} args - Arguments to create many SpuAttributes.
     * @example
     * // Create many SpuAttributes
     * const spuAttribute = await prisma.spuAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpuAttributeCreateManyArgs>(args?: SelectSubset<T, SpuAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpuAttributes and returns the data saved in the database.
     * @param {SpuAttributeCreateManyAndReturnArgs} args - Arguments to create many SpuAttributes.
     * @example
     * // Create many SpuAttributes
     * const spuAttribute = await prisma.spuAttribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpuAttributes and only return the `id`
     * const spuAttributeWithIdOnly = await prisma.spuAttribute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpuAttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, SpuAttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpuAttribute.
     * @param {SpuAttributeDeleteArgs} args - Arguments to delete one SpuAttribute.
     * @example
     * // Delete one SpuAttribute
     * const SpuAttribute = await prisma.spuAttribute.delete({
     *   where: {
     *     // ... filter to delete one SpuAttribute
     *   }
     * })
     * 
     */
    delete<T extends SpuAttributeDeleteArgs>(args: SelectSubset<T, SpuAttributeDeleteArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpuAttribute.
     * @param {SpuAttributeUpdateArgs} args - Arguments to update one SpuAttribute.
     * @example
     * // Update one SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpuAttributeUpdateArgs>(args: SelectSubset<T, SpuAttributeUpdateArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpuAttributes.
     * @param {SpuAttributeDeleteManyArgs} args - Arguments to filter SpuAttributes to delete.
     * @example
     * // Delete a few SpuAttributes
     * const { count } = await prisma.spuAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpuAttributeDeleteManyArgs>(args?: SelectSubset<T, SpuAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpuAttributes
     * const spuAttribute = await prisma.spuAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpuAttributeUpdateManyArgs>(args: SelectSubset<T, SpuAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuAttributes and returns the data updated in the database.
     * @param {SpuAttributeUpdateManyAndReturnArgs} args - Arguments to update many SpuAttributes.
     * @example
     * // Update many SpuAttributes
     * const spuAttribute = await prisma.spuAttribute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpuAttributes and only return the `id`
     * const spuAttributeWithIdOnly = await prisma.spuAttribute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpuAttributeUpdateManyAndReturnArgs>(args: SelectSubset<T, SpuAttributeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpuAttribute.
     * @param {SpuAttributeUpsertArgs} args - Arguments to update or create a SpuAttribute.
     * @example
     * // Update or create a SpuAttribute
     * const spuAttribute = await prisma.spuAttribute.upsert({
     *   create: {
     *     // ... data to create a SpuAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpuAttribute we want to update
     *   }
     * })
     */
    upsert<T extends SpuAttributeUpsertArgs>(args: SelectSubset<T, SpuAttributeUpsertArgs<ExtArgs>>): Prisma__SpuAttributeClient<$Result.GetResult<Prisma.$SpuAttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpuAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeCountArgs} args - Arguments to filter SpuAttributes to count.
     * @example
     * // Count the number of SpuAttributes
     * const count = await prisma.spuAttribute.count({
     *   where: {
     *     // ... the filter for the SpuAttributes we want to count
     *   }
     * })
    **/
    count<T extends SpuAttributeCountArgs>(
      args?: Subset<T, SpuAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpuAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpuAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpuAttributeAggregateArgs>(args: Subset<T, SpuAttributeAggregateArgs>): Prisma.PrismaPromise<GetSpuAttributeAggregateType<T>>

    /**
     * Group by SpuAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpuAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpuAttributeGroupByArgs['orderBy'] }
        : { orderBy?: SpuAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpuAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpuAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpuAttribute model
   */
  readonly fields: SpuAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpuAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpuAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spu<T extends SpuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuDefaultArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attribute<T extends AttributeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeDefaultArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attributeValue<T extends AttributeValueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValueDefaultArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpuAttribute model
   */
  interface SpuAttributeFieldRefs {
    readonly id: FieldRef<"SpuAttribute", 'String'>
    readonly createdAt: FieldRef<"SpuAttribute", 'DateTime'>
    readonly spuId: FieldRef<"SpuAttribute", 'String'>
    readonly attributeId: FieldRef<"SpuAttribute", 'String'>
    readonly attributeValueId: FieldRef<"SpuAttribute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpuAttribute findUnique
   */
  export type SpuAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SpuAttribute to fetch.
     */
    where: SpuAttributeWhereUniqueInput
  }

  /**
   * SpuAttribute findUniqueOrThrow
   */
  export type SpuAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SpuAttribute to fetch.
     */
    where: SpuAttributeWhereUniqueInput
  }

  /**
   * SpuAttribute findFirst
   */
  export type SpuAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SpuAttribute to fetch.
     */
    where?: SpuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuAttributes to fetch.
     */
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuAttributes.
     */
    cursor?: SpuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuAttributes.
     */
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * SpuAttribute findFirstOrThrow
   */
  export type SpuAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SpuAttribute to fetch.
     */
    where?: SpuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuAttributes to fetch.
     */
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuAttributes.
     */
    cursor?: SpuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuAttributes.
     */
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * SpuAttribute findMany
   */
  export type SpuAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SpuAttributes to fetch.
     */
    where?: SpuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuAttributes to fetch.
     */
    orderBy?: SpuAttributeOrderByWithRelationInput | SpuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpuAttributes.
     */
    cursor?: SpuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuAttributes.
     */
    skip?: number
    distinct?: SpuAttributeScalarFieldEnum | SpuAttributeScalarFieldEnum[]
  }

  /**
   * SpuAttribute create
   */
  export type SpuAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a SpuAttribute.
     */
    data: XOR<SpuAttributeCreateInput, SpuAttributeUncheckedCreateInput>
  }

  /**
   * SpuAttribute createMany
   */
  export type SpuAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpuAttributes.
     */
    data: SpuAttributeCreateManyInput | SpuAttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpuAttribute createManyAndReturn
   */
  export type SpuAttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * The data used to create many SpuAttributes.
     */
    data: SpuAttributeCreateManyInput | SpuAttributeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuAttribute update
   */
  export type SpuAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a SpuAttribute.
     */
    data: XOR<SpuAttributeUpdateInput, SpuAttributeUncheckedUpdateInput>
    /**
     * Choose, which SpuAttribute to update.
     */
    where: SpuAttributeWhereUniqueInput
  }

  /**
   * SpuAttribute updateMany
   */
  export type SpuAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpuAttributes.
     */
    data: XOR<SpuAttributeUpdateManyMutationInput, SpuAttributeUncheckedUpdateManyInput>
    /**
     * Filter which SpuAttributes to update
     */
    where?: SpuAttributeWhereInput
    /**
     * Limit how many SpuAttributes to update.
     */
    limit?: number
  }

  /**
   * SpuAttribute updateManyAndReturn
   */
  export type SpuAttributeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * The data used to update SpuAttributes.
     */
    data: XOR<SpuAttributeUpdateManyMutationInput, SpuAttributeUncheckedUpdateManyInput>
    /**
     * Filter which SpuAttributes to update
     */
    where?: SpuAttributeWhereInput
    /**
     * Limit how many SpuAttributes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuAttribute upsert
   */
  export type SpuAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the SpuAttribute to update in case it exists.
     */
    where: SpuAttributeWhereUniqueInput
    /**
     * In case the SpuAttribute found by the `where` argument doesn't exist, create a new SpuAttribute with this data.
     */
    create: XOR<SpuAttributeCreateInput, SpuAttributeUncheckedCreateInput>
    /**
     * In case the SpuAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpuAttributeUpdateInput, SpuAttributeUncheckedUpdateInput>
  }

  /**
   * SpuAttribute delete
   */
  export type SpuAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
    /**
     * Filter which SpuAttribute to delete.
     */
    where: SpuAttributeWhereUniqueInput
  }

  /**
   * SpuAttribute deleteMany
   */
  export type SpuAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuAttributes to delete
     */
    where?: SpuAttributeWhereInput
    /**
     * Limit how many SpuAttributes to delete.
     */
    limit?: number
  }

  /**
   * SpuAttribute without action
   */
  export type SpuAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuAttribute
     */
    select?: SpuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuAttribute
     */
    omit?: SpuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuAttributeInclude<ExtArgs> | null
  }


  /**
   * Model SkuAttribute
   */

  export type AggregateSkuAttribute = {
    _count: SkuAttributeCountAggregateOutputType | null
    _min: SkuAttributeMinAggregateOutputType | null
    _max: SkuAttributeMaxAggregateOutputType | null
  }

  export type SkuAttributeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    skuId: string | null
    attributeId: string | null
    attributeValueId: string | null
  }

  export type SkuAttributeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    skuId: string | null
    attributeId: string | null
    attributeValueId: string | null
  }

  export type SkuAttributeCountAggregateOutputType = {
    id: number
    createdAt: number
    skuId: number
    attributeId: number
    attributeValueId: number
    _all: number
  }


  export type SkuAttributeMinAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    attributeId?: true
    attributeValueId?: true
  }

  export type SkuAttributeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    attributeId?: true
    attributeValueId?: true
  }

  export type SkuAttributeCountAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    attributeId?: true
    attributeValueId?: true
    _all?: true
  }

  export type SkuAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuAttribute to aggregate.
     */
    where?: SkuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuAttributes to fetch.
     */
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuAttributes
    **/
    _count?: true | SkuAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuAttributeMaxAggregateInputType
  }

  export type GetSkuAttributeAggregateType<T extends SkuAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuAttribute[P]>
      : GetScalarType<T[P], AggregateSkuAttribute[P]>
  }




  export type SkuAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuAttributeWhereInput
    orderBy?: SkuAttributeOrderByWithAggregationInput | SkuAttributeOrderByWithAggregationInput[]
    by: SkuAttributeScalarFieldEnum[] | SkuAttributeScalarFieldEnum
    having?: SkuAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuAttributeCountAggregateInputType | true
    _min?: SkuAttributeMinAggregateInputType
    _max?: SkuAttributeMaxAggregateInputType
  }

  export type SkuAttributeGroupByOutputType = {
    id: string
    createdAt: Date
    skuId: string
    attributeId: string
    attributeValueId: string
    _count: SkuAttributeCountAggregateOutputType | null
    _min: SkuAttributeMinAggregateOutputType | null
    _max: SkuAttributeMaxAggregateOutputType | null
  }

  type GetSkuAttributeGroupByPayload<T extends SkuAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], SkuAttributeGroupByOutputType[P]>
        }
      >
    >


  export type SkuAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuAttribute"]>

  export type SkuAttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuAttribute"]>

  export type SkuAttributeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuAttribute"]>

  export type SkuAttributeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    attributeId?: boolean
    attributeValueId?: boolean
  }

  export type SkuAttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "skuId" | "attributeId" | "attributeValueId", ExtArgs["result"]["skuAttribute"]>
  export type SkuAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SkuAttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SkuAttributeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }

  export type $SkuAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuAttribute"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
      attribute: Prisma.$AttributePayload<ExtArgs>
      attributeValue: Prisma.$AttributeValuePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      skuId: string
      attributeId: string
      attributeValueId: string
    }, ExtArgs["result"]["skuAttribute"]>
    composites: {}
  }

  type SkuAttributeGetPayload<S extends boolean | null | undefined | SkuAttributeDefaultArgs> = $Result.GetResult<Prisma.$SkuAttributePayload, S>

  type SkuAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuAttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuAttributeCountAggregateInputType | true
    }

  export interface SkuAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuAttribute'], meta: { name: 'SkuAttribute' } }
    /**
     * Find zero or one SkuAttribute that matches the filter.
     * @param {SkuAttributeFindUniqueArgs} args - Arguments to find a SkuAttribute
     * @example
     * // Get one SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuAttributeFindUniqueArgs>(args: SelectSubset<T, SkuAttributeFindUniqueArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuAttribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuAttributeFindUniqueOrThrowArgs} args - Arguments to find a SkuAttribute
     * @example
     * // Get one SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeFindFirstArgs} args - Arguments to find a SkuAttribute
     * @example
     * // Get one SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuAttributeFindFirstArgs>(args?: SelectSubset<T, SkuAttributeFindFirstArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeFindFirstOrThrowArgs} args - Arguments to find a SkuAttribute
     * @example
     * // Get one SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuAttributes
     * const skuAttributes = await prisma.skuAttribute.findMany()
     * 
     * // Get first 10 SkuAttributes
     * const skuAttributes = await prisma.skuAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuAttributeWithIdOnly = await prisma.skuAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuAttributeFindManyArgs>(args?: SelectSubset<T, SkuAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuAttribute.
     * @param {SkuAttributeCreateArgs} args - Arguments to create a SkuAttribute.
     * @example
     * // Create one SkuAttribute
     * const SkuAttribute = await prisma.skuAttribute.create({
     *   data: {
     *     // ... data to create a SkuAttribute
     *   }
     * })
     * 
     */
    create<T extends SkuAttributeCreateArgs>(args: SelectSubset<T, SkuAttributeCreateArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuAttributes.
     * @param {SkuAttributeCreateManyArgs} args - Arguments to create many SkuAttributes.
     * @example
     * // Create many SkuAttributes
     * const skuAttribute = await prisma.skuAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuAttributeCreateManyArgs>(args?: SelectSubset<T, SkuAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuAttributes and returns the data saved in the database.
     * @param {SkuAttributeCreateManyAndReturnArgs} args - Arguments to create many SkuAttributes.
     * @example
     * // Create many SkuAttributes
     * const skuAttribute = await prisma.skuAttribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuAttributes and only return the `id`
     * const skuAttributeWithIdOnly = await prisma.skuAttribute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuAttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuAttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuAttribute.
     * @param {SkuAttributeDeleteArgs} args - Arguments to delete one SkuAttribute.
     * @example
     * // Delete one SkuAttribute
     * const SkuAttribute = await prisma.skuAttribute.delete({
     *   where: {
     *     // ... filter to delete one SkuAttribute
     *   }
     * })
     * 
     */
    delete<T extends SkuAttributeDeleteArgs>(args: SelectSubset<T, SkuAttributeDeleteArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuAttribute.
     * @param {SkuAttributeUpdateArgs} args - Arguments to update one SkuAttribute.
     * @example
     * // Update one SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuAttributeUpdateArgs>(args: SelectSubset<T, SkuAttributeUpdateArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuAttributes.
     * @param {SkuAttributeDeleteManyArgs} args - Arguments to filter SkuAttributes to delete.
     * @example
     * // Delete a few SkuAttributes
     * const { count } = await prisma.skuAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuAttributeDeleteManyArgs>(args?: SelectSubset<T, SkuAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuAttributes
     * const skuAttribute = await prisma.skuAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuAttributeUpdateManyArgs>(args: SelectSubset<T, SkuAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuAttributes and returns the data updated in the database.
     * @param {SkuAttributeUpdateManyAndReturnArgs} args - Arguments to update many SkuAttributes.
     * @example
     * // Update many SkuAttributes
     * const skuAttribute = await prisma.skuAttribute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuAttributes and only return the `id`
     * const skuAttributeWithIdOnly = await prisma.skuAttribute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuAttributeUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuAttributeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuAttribute.
     * @param {SkuAttributeUpsertArgs} args - Arguments to update or create a SkuAttribute.
     * @example
     * // Update or create a SkuAttribute
     * const skuAttribute = await prisma.skuAttribute.upsert({
     *   create: {
     *     // ... data to create a SkuAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuAttribute we want to update
     *   }
     * })
     */
    upsert<T extends SkuAttributeUpsertArgs>(args: SelectSubset<T, SkuAttributeUpsertArgs<ExtArgs>>): Prisma__SkuAttributeClient<$Result.GetResult<Prisma.$SkuAttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeCountArgs} args - Arguments to filter SkuAttributes to count.
     * @example
     * // Count the number of SkuAttributes
     * const count = await prisma.skuAttribute.count({
     *   where: {
     *     // ... the filter for the SkuAttributes we want to count
     *   }
     * })
    **/
    count<T extends SkuAttributeCountArgs>(
      args?: Subset<T, SkuAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuAttributeAggregateArgs>(args: Subset<T, SkuAttributeAggregateArgs>): Prisma.PrismaPromise<GetSkuAttributeAggregateType<T>>

    /**
     * Group by SkuAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuAttributeGroupByArgs['orderBy'] }
        : { orderBy?: SkuAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuAttribute model
   */
  readonly fields: SkuAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attribute<T extends AttributeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeDefaultArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attributeValue<T extends AttributeValueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValueDefaultArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuAttribute model
   */
  interface SkuAttributeFieldRefs {
    readonly id: FieldRef<"SkuAttribute", 'String'>
    readonly createdAt: FieldRef<"SkuAttribute", 'DateTime'>
    readonly skuId: FieldRef<"SkuAttribute", 'String'>
    readonly attributeId: FieldRef<"SkuAttribute", 'String'>
    readonly attributeValueId: FieldRef<"SkuAttribute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SkuAttribute findUnique
   */
  export type SkuAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SkuAttribute to fetch.
     */
    where: SkuAttributeWhereUniqueInput
  }

  /**
   * SkuAttribute findUniqueOrThrow
   */
  export type SkuAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SkuAttribute to fetch.
     */
    where: SkuAttributeWhereUniqueInput
  }

  /**
   * SkuAttribute findFirst
   */
  export type SkuAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SkuAttribute to fetch.
     */
    where?: SkuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuAttributes to fetch.
     */
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuAttributes.
     */
    cursor?: SkuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuAttributes.
     */
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * SkuAttribute findFirstOrThrow
   */
  export type SkuAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SkuAttribute to fetch.
     */
    where?: SkuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuAttributes to fetch.
     */
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuAttributes.
     */
    cursor?: SkuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuAttributes.
     */
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * SkuAttribute findMany
   */
  export type SkuAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter, which SkuAttributes to fetch.
     */
    where?: SkuAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuAttributes to fetch.
     */
    orderBy?: SkuAttributeOrderByWithRelationInput | SkuAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuAttributes.
     */
    cursor?: SkuAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuAttributes.
     */
    skip?: number
    distinct?: SkuAttributeScalarFieldEnum | SkuAttributeScalarFieldEnum[]
  }

  /**
   * SkuAttribute create
   */
  export type SkuAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuAttribute.
     */
    data: XOR<SkuAttributeCreateInput, SkuAttributeUncheckedCreateInput>
  }

  /**
   * SkuAttribute createMany
   */
  export type SkuAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuAttributes.
     */
    data: SkuAttributeCreateManyInput | SkuAttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuAttribute createManyAndReturn
   */
  export type SkuAttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * The data used to create many SkuAttributes.
     */
    data: SkuAttributeCreateManyInput | SkuAttributeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuAttribute update
   */
  export type SkuAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuAttribute.
     */
    data: XOR<SkuAttributeUpdateInput, SkuAttributeUncheckedUpdateInput>
    /**
     * Choose, which SkuAttribute to update.
     */
    where: SkuAttributeWhereUniqueInput
  }

  /**
   * SkuAttribute updateMany
   */
  export type SkuAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuAttributes.
     */
    data: XOR<SkuAttributeUpdateManyMutationInput, SkuAttributeUncheckedUpdateManyInput>
    /**
     * Filter which SkuAttributes to update
     */
    where?: SkuAttributeWhereInput
    /**
     * Limit how many SkuAttributes to update.
     */
    limit?: number
  }

  /**
   * SkuAttribute updateManyAndReturn
   */
  export type SkuAttributeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * The data used to update SkuAttributes.
     */
    data: XOR<SkuAttributeUpdateManyMutationInput, SkuAttributeUncheckedUpdateManyInput>
    /**
     * Filter which SkuAttributes to update
     */
    where?: SkuAttributeWhereInput
    /**
     * Limit how many SkuAttributes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuAttribute upsert
   */
  export type SkuAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuAttribute to update in case it exists.
     */
    where: SkuAttributeWhereUniqueInput
    /**
     * In case the SkuAttribute found by the `where` argument doesn't exist, create a new SkuAttribute with this data.
     */
    create: XOR<SkuAttributeCreateInput, SkuAttributeUncheckedCreateInput>
    /**
     * In case the SkuAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuAttributeUpdateInput, SkuAttributeUncheckedUpdateInput>
  }

  /**
   * SkuAttribute delete
   */
  export type SkuAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
    /**
     * Filter which SkuAttribute to delete.
     */
    where: SkuAttributeWhereUniqueInput
  }

  /**
   * SkuAttribute deleteMany
   */
  export type SkuAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuAttributes to delete
     */
    where?: SkuAttributeWhereInput
    /**
     * Limit how many SkuAttributes to delete.
     */
    limit?: number
  }

  /**
   * SkuAttribute without action
   */
  export type SkuAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuAttribute
     */
    select?: SkuAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuAttribute
     */
    omit?: SkuAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuAttributeInclude<ExtArgs> | null
  }


  /**
   * Model SpuVariation
   */

  export type AggregateSpuVariation = {
    _count: SpuVariationCountAggregateOutputType | null
    _avg: SpuVariationAvgAggregateOutputType | null
    _sum: SpuVariationSumAggregateOutputType | null
    _min: SpuVariationMinAggregateOutputType | null
    _max: SpuVariationMaxAggregateOutputType | null
  }

  export type SpuVariationAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type SpuVariationSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type SpuVariationMinAggregateOutputType = {
    id: string | null
    name: string | null
    sortOrder: number | null
    createdAt: Date | null
    spuId: string | null
    attributeId: string | null
  }

  export type SpuVariationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    sortOrder: number | null
    createdAt: Date | null
    spuId: string | null
    attributeId: string | null
  }

  export type SpuVariationCountAggregateOutputType = {
    id: number
    name: number
    sortOrder: number
    createdAt: number
    spuId: number
    attributeId: number
    _all: number
  }


  export type SpuVariationAvgAggregateInputType = {
    sortOrder?: true
  }

  export type SpuVariationSumAggregateInputType = {
    sortOrder?: true
  }

  export type SpuVariationMinAggregateInputType = {
    id?: true
    name?: true
    sortOrder?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
  }

  export type SpuVariationMaxAggregateInputType = {
    id?: true
    name?: true
    sortOrder?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
  }

  export type SpuVariationCountAggregateInputType = {
    id?: true
    name?: true
    sortOrder?: true
    createdAt?: true
    spuId?: true
    attributeId?: true
    _all?: true
  }

  export type SpuVariationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuVariation to aggregate.
     */
    where?: SpuVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuVariations to fetch.
     */
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpuVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpuVariations
    **/
    _count?: true | SpuVariationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpuVariationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpuVariationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpuVariationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpuVariationMaxAggregateInputType
  }

  export type GetSpuVariationAggregateType<T extends SpuVariationAggregateArgs> = {
        [P in keyof T & keyof AggregateSpuVariation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpuVariation[P]>
      : GetScalarType<T[P], AggregateSpuVariation[P]>
  }




  export type SpuVariationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuVariationWhereInput
    orderBy?: SpuVariationOrderByWithAggregationInput | SpuVariationOrderByWithAggregationInput[]
    by: SpuVariationScalarFieldEnum[] | SpuVariationScalarFieldEnum
    having?: SpuVariationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpuVariationCountAggregateInputType | true
    _avg?: SpuVariationAvgAggregateInputType
    _sum?: SpuVariationSumAggregateInputType
    _min?: SpuVariationMinAggregateInputType
    _max?: SpuVariationMaxAggregateInputType
  }

  export type SpuVariationGroupByOutputType = {
    id: string
    name: string
    sortOrder: number
    createdAt: Date
    spuId: string
    attributeId: string
    _count: SpuVariationCountAggregateOutputType | null
    _avg: SpuVariationAvgAggregateOutputType | null
    _sum: SpuVariationSumAggregateOutputType | null
    _min: SpuVariationMinAggregateOutputType | null
    _max: SpuVariationMaxAggregateOutputType | null
  }

  type GetSpuVariationGroupByPayload<T extends SpuVariationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpuVariationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpuVariationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpuVariationGroupByOutputType[P]>
            : GetScalarType<T[P], SpuVariationGroupByOutputType[P]>
        }
      >
    >


  export type SpuVariationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    skuVariationValues?: boolean | SpuVariation$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | SpuVariationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuVariation"]>

  export type SpuVariationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuVariation"]>

  export type SpuVariationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuVariation"]>

  export type SpuVariationSelectScalar = {
    id?: boolean
    name?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    spuId?: boolean
    attributeId?: boolean
  }

  export type SpuVariationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "sortOrder" | "createdAt" | "spuId" | "attributeId", ExtArgs["result"]["spuVariation"]>
  export type SpuVariationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
    skuVariationValues?: boolean | SpuVariation$skuVariationValuesArgs<ExtArgs>
    _count?: boolean | SpuVariationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpuVariationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }
  export type SpuVariationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }

  export type $SpuVariationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpuVariation"
    objects: {
      spu: Prisma.$SpuPayload<ExtArgs>
      attribute: Prisma.$AttributePayload<ExtArgs>
      skuVariationValues: Prisma.$SkuVariationValuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      sortOrder: number
      createdAt: Date
      spuId: string
      attributeId: string
    }, ExtArgs["result"]["spuVariation"]>
    composites: {}
  }

  type SpuVariationGetPayload<S extends boolean | null | undefined | SpuVariationDefaultArgs> = $Result.GetResult<Prisma.$SpuVariationPayload, S>

  type SpuVariationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpuVariationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpuVariationCountAggregateInputType | true
    }

  export interface SpuVariationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpuVariation'], meta: { name: 'SpuVariation' } }
    /**
     * Find zero or one SpuVariation that matches the filter.
     * @param {SpuVariationFindUniqueArgs} args - Arguments to find a SpuVariation
     * @example
     * // Get one SpuVariation
     * const spuVariation = await prisma.spuVariation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpuVariationFindUniqueArgs>(args: SelectSubset<T, SpuVariationFindUniqueArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpuVariation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpuVariationFindUniqueOrThrowArgs} args - Arguments to find a SpuVariation
     * @example
     * // Get one SpuVariation
     * const spuVariation = await prisma.spuVariation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpuVariationFindUniqueOrThrowArgs>(args: SelectSubset<T, SpuVariationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuVariation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationFindFirstArgs} args - Arguments to find a SpuVariation
     * @example
     * // Get one SpuVariation
     * const spuVariation = await prisma.spuVariation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpuVariationFindFirstArgs>(args?: SelectSubset<T, SpuVariationFindFirstArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuVariation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationFindFirstOrThrowArgs} args - Arguments to find a SpuVariation
     * @example
     * // Get one SpuVariation
     * const spuVariation = await prisma.spuVariation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpuVariationFindFirstOrThrowArgs>(args?: SelectSubset<T, SpuVariationFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpuVariations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpuVariations
     * const spuVariations = await prisma.spuVariation.findMany()
     * 
     * // Get first 10 SpuVariations
     * const spuVariations = await prisma.spuVariation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spuVariationWithIdOnly = await prisma.spuVariation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpuVariationFindManyArgs>(args?: SelectSubset<T, SpuVariationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpuVariation.
     * @param {SpuVariationCreateArgs} args - Arguments to create a SpuVariation.
     * @example
     * // Create one SpuVariation
     * const SpuVariation = await prisma.spuVariation.create({
     *   data: {
     *     // ... data to create a SpuVariation
     *   }
     * })
     * 
     */
    create<T extends SpuVariationCreateArgs>(args: SelectSubset<T, SpuVariationCreateArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpuVariations.
     * @param {SpuVariationCreateManyArgs} args - Arguments to create many SpuVariations.
     * @example
     * // Create many SpuVariations
     * const spuVariation = await prisma.spuVariation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpuVariationCreateManyArgs>(args?: SelectSubset<T, SpuVariationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpuVariations and returns the data saved in the database.
     * @param {SpuVariationCreateManyAndReturnArgs} args - Arguments to create many SpuVariations.
     * @example
     * // Create many SpuVariations
     * const spuVariation = await prisma.spuVariation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpuVariations and only return the `id`
     * const spuVariationWithIdOnly = await prisma.spuVariation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpuVariationCreateManyAndReturnArgs>(args?: SelectSubset<T, SpuVariationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpuVariation.
     * @param {SpuVariationDeleteArgs} args - Arguments to delete one SpuVariation.
     * @example
     * // Delete one SpuVariation
     * const SpuVariation = await prisma.spuVariation.delete({
     *   where: {
     *     // ... filter to delete one SpuVariation
     *   }
     * })
     * 
     */
    delete<T extends SpuVariationDeleteArgs>(args: SelectSubset<T, SpuVariationDeleteArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpuVariation.
     * @param {SpuVariationUpdateArgs} args - Arguments to update one SpuVariation.
     * @example
     * // Update one SpuVariation
     * const spuVariation = await prisma.spuVariation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpuVariationUpdateArgs>(args: SelectSubset<T, SpuVariationUpdateArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpuVariations.
     * @param {SpuVariationDeleteManyArgs} args - Arguments to filter SpuVariations to delete.
     * @example
     * // Delete a few SpuVariations
     * const { count } = await prisma.spuVariation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpuVariationDeleteManyArgs>(args?: SelectSubset<T, SpuVariationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuVariations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpuVariations
     * const spuVariation = await prisma.spuVariation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpuVariationUpdateManyArgs>(args: SelectSubset<T, SpuVariationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuVariations and returns the data updated in the database.
     * @param {SpuVariationUpdateManyAndReturnArgs} args - Arguments to update many SpuVariations.
     * @example
     * // Update many SpuVariations
     * const spuVariation = await prisma.spuVariation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpuVariations and only return the `id`
     * const spuVariationWithIdOnly = await prisma.spuVariation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpuVariationUpdateManyAndReturnArgs>(args: SelectSubset<T, SpuVariationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpuVariation.
     * @param {SpuVariationUpsertArgs} args - Arguments to update or create a SpuVariation.
     * @example
     * // Update or create a SpuVariation
     * const spuVariation = await prisma.spuVariation.upsert({
     *   create: {
     *     // ... data to create a SpuVariation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpuVariation we want to update
     *   }
     * })
     */
    upsert<T extends SpuVariationUpsertArgs>(args: SelectSubset<T, SpuVariationUpsertArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpuVariations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationCountArgs} args - Arguments to filter SpuVariations to count.
     * @example
     * // Count the number of SpuVariations
     * const count = await prisma.spuVariation.count({
     *   where: {
     *     // ... the filter for the SpuVariations we want to count
     *   }
     * })
    **/
    count<T extends SpuVariationCountArgs>(
      args?: Subset<T, SpuVariationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpuVariationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpuVariation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpuVariationAggregateArgs>(args: Subset<T, SpuVariationAggregateArgs>): Prisma.PrismaPromise<GetSpuVariationAggregateType<T>>

    /**
     * Group by SpuVariation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuVariationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpuVariationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpuVariationGroupByArgs['orderBy'] }
        : { orderBy?: SpuVariationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpuVariationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpuVariationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpuVariation model
   */
  readonly fields: SpuVariationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpuVariation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpuVariationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spu<T extends SpuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuDefaultArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attribute<T extends AttributeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeDefaultArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skuVariationValues<T extends SpuVariation$skuVariationValuesArgs<ExtArgs> = {}>(args?: Subset<T, SpuVariation$skuVariationValuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpuVariation model
   */
  interface SpuVariationFieldRefs {
    readonly id: FieldRef<"SpuVariation", 'String'>
    readonly name: FieldRef<"SpuVariation", 'String'>
    readonly sortOrder: FieldRef<"SpuVariation", 'Int'>
    readonly createdAt: FieldRef<"SpuVariation", 'DateTime'>
    readonly spuId: FieldRef<"SpuVariation", 'String'>
    readonly attributeId: FieldRef<"SpuVariation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpuVariation findUnique
   */
  export type SpuVariationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter, which SpuVariation to fetch.
     */
    where: SpuVariationWhereUniqueInput
  }

  /**
   * SpuVariation findUniqueOrThrow
   */
  export type SpuVariationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter, which SpuVariation to fetch.
     */
    where: SpuVariationWhereUniqueInput
  }

  /**
   * SpuVariation findFirst
   */
  export type SpuVariationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter, which SpuVariation to fetch.
     */
    where?: SpuVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuVariations to fetch.
     */
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuVariations.
     */
    cursor?: SpuVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuVariations.
     */
    distinct?: SpuVariationScalarFieldEnum | SpuVariationScalarFieldEnum[]
  }

  /**
   * SpuVariation findFirstOrThrow
   */
  export type SpuVariationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter, which SpuVariation to fetch.
     */
    where?: SpuVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuVariations to fetch.
     */
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuVariations.
     */
    cursor?: SpuVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuVariations.
     */
    distinct?: SpuVariationScalarFieldEnum | SpuVariationScalarFieldEnum[]
  }

  /**
   * SpuVariation findMany
   */
  export type SpuVariationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter, which SpuVariations to fetch.
     */
    where?: SpuVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuVariations to fetch.
     */
    orderBy?: SpuVariationOrderByWithRelationInput | SpuVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpuVariations.
     */
    cursor?: SpuVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuVariations.
     */
    skip?: number
    distinct?: SpuVariationScalarFieldEnum | SpuVariationScalarFieldEnum[]
  }

  /**
   * SpuVariation create
   */
  export type SpuVariationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * The data needed to create a SpuVariation.
     */
    data: XOR<SpuVariationCreateInput, SpuVariationUncheckedCreateInput>
  }

  /**
   * SpuVariation createMany
   */
  export type SpuVariationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpuVariations.
     */
    data: SpuVariationCreateManyInput | SpuVariationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpuVariation createManyAndReturn
   */
  export type SpuVariationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * The data used to create many SpuVariations.
     */
    data: SpuVariationCreateManyInput | SpuVariationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuVariation update
   */
  export type SpuVariationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * The data needed to update a SpuVariation.
     */
    data: XOR<SpuVariationUpdateInput, SpuVariationUncheckedUpdateInput>
    /**
     * Choose, which SpuVariation to update.
     */
    where: SpuVariationWhereUniqueInput
  }

  /**
   * SpuVariation updateMany
   */
  export type SpuVariationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpuVariations.
     */
    data: XOR<SpuVariationUpdateManyMutationInput, SpuVariationUncheckedUpdateManyInput>
    /**
     * Filter which SpuVariations to update
     */
    where?: SpuVariationWhereInput
    /**
     * Limit how many SpuVariations to update.
     */
    limit?: number
  }

  /**
   * SpuVariation updateManyAndReturn
   */
  export type SpuVariationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * The data used to update SpuVariations.
     */
    data: XOR<SpuVariationUpdateManyMutationInput, SpuVariationUncheckedUpdateManyInput>
    /**
     * Filter which SpuVariations to update
     */
    where?: SpuVariationWhereInput
    /**
     * Limit how many SpuVariations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuVariation upsert
   */
  export type SpuVariationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * The filter to search for the SpuVariation to update in case it exists.
     */
    where: SpuVariationWhereUniqueInput
    /**
     * In case the SpuVariation found by the `where` argument doesn't exist, create a new SpuVariation with this data.
     */
    create: XOR<SpuVariationCreateInput, SpuVariationUncheckedCreateInput>
    /**
     * In case the SpuVariation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpuVariationUpdateInput, SpuVariationUncheckedUpdateInput>
  }

  /**
   * SpuVariation delete
   */
  export type SpuVariationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
    /**
     * Filter which SpuVariation to delete.
     */
    where: SpuVariationWhereUniqueInput
  }

  /**
   * SpuVariation deleteMany
   */
  export type SpuVariationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuVariations to delete
     */
    where?: SpuVariationWhereInput
    /**
     * Limit how many SpuVariations to delete.
     */
    limit?: number
  }

  /**
   * SpuVariation.skuVariationValues
   */
  export type SpuVariation$skuVariationValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    where?: SkuVariationValueWhereInput
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    cursor?: SkuVariationValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * SpuVariation without action
   */
  export type SpuVariationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuVariation
     */
    select?: SpuVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuVariation
     */
    omit?: SpuVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuVariationInclude<ExtArgs> | null
  }


  /**
   * Model SkuVariationValue
   */

  export type AggregateSkuVariationValue = {
    _count: SkuVariationValueCountAggregateOutputType | null
    _min: SkuVariationValueMinAggregateOutputType | null
    _max: SkuVariationValueMaxAggregateOutputType | null
  }

  export type SkuVariationValueMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    skuId: string | null
    spuVariationId: string | null
    attributeValueId: string | null
  }

  export type SkuVariationValueMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    skuId: string | null
    spuVariationId: string | null
    attributeValueId: string | null
  }

  export type SkuVariationValueCountAggregateOutputType = {
    id: number
    createdAt: number
    skuId: number
    spuVariationId: number
    attributeValueId: number
    _all: number
  }


  export type SkuVariationValueMinAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    spuVariationId?: true
    attributeValueId?: true
  }

  export type SkuVariationValueMaxAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    spuVariationId?: true
    attributeValueId?: true
  }

  export type SkuVariationValueCountAggregateInputType = {
    id?: true
    createdAt?: true
    skuId?: true
    spuVariationId?: true
    attributeValueId?: true
    _all?: true
  }

  export type SkuVariationValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuVariationValue to aggregate.
     */
    where?: SkuVariationValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuVariationValues to fetch.
     */
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuVariationValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuVariationValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuVariationValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuVariationValues
    **/
    _count?: true | SkuVariationValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuVariationValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuVariationValueMaxAggregateInputType
  }

  export type GetSkuVariationValueAggregateType<T extends SkuVariationValueAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuVariationValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuVariationValue[P]>
      : GetScalarType<T[P], AggregateSkuVariationValue[P]>
  }




  export type SkuVariationValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuVariationValueWhereInput
    orderBy?: SkuVariationValueOrderByWithAggregationInput | SkuVariationValueOrderByWithAggregationInput[]
    by: SkuVariationValueScalarFieldEnum[] | SkuVariationValueScalarFieldEnum
    having?: SkuVariationValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuVariationValueCountAggregateInputType | true
    _min?: SkuVariationValueMinAggregateInputType
    _max?: SkuVariationValueMaxAggregateInputType
  }

  export type SkuVariationValueGroupByOutputType = {
    id: string
    createdAt: Date
    skuId: string
    spuVariationId: string
    attributeValueId: string
    _count: SkuVariationValueCountAggregateOutputType | null
    _min: SkuVariationValueMinAggregateOutputType | null
    _max: SkuVariationValueMaxAggregateOutputType | null
  }

  type GetSkuVariationValueGroupByPayload<T extends SkuVariationValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuVariationValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuVariationValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuVariationValueGroupByOutputType[P]>
            : GetScalarType<T[P], SkuVariationValueGroupByOutputType[P]>
        }
      >
    >


  export type SkuVariationValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    spuVariationId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuVariationValue"]>

  export type SkuVariationValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    spuVariationId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuVariationValue"]>

  export type SkuVariationValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    spuVariationId?: boolean
    attributeValueId?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuVariationValue"]>

  export type SkuVariationValueSelectScalar = {
    id?: boolean
    createdAt?: boolean
    skuId?: boolean
    spuVariationId?: boolean
    attributeValueId?: boolean
  }

  export type SkuVariationValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "skuId" | "spuVariationId" | "attributeValueId", ExtArgs["result"]["skuVariationValue"]>
  export type SkuVariationValueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SkuVariationValueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }
  export type SkuVariationValueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    spuVariation?: boolean | SpuVariationDefaultArgs<ExtArgs>
    attributeValue?: boolean | AttributeValueDefaultArgs<ExtArgs>
  }

  export type $SkuVariationValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuVariationValue"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
      spuVariation: Prisma.$SpuVariationPayload<ExtArgs>
      attributeValue: Prisma.$AttributeValuePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      skuId: string
      spuVariationId: string
      attributeValueId: string
    }, ExtArgs["result"]["skuVariationValue"]>
    composites: {}
  }

  type SkuVariationValueGetPayload<S extends boolean | null | undefined | SkuVariationValueDefaultArgs> = $Result.GetResult<Prisma.$SkuVariationValuePayload, S>

  type SkuVariationValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuVariationValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuVariationValueCountAggregateInputType | true
    }

  export interface SkuVariationValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuVariationValue'], meta: { name: 'SkuVariationValue' } }
    /**
     * Find zero or one SkuVariationValue that matches the filter.
     * @param {SkuVariationValueFindUniqueArgs} args - Arguments to find a SkuVariationValue
     * @example
     * // Get one SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuVariationValueFindUniqueArgs>(args: SelectSubset<T, SkuVariationValueFindUniqueArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuVariationValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuVariationValueFindUniqueOrThrowArgs} args - Arguments to find a SkuVariationValue
     * @example
     * // Get one SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuVariationValueFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuVariationValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuVariationValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueFindFirstArgs} args - Arguments to find a SkuVariationValue
     * @example
     * // Get one SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuVariationValueFindFirstArgs>(args?: SelectSubset<T, SkuVariationValueFindFirstArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuVariationValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueFindFirstOrThrowArgs} args - Arguments to find a SkuVariationValue
     * @example
     * // Get one SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuVariationValueFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuVariationValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuVariationValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuVariationValues
     * const skuVariationValues = await prisma.skuVariationValue.findMany()
     * 
     * // Get first 10 SkuVariationValues
     * const skuVariationValues = await prisma.skuVariationValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuVariationValueWithIdOnly = await prisma.skuVariationValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuVariationValueFindManyArgs>(args?: SelectSubset<T, SkuVariationValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuVariationValue.
     * @param {SkuVariationValueCreateArgs} args - Arguments to create a SkuVariationValue.
     * @example
     * // Create one SkuVariationValue
     * const SkuVariationValue = await prisma.skuVariationValue.create({
     *   data: {
     *     // ... data to create a SkuVariationValue
     *   }
     * })
     * 
     */
    create<T extends SkuVariationValueCreateArgs>(args: SelectSubset<T, SkuVariationValueCreateArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuVariationValues.
     * @param {SkuVariationValueCreateManyArgs} args - Arguments to create many SkuVariationValues.
     * @example
     * // Create many SkuVariationValues
     * const skuVariationValue = await prisma.skuVariationValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuVariationValueCreateManyArgs>(args?: SelectSubset<T, SkuVariationValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuVariationValues and returns the data saved in the database.
     * @param {SkuVariationValueCreateManyAndReturnArgs} args - Arguments to create many SkuVariationValues.
     * @example
     * // Create many SkuVariationValues
     * const skuVariationValue = await prisma.skuVariationValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuVariationValues and only return the `id`
     * const skuVariationValueWithIdOnly = await prisma.skuVariationValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuVariationValueCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuVariationValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuVariationValue.
     * @param {SkuVariationValueDeleteArgs} args - Arguments to delete one SkuVariationValue.
     * @example
     * // Delete one SkuVariationValue
     * const SkuVariationValue = await prisma.skuVariationValue.delete({
     *   where: {
     *     // ... filter to delete one SkuVariationValue
     *   }
     * })
     * 
     */
    delete<T extends SkuVariationValueDeleteArgs>(args: SelectSubset<T, SkuVariationValueDeleteArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuVariationValue.
     * @param {SkuVariationValueUpdateArgs} args - Arguments to update one SkuVariationValue.
     * @example
     * // Update one SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuVariationValueUpdateArgs>(args: SelectSubset<T, SkuVariationValueUpdateArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuVariationValues.
     * @param {SkuVariationValueDeleteManyArgs} args - Arguments to filter SkuVariationValues to delete.
     * @example
     * // Delete a few SkuVariationValues
     * const { count } = await prisma.skuVariationValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuVariationValueDeleteManyArgs>(args?: SelectSubset<T, SkuVariationValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuVariationValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuVariationValues
     * const skuVariationValue = await prisma.skuVariationValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuVariationValueUpdateManyArgs>(args: SelectSubset<T, SkuVariationValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuVariationValues and returns the data updated in the database.
     * @param {SkuVariationValueUpdateManyAndReturnArgs} args - Arguments to update many SkuVariationValues.
     * @example
     * // Update many SkuVariationValues
     * const skuVariationValue = await prisma.skuVariationValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuVariationValues and only return the `id`
     * const skuVariationValueWithIdOnly = await prisma.skuVariationValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuVariationValueUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuVariationValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuVariationValue.
     * @param {SkuVariationValueUpsertArgs} args - Arguments to update or create a SkuVariationValue.
     * @example
     * // Update or create a SkuVariationValue
     * const skuVariationValue = await prisma.skuVariationValue.upsert({
     *   create: {
     *     // ... data to create a SkuVariationValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuVariationValue we want to update
     *   }
     * })
     */
    upsert<T extends SkuVariationValueUpsertArgs>(args: SelectSubset<T, SkuVariationValueUpsertArgs<ExtArgs>>): Prisma__SkuVariationValueClient<$Result.GetResult<Prisma.$SkuVariationValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuVariationValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueCountArgs} args - Arguments to filter SkuVariationValues to count.
     * @example
     * // Count the number of SkuVariationValues
     * const count = await prisma.skuVariationValue.count({
     *   where: {
     *     // ... the filter for the SkuVariationValues we want to count
     *   }
     * })
    **/
    count<T extends SkuVariationValueCountArgs>(
      args?: Subset<T, SkuVariationValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuVariationValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuVariationValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuVariationValueAggregateArgs>(args: Subset<T, SkuVariationValueAggregateArgs>): Prisma.PrismaPromise<GetSkuVariationValueAggregateType<T>>

    /**
     * Group by SkuVariationValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuVariationValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuVariationValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuVariationValueGroupByArgs['orderBy'] }
        : { orderBy?: SkuVariationValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuVariationValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuVariationValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuVariationValue model
   */
  readonly fields: SkuVariationValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuVariationValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuVariationValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    spuVariation<T extends SpuVariationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuVariationDefaultArgs<ExtArgs>>): Prisma__SpuVariationClient<$Result.GetResult<Prisma.$SpuVariationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attributeValue<T extends AttributeValueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeValueDefaultArgs<ExtArgs>>): Prisma__AttributeValueClient<$Result.GetResult<Prisma.$AttributeValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuVariationValue model
   */
  interface SkuVariationValueFieldRefs {
    readonly id: FieldRef<"SkuVariationValue", 'String'>
    readonly createdAt: FieldRef<"SkuVariationValue", 'DateTime'>
    readonly skuId: FieldRef<"SkuVariationValue", 'String'>
    readonly spuVariationId: FieldRef<"SkuVariationValue", 'String'>
    readonly attributeValueId: FieldRef<"SkuVariationValue", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SkuVariationValue findUnique
   */
  export type SkuVariationValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter, which SkuVariationValue to fetch.
     */
    where: SkuVariationValueWhereUniqueInput
  }

  /**
   * SkuVariationValue findUniqueOrThrow
   */
  export type SkuVariationValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter, which SkuVariationValue to fetch.
     */
    where: SkuVariationValueWhereUniqueInput
  }

  /**
   * SkuVariationValue findFirst
   */
  export type SkuVariationValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter, which SkuVariationValue to fetch.
     */
    where?: SkuVariationValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuVariationValues to fetch.
     */
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuVariationValues.
     */
    cursor?: SkuVariationValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuVariationValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuVariationValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuVariationValues.
     */
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * SkuVariationValue findFirstOrThrow
   */
  export type SkuVariationValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter, which SkuVariationValue to fetch.
     */
    where?: SkuVariationValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuVariationValues to fetch.
     */
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuVariationValues.
     */
    cursor?: SkuVariationValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuVariationValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuVariationValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuVariationValues.
     */
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * SkuVariationValue findMany
   */
  export type SkuVariationValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter, which SkuVariationValues to fetch.
     */
    where?: SkuVariationValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuVariationValues to fetch.
     */
    orderBy?: SkuVariationValueOrderByWithRelationInput | SkuVariationValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuVariationValues.
     */
    cursor?: SkuVariationValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuVariationValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuVariationValues.
     */
    skip?: number
    distinct?: SkuVariationValueScalarFieldEnum | SkuVariationValueScalarFieldEnum[]
  }

  /**
   * SkuVariationValue create
   */
  export type SkuVariationValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuVariationValue.
     */
    data: XOR<SkuVariationValueCreateInput, SkuVariationValueUncheckedCreateInput>
  }

  /**
   * SkuVariationValue createMany
   */
  export type SkuVariationValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuVariationValues.
     */
    data: SkuVariationValueCreateManyInput | SkuVariationValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuVariationValue createManyAndReturn
   */
  export type SkuVariationValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * The data used to create many SkuVariationValues.
     */
    data: SkuVariationValueCreateManyInput | SkuVariationValueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuVariationValue update
   */
  export type SkuVariationValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuVariationValue.
     */
    data: XOR<SkuVariationValueUpdateInput, SkuVariationValueUncheckedUpdateInput>
    /**
     * Choose, which SkuVariationValue to update.
     */
    where: SkuVariationValueWhereUniqueInput
  }

  /**
   * SkuVariationValue updateMany
   */
  export type SkuVariationValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuVariationValues.
     */
    data: XOR<SkuVariationValueUpdateManyMutationInput, SkuVariationValueUncheckedUpdateManyInput>
    /**
     * Filter which SkuVariationValues to update
     */
    where?: SkuVariationValueWhereInput
    /**
     * Limit how many SkuVariationValues to update.
     */
    limit?: number
  }

  /**
   * SkuVariationValue updateManyAndReturn
   */
  export type SkuVariationValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * The data used to update SkuVariationValues.
     */
    data: XOR<SkuVariationValueUpdateManyMutationInput, SkuVariationValueUncheckedUpdateManyInput>
    /**
     * Filter which SkuVariationValues to update
     */
    where?: SkuVariationValueWhereInput
    /**
     * Limit how many SkuVariationValues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuVariationValue upsert
   */
  export type SkuVariationValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuVariationValue to update in case it exists.
     */
    where: SkuVariationValueWhereUniqueInput
    /**
     * In case the SkuVariationValue found by the `where` argument doesn't exist, create a new SkuVariationValue with this data.
     */
    create: XOR<SkuVariationValueCreateInput, SkuVariationValueUncheckedCreateInput>
    /**
     * In case the SkuVariationValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuVariationValueUpdateInput, SkuVariationValueUncheckedUpdateInput>
  }

  /**
   * SkuVariationValue delete
   */
  export type SkuVariationValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
    /**
     * Filter which SkuVariationValue to delete.
     */
    where: SkuVariationValueWhereUniqueInput
  }

  /**
   * SkuVariationValue deleteMany
   */
  export type SkuVariationValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuVariationValues to delete
     */
    where?: SkuVariationValueWhereInput
    /**
     * Limit how many SkuVariationValues to delete.
     */
    limit?: number
  }

  /**
   * SkuVariationValue without action
   */
  export type SkuVariationValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuVariationValue
     */
    select?: SkuVariationValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuVariationValue
     */
    omit?: SkuVariationValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuVariationValueInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    color: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    slug: string
    color: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spuTags?: boolean | Tag$spuTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "color" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spuTags?: boolean | Tag$spuTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      spuTags: Prisma.$SpuTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      color: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spuTags<T extends Tag$spuTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$spuTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly slug: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly isActive: FieldRef<"Tag", 'Boolean'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.spuTags
   */
  export type Tag$spuTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    where?: SpuTagWhereInput
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    cursor?: SpuTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuTagScalarFieldEnum | SpuTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model SpuTag
   */

  export type AggregateSpuTag = {
    _count: SpuTagCountAggregateOutputType | null
    _min: SpuTagMinAggregateOutputType | null
    _max: SpuTagMaxAggregateOutputType | null
  }

  export type SpuTagMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    spuId: string | null
    tagId: string | null
  }

  export type SpuTagMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    spuId: string | null
    tagId: string | null
  }

  export type SpuTagCountAggregateOutputType = {
    id: number
    createdAt: number
    spuId: number
    tagId: number
    _all: number
  }


  export type SpuTagMinAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    tagId?: true
  }

  export type SpuTagMaxAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    tagId?: true
  }

  export type SpuTagCountAggregateInputType = {
    id?: true
    createdAt?: true
    spuId?: true
    tagId?: true
    _all?: true
  }

  export type SpuTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuTag to aggregate.
     */
    where?: SpuTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuTags to fetch.
     */
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpuTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpuTags
    **/
    _count?: true | SpuTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpuTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpuTagMaxAggregateInputType
  }

  export type GetSpuTagAggregateType<T extends SpuTagAggregateArgs> = {
        [P in keyof T & keyof AggregateSpuTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpuTag[P]>
      : GetScalarType<T[P], AggregateSpuTag[P]>
  }




  export type SpuTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpuTagWhereInput
    orderBy?: SpuTagOrderByWithAggregationInput | SpuTagOrderByWithAggregationInput[]
    by: SpuTagScalarFieldEnum[] | SpuTagScalarFieldEnum
    having?: SpuTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpuTagCountAggregateInputType | true
    _min?: SpuTagMinAggregateInputType
    _max?: SpuTagMaxAggregateInputType
  }

  export type SpuTagGroupByOutputType = {
    id: string
    createdAt: Date
    spuId: string
    tagId: string
    _count: SpuTagCountAggregateOutputType | null
    _min: SpuTagMinAggregateOutputType | null
    _max: SpuTagMaxAggregateOutputType | null
  }

  type GetSpuTagGroupByPayload<T extends SpuTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpuTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpuTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpuTagGroupByOutputType[P]>
            : GetScalarType<T[P], SpuTagGroupByOutputType[P]>
        }
      >
    >


  export type SpuTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    tagId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuTag"]>

  export type SpuTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    tagId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuTag"]>

  export type SpuTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    tagId?: boolean
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spuTag"]>

  export type SpuTagSelectScalar = {
    id?: boolean
    createdAt?: boolean
    spuId?: boolean
    tagId?: boolean
  }

  export type SpuTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "spuId" | "tagId", ExtArgs["result"]["spuTag"]>
  export type SpuTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type SpuTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type SpuTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spu?: boolean | SpuDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $SpuTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpuTag"
    objects: {
      spu: Prisma.$SpuPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      spuId: string
      tagId: string
    }, ExtArgs["result"]["spuTag"]>
    composites: {}
  }

  type SpuTagGetPayload<S extends boolean | null | undefined | SpuTagDefaultArgs> = $Result.GetResult<Prisma.$SpuTagPayload, S>

  type SpuTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpuTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpuTagCountAggregateInputType | true
    }

  export interface SpuTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpuTag'], meta: { name: 'SpuTag' } }
    /**
     * Find zero or one SpuTag that matches the filter.
     * @param {SpuTagFindUniqueArgs} args - Arguments to find a SpuTag
     * @example
     * // Get one SpuTag
     * const spuTag = await prisma.spuTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpuTagFindUniqueArgs>(args: SelectSubset<T, SpuTagFindUniqueArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpuTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpuTagFindUniqueOrThrowArgs} args - Arguments to find a SpuTag
     * @example
     * // Get one SpuTag
     * const spuTag = await prisma.spuTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpuTagFindUniqueOrThrowArgs>(args: SelectSubset<T, SpuTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagFindFirstArgs} args - Arguments to find a SpuTag
     * @example
     * // Get one SpuTag
     * const spuTag = await prisma.spuTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpuTagFindFirstArgs>(args?: SelectSubset<T, SpuTagFindFirstArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpuTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagFindFirstOrThrowArgs} args - Arguments to find a SpuTag
     * @example
     * // Get one SpuTag
     * const spuTag = await prisma.spuTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpuTagFindFirstOrThrowArgs>(args?: SelectSubset<T, SpuTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpuTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpuTags
     * const spuTags = await prisma.spuTag.findMany()
     * 
     * // Get first 10 SpuTags
     * const spuTags = await prisma.spuTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spuTagWithIdOnly = await prisma.spuTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpuTagFindManyArgs>(args?: SelectSubset<T, SpuTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpuTag.
     * @param {SpuTagCreateArgs} args - Arguments to create a SpuTag.
     * @example
     * // Create one SpuTag
     * const SpuTag = await prisma.spuTag.create({
     *   data: {
     *     // ... data to create a SpuTag
     *   }
     * })
     * 
     */
    create<T extends SpuTagCreateArgs>(args: SelectSubset<T, SpuTagCreateArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpuTags.
     * @param {SpuTagCreateManyArgs} args - Arguments to create many SpuTags.
     * @example
     * // Create many SpuTags
     * const spuTag = await prisma.spuTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpuTagCreateManyArgs>(args?: SelectSubset<T, SpuTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpuTags and returns the data saved in the database.
     * @param {SpuTagCreateManyAndReturnArgs} args - Arguments to create many SpuTags.
     * @example
     * // Create many SpuTags
     * const spuTag = await prisma.spuTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpuTags and only return the `id`
     * const spuTagWithIdOnly = await prisma.spuTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpuTagCreateManyAndReturnArgs>(args?: SelectSubset<T, SpuTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpuTag.
     * @param {SpuTagDeleteArgs} args - Arguments to delete one SpuTag.
     * @example
     * // Delete one SpuTag
     * const SpuTag = await prisma.spuTag.delete({
     *   where: {
     *     // ... filter to delete one SpuTag
     *   }
     * })
     * 
     */
    delete<T extends SpuTagDeleteArgs>(args: SelectSubset<T, SpuTagDeleteArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpuTag.
     * @param {SpuTagUpdateArgs} args - Arguments to update one SpuTag.
     * @example
     * // Update one SpuTag
     * const spuTag = await prisma.spuTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpuTagUpdateArgs>(args: SelectSubset<T, SpuTagUpdateArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpuTags.
     * @param {SpuTagDeleteManyArgs} args - Arguments to filter SpuTags to delete.
     * @example
     * // Delete a few SpuTags
     * const { count } = await prisma.spuTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpuTagDeleteManyArgs>(args?: SelectSubset<T, SpuTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpuTags
     * const spuTag = await prisma.spuTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpuTagUpdateManyArgs>(args: SelectSubset<T, SpuTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpuTags and returns the data updated in the database.
     * @param {SpuTagUpdateManyAndReturnArgs} args - Arguments to update many SpuTags.
     * @example
     * // Update many SpuTags
     * const spuTag = await prisma.spuTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpuTags and only return the `id`
     * const spuTagWithIdOnly = await prisma.spuTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpuTagUpdateManyAndReturnArgs>(args: SelectSubset<T, SpuTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpuTag.
     * @param {SpuTagUpsertArgs} args - Arguments to update or create a SpuTag.
     * @example
     * // Update or create a SpuTag
     * const spuTag = await prisma.spuTag.upsert({
     *   create: {
     *     // ... data to create a SpuTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpuTag we want to update
     *   }
     * })
     */
    upsert<T extends SpuTagUpsertArgs>(args: SelectSubset<T, SpuTagUpsertArgs<ExtArgs>>): Prisma__SpuTagClient<$Result.GetResult<Prisma.$SpuTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpuTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagCountArgs} args - Arguments to filter SpuTags to count.
     * @example
     * // Count the number of SpuTags
     * const count = await prisma.spuTag.count({
     *   where: {
     *     // ... the filter for the SpuTags we want to count
     *   }
     * })
    **/
    count<T extends SpuTagCountArgs>(
      args?: Subset<T, SpuTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpuTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpuTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpuTagAggregateArgs>(args: Subset<T, SpuTagAggregateArgs>): Prisma.PrismaPromise<GetSpuTagAggregateType<T>>

    /**
     * Group by SpuTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpuTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpuTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpuTagGroupByArgs['orderBy'] }
        : { orderBy?: SpuTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpuTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpuTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpuTag model
   */
  readonly fields: SpuTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpuTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpuTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spu<T extends SpuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpuDefaultArgs<ExtArgs>>): Prisma__SpuClient<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpuTag model
   */
  interface SpuTagFieldRefs {
    readonly id: FieldRef<"SpuTag", 'String'>
    readonly createdAt: FieldRef<"SpuTag", 'DateTime'>
    readonly spuId: FieldRef<"SpuTag", 'String'>
    readonly tagId: FieldRef<"SpuTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpuTag findUnique
   */
  export type SpuTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter, which SpuTag to fetch.
     */
    where: SpuTagWhereUniqueInput
  }

  /**
   * SpuTag findUniqueOrThrow
   */
  export type SpuTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter, which SpuTag to fetch.
     */
    where: SpuTagWhereUniqueInput
  }

  /**
   * SpuTag findFirst
   */
  export type SpuTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter, which SpuTag to fetch.
     */
    where?: SpuTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuTags to fetch.
     */
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuTags.
     */
    cursor?: SpuTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuTags.
     */
    distinct?: SpuTagScalarFieldEnum | SpuTagScalarFieldEnum[]
  }

  /**
   * SpuTag findFirstOrThrow
   */
  export type SpuTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter, which SpuTag to fetch.
     */
    where?: SpuTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuTags to fetch.
     */
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpuTags.
     */
    cursor?: SpuTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpuTags.
     */
    distinct?: SpuTagScalarFieldEnum | SpuTagScalarFieldEnum[]
  }

  /**
   * SpuTag findMany
   */
  export type SpuTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter, which SpuTags to fetch.
     */
    where?: SpuTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpuTags to fetch.
     */
    orderBy?: SpuTagOrderByWithRelationInput | SpuTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpuTags.
     */
    cursor?: SpuTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpuTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpuTags.
     */
    skip?: number
    distinct?: SpuTagScalarFieldEnum | SpuTagScalarFieldEnum[]
  }

  /**
   * SpuTag create
   */
  export type SpuTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * The data needed to create a SpuTag.
     */
    data: XOR<SpuTagCreateInput, SpuTagUncheckedCreateInput>
  }

  /**
   * SpuTag createMany
   */
  export type SpuTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpuTags.
     */
    data: SpuTagCreateManyInput | SpuTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpuTag createManyAndReturn
   */
  export type SpuTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * The data used to create many SpuTags.
     */
    data: SpuTagCreateManyInput | SpuTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuTag update
   */
  export type SpuTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * The data needed to update a SpuTag.
     */
    data: XOR<SpuTagUpdateInput, SpuTagUncheckedUpdateInput>
    /**
     * Choose, which SpuTag to update.
     */
    where: SpuTagWhereUniqueInput
  }

  /**
   * SpuTag updateMany
   */
  export type SpuTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpuTags.
     */
    data: XOR<SpuTagUpdateManyMutationInput, SpuTagUncheckedUpdateManyInput>
    /**
     * Filter which SpuTags to update
     */
    where?: SpuTagWhereInput
    /**
     * Limit how many SpuTags to update.
     */
    limit?: number
  }

  /**
   * SpuTag updateManyAndReturn
   */
  export type SpuTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * The data used to update SpuTags.
     */
    data: XOR<SpuTagUpdateManyMutationInput, SpuTagUncheckedUpdateManyInput>
    /**
     * Filter which SpuTags to update
     */
    where?: SpuTagWhereInput
    /**
     * Limit how many SpuTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpuTag upsert
   */
  export type SpuTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * The filter to search for the SpuTag to update in case it exists.
     */
    where: SpuTagWhereUniqueInput
    /**
     * In case the SpuTag found by the `where` argument doesn't exist, create a new SpuTag with this data.
     */
    create: XOR<SpuTagCreateInput, SpuTagUncheckedCreateInput>
    /**
     * In case the SpuTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpuTagUpdateInput, SpuTagUncheckedUpdateInput>
  }

  /**
   * SpuTag delete
   */
  export type SpuTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
    /**
     * Filter which SpuTag to delete.
     */
    where: SpuTagWhereUniqueInput
  }

  /**
   * SpuTag deleteMany
   */
  export type SpuTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpuTags to delete
     */
    where?: SpuTagWhereInput
    /**
     * Limit how many SpuTags to delete.
     */
    limit?: number
  }

  /**
   * SpuTag without action
   */
  export type SpuTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpuTag
     */
    select?: SpuTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpuTag
     */
    omit?: SpuTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuTagInclude<ExtArgs> | null
  }


  /**
   * Model Shop
   */

  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    rating: Decimal | null
    totalReviews: number | null
  }

  export type ShopSumAggregateOutputType = {
    rating: Decimal | null
    totalReviews: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    logoUrl: string | null
    bannerUrl: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    status: $Enums.ShopStatus | null
    isActive: boolean | null
    isVerified: boolean | null
    rating: Decimal | null
    totalReviews: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type ShopMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    logoUrl: string | null
    bannerUrl: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    status: $Enums.ShopStatus | null
    isActive: boolean | null
    isVerified: boolean | null
    rating: Decimal | null
    totalReviews: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    logoUrl: number
    bannerUrl: number
    email: number
    phone: number
    address: number
    website: number
    status: number
    isActive: number
    isVerified: number
    rating: number
    totalReviews: number
    createdAt: number
    updatedAt: number
    ownerId: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    rating?: true
    totalReviews?: true
  }

  export type ShopSumAggregateInputType = {
    rating?: true
    totalReviews?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    bannerUrl?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    status?: true
    isActive?: true
    isVerified?: true
    rating?: true
    totalReviews?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    bannerUrl?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    status?: true
    isActive?: true
    isVerified?: true
    rating?: true
    totalReviews?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    logoUrl?: true
    bannerUrl?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    status?: true
    isActive?: true
    isVerified?: true
    rating?: true
    totalReviews?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    _all?: true
  }

  export type ShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shop to aggregate.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithAggregationInput | ShopOrderByWithAggregationInput[]
    by: ShopScalarFieldEnum[] | ShopScalarFieldEnum
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }

  export type ShopGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string | null
    logoUrl: string | null
    bannerUrl: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    status: $Enums.ShopStatus
    isActive: boolean
    isVerified: boolean
    rating: Decimal | null
    totalReviews: number
    createdAt: Date
    updatedAt: Date
    ownerId: string
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    bannerUrl?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    status?: boolean
    isActive?: boolean
    isVerified?: boolean
    rating?: boolean
    totalReviews?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    spus?: boolean | Shop$spusArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    bannerUrl?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    status?: boolean
    isActive?: boolean
    isVerified?: boolean
    rating?: boolean
    totalReviews?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    bannerUrl?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    status?: boolean
    isActive?: boolean
    isVerified?: boolean
    rating?: boolean
    totalReviews?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    logoUrl?: boolean
    bannerUrl?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    status?: boolean
    isActive?: boolean
    isVerified?: boolean
    rating?: boolean
    totalReviews?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
  }

  export type ShopOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "logoUrl" | "bannerUrl" | "email" | "phone" | "address" | "website" | "status" | "isActive" | "isVerified" | "rating" | "totalReviews" | "createdAt" | "updatedAt" | "ownerId", ExtArgs["result"]["shop"]>
  export type ShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    spus?: boolean | Shop$spusArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShopIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShopIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shop"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      spus: Prisma.$SpuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string | null
      logoUrl: string | null
      bannerUrl: string | null
      email: string | null
      phone: string | null
      address: string | null
      website: string | null
      status: $Enums.ShopStatus
      isActive: boolean
      isVerified: boolean
      rating: Prisma.Decimal | null
      totalReviews: number
      createdAt: Date
      updatedAt: Date
      ownerId: string
    }, ExtArgs["result"]["shop"]>
    composites: {}
  }

  type ShopGetPayload<S extends boolean | null | undefined | ShopDefaultArgs> = $Result.GetResult<Prisma.$ShopPayload, S>

  type ShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShopFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShopCountAggregateInputType | true
    }

  export interface ShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shop'], meta: { name: 'Shop' } }
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShopFindUniqueArgs>(args: SelectSubset<T, ShopFindUniqueArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Shop that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShopFindUniqueOrThrowArgs>(args: SelectSubset<T, ShopFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShopFindFirstArgs>(args?: SelectSubset<T, ShopFindFirstArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShopFindFirstOrThrowArgs>(args?: SelectSubset<T, ShopFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShopFindManyArgs>(args?: SelectSubset<T, ShopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
     */
    create<T extends ShopCreateArgs>(args: SelectSubset<T, ShopCreateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shops.
     * @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShopCreateManyArgs>(args?: SelectSubset<T, ShopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shops and returns the data saved in the database.
     * @param {ShopCreateManyAndReturnArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shops and only return the `id`
     * const shopWithIdOnly = await prisma.shop.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShopCreateManyAndReturnArgs>(args?: SelectSubset<T, ShopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
     */
    delete<T extends ShopDeleteArgs>(args: SelectSubset<T, ShopDeleteArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShopUpdateArgs>(args: SelectSubset<T, ShopUpdateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShopDeleteManyArgs>(args?: SelectSubset<T, ShopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShopUpdateManyArgs>(args: SelectSubset<T, ShopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops and returns the data updated in the database.
     * @param {ShopUpdateManyAndReturnArgs} args - Arguments to update many Shops.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shops and only return the `id`
     * const shopWithIdOnly = await prisma.shop.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShopUpdateManyAndReturnArgs>(args: SelectSubset<T, ShopUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
     */
    upsert<T extends ShopUpsertArgs>(args: SelectSubset<T, ShopUpsertArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shop model
   */
  readonly fields: ShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    spus<T extends Shop$spusArgs<ExtArgs> = {}>(args?: Subset<T, Shop$spusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shop model
   */
  interface ShopFieldRefs {
    readonly id: FieldRef<"Shop", 'String'>
    readonly name: FieldRef<"Shop", 'String'>
    readonly slug: FieldRef<"Shop", 'String'>
    readonly description: FieldRef<"Shop", 'String'>
    readonly logoUrl: FieldRef<"Shop", 'String'>
    readonly bannerUrl: FieldRef<"Shop", 'String'>
    readonly email: FieldRef<"Shop", 'String'>
    readonly phone: FieldRef<"Shop", 'String'>
    readonly address: FieldRef<"Shop", 'String'>
    readonly website: FieldRef<"Shop", 'String'>
    readonly status: FieldRef<"Shop", 'ShopStatus'>
    readonly isActive: FieldRef<"Shop", 'Boolean'>
    readonly isVerified: FieldRef<"Shop", 'Boolean'>
    readonly rating: FieldRef<"Shop", 'Decimal'>
    readonly totalReviews: FieldRef<"Shop", 'Int'>
    readonly createdAt: FieldRef<"Shop", 'DateTime'>
    readonly updatedAt: FieldRef<"Shop", 'DateTime'>
    readonly ownerId: FieldRef<"Shop", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findUniqueOrThrow
   */
  export type ShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findFirstOrThrow
   */
  export type ShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findMany
   */
  export type ShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shops to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop create
   */
  export type ShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to create a Shop.
     */
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }

  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shop createManyAndReturn
   */
  export type ShopCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shop update
   */
  export type ShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to update a Shop.
     */
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shops.
     */
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     */
    where?: ShopWhereInput
    /**
     * Limit how many Shops to update.
     */
    limit?: number
  }

  /**
   * Shop updateManyAndReturn
   */
  export type ShopUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * The data used to update Shops.
     */
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     */
    where?: ShopWhereInput
    /**
     * Limit how many Shops to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shop upsert
   */
  export type ShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The filter to search for the Shop to update in case it exists.
     */
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     */
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }

  /**
   * Shop delete
   */
  export type ShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter which Shop to delete.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shops to delete
     */
    where?: ShopWhereInput
    /**
     * Limit how many Shops to delete.
     */
    limit?: number
  }

  /**
   * Shop.spus
   */
  export type Shop$spusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spu
     */
    select?: SpuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spu
     */
    omit?: SpuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpuInclude<ExtArgs> | null
    where?: SpuWhereInput
    orderBy?: SpuOrderByWithRelationInput | SpuOrderByWithRelationInput[]
    cursor?: SpuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpuScalarFieldEnum | SpuScalarFieldEnum[]
  }

  /**
   * Shop without action
   */
  export type ShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    username: string | null
    email: string | null
    phone: string | null
    hashingPassword: string | null
    accountType: $Enums.AccountType | null
    avatarUrl: string | null
    address: string | null
    city: string | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
    visible: $Enums.UserVisibility | null
    isBanned: boolean | null
    isLocked: boolean | null
    isVerified: boolean | null
    lastActived: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    username: string | null
    email: string | null
    phone: string | null
    hashingPassword: string | null
    accountType: $Enums.AccountType | null
    avatarUrl: string | null
    address: string | null
    city: string | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
    visible: $Enums.UserVisibility | null
    isBanned: boolean | null
    isLocked: boolean | null
    isVerified: boolean | null
    lastActived: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullname: number
    username: number
    email: number
    phone: number
    hashingPassword: number
    accountType: number
    avatarUrl: number
    address: number
    city: number
    state: number
    roles: number
    flags: number
    createdAt: number
    updatedAt: number
    visible: number
    isBanned: number
    isLocked: number
    isVerified: number
    lastActived: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    phone?: true
    hashingPassword?: true
    accountType?: true
    avatarUrl?: true
    address?: true
    city?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    visible?: true
    isBanned?: true
    isLocked?: true
    isVerified?: true
    lastActived?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    phone?: true
    hashingPassword?: true
    accountType?: true
    avatarUrl?: true
    address?: true
    city?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    visible?: true
    isBanned?: true
    isLocked?: true
    isVerified?: true
    lastActived?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    email?: true
    phone?: true
    hashingPassword?: true
    accountType?: true
    avatarUrl?: true
    address?: true
    city?: true
    state?: true
    roles?: true
    flags?: true
    createdAt?: true
    updatedAt?: true
    visible?: true
    isBanned?: true
    isLocked?: true
    isVerified?: true
    lastActived?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    fullname: string
    username: string
    email: string
    phone: string | null
    hashingPassword: string | null
    accountType: $Enums.AccountType
    avatarUrl: string | null
    address: string | null
    city: string | null
    state: string | null
    roles: $Enums.UserRole[]
    flags: $Enums.UserFlag[]
    createdAt: Date
    updatedAt: Date
    visible: $Enums.UserVisibility
    isBanned: boolean
    isLocked: boolean
    isVerified: boolean
    lastActived: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    hashingPassword?: boolean
    accountType?: boolean
    avatarUrl?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    roles?: boolean
    flags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    visible?: boolean
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    codes?: boolean | User$codesArgs<ExtArgs>
    Oauth2User?: boolean | User$Oauth2UserArgs<ExtArgs>
    shops?: boolean | User$shopsArgs<ExtArgs>
    CreditCard?: boolean | User$CreditCardArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    hashingPassword?: boolean
    accountType?: boolean
    avatarUrl?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    roles?: boolean
    flags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    visible?: boolean
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    hashingPassword?: boolean
    accountType?: boolean
    avatarUrl?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    roles?: boolean
    flags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    visible?: boolean
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullname?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    hashingPassword?: boolean
    accountType?: boolean
    avatarUrl?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    roles?: boolean
    flags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    visible?: boolean
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullname" | "username" | "email" | "phone" | "hashingPassword" | "accountType" | "avatarUrl" | "address" | "city" | "state" | "roles" | "flags" | "createdAt" | "updatedAt" | "visible" | "isBanned" | "isLocked" | "isVerified" | "lastActived", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    codes?: boolean | User$codesArgs<ExtArgs>
    Oauth2User?: boolean | User$Oauth2UserArgs<ExtArgs>
    shops?: boolean | User$shopsArgs<ExtArgs>
    CreditCard?: boolean | User$CreditCardArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      codes: Prisma.$CodePayload<ExtArgs> | null
      Oauth2User: Prisma.$Oauth2UserPayload<ExtArgs>[]
      shops: Prisma.$ShopPayload<ExtArgs>[]
      CreditCard: Prisma.$CreditCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      username: string
      email: string
      phone: string | null
      hashingPassword: string | null
      accountType: $Enums.AccountType
      avatarUrl: string | null
      address: string | null
      city: string | null
      state: string | null
      roles: $Enums.UserRole[]
      flags: $Enums.UserFlag[]
      createdAt: Date
      updatedAt: Date
      visible: $Enums.UserVisibility
      isBanned: boolean
      isLocked: boolean
      isVerified: boolean
      lastActived: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    codes<T extends User$codesArgs<ExtArgs> = {}>(args?: Subset<T, User$codesArgs<ExtArgs>>): Prisma__CodeClient<$Result.GetResult<Prisma.$CodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Oauth2User<T extends User$Oauth2UserArgs<ExtArgs> = {}>(args?: Subset<T, User$Oauth2UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shops<T extends User$shopsArgs<ExtArgs> = {}>(args?: Subset<T, User$shopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreditCard<T extends User$CreditCardArgs<ExtArgs> = {}>(args?: Subset<T, User$CreditCardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly fullname: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly hashingPassword: FieldRef<"User", 'String'>
    readonly accountType: FieldRef<"User", 'AccountType'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly state: FieldRef<"User", 'String'>
    readonly roles: FieldRef<"User", 'UserRole[]'>
    readonly flags: FieldRef<"User", 'UserFlag[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly visible: FieldRef<"User", 'UserVisibility'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
    readonly isLocked: FieldRef<"User", 'Boolean'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly lastActived: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.codes
   */
  export type User$codesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code
     */
    select?: CodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Code
     */
    omit?: CodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeInclude<ExtArgs> | null
    where?: CodeWhereInput
  }

  /**
   * User.Oauth2User
   */
  export type User$Oauth2UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    where?: Oauth2UserWhereInput
    orderBy?: Oauth2UserOrderByWithRelationInput | Oauth2UserOrderByWithRelationInput[]
    cursor?: Oauth2UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Oauth2UserScalarFieldEnum | Oauth2UserScalarFieldEnum[]
  }

  /**
   * User.shops
   */
  export type User$shopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shop
     */
    omit?: ShopOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    cursor?: ShopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * User.CreditCard
   */
  export type User$CreditCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    where?: CreditCardWhereInput
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    cursor?: CreditCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Oauth2User
   */

  export type AggregateOauth2User = {
    _count: Oauth2UserCountAggregateOutputType | null
    _min: Oauth2UserMinAggregateOutputType | null
    _max: Oauth2UserMaxAggregateOutputType | null
  }

  export type Oauth2UserMinAggregateOutputType = {
    id: string | null
    provider: $Enums.Provider | null
    providerUserId: string | null
    email: string | null
    phone: string | null
    firstname: string | null
    lastname: string | null
    fullname: string | null
    avatarUrl: string | null
    username: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type Oauth2UserMaxAggregateOutputType = {
    id: string | null
    provider: $Enums.Provider | null
    providerUserId: string | null
    email: string | null
    phone: string | null
    firstname: string | null
    lastname: string | null
    fullname: string | null
    avatarUrl: string | null
    username: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type Oauth2UserCountAggregateOutputType = {
    id: number
    provider: number
    providerUserId: number
    email: number
    phone: number
    firstname: number
    lastname: number
    fullname: number
    avatarUrl: number
    username: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type Oauth2UserMinAggregateInputType = {
    id?: true
    provider?: true
    providerUserId?: true
    email?: true
    phone?: true
    firstname?: true
    lastname?: true
    fullname?: true
    avatarUrl?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type Oauth2UserMaxAggregateInputType = {
    id?: true
    provider?: true
    providerUserId?: true
    email?: true
    phone?: true
    firstname?: true
    lastname?: true
    fullname?: true
    avatarUrl?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type Oauth2UserCountAggregateInputType = {
    id?: true
    provider?: true
    providerUserId?: true
    email?: true
    phone?: true
    firstname?: true
    lastname?: true
    fullname?: true
    avatarUrl?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type Oauth2UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oauth2User to aggregate.
     */
    where?: Oauth2UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oauth2Users to fetch.
     */
    orderBy?: Oauth2UserOrderByWithRelationInput | Oauth2UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Oauth2UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oauth2Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oauth2Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Oauth2Users
    **/
    _count?: true | Oauth2UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Oauth2UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Oauth2UserMaxAggregateInputType
  }

  export type GetOauth2UserAggregateType<T extends Oauth2UserAggregateArgs> = {
        [P in keyof T & keyof AggregateOauth2User]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOauth2User[P]>
      : GetScalarType<T[P], AggregateOauth2User[P]>
  }




  export type Oauth2UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Oauth2UserWhereInput
    orderBy?: Oauth2UserOrderByWithAggregationInput | Oauth2UserOrderByWithAggregationInput[]
    by: Oauth2UserScalarFieldEnum[] | Oauth2UserScalarFieldEnum
    having?: Oauth2UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Oauth2UserCountAggregateInputType | true
    _min?: Oauth2UserMinAggregateInputType
    _max?: Oauth2UserMaxAggregateInputType
  }

  export type Oauth2UserGroupByOutputType = {
    id: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone: string | null
    firstname: string | null
    lastname: string | null
    fullname: string | null
    avatarUrl: string | null
    username: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: Oauth2UserCountAggregateOutputType | null
    _min: Oauth2UserMinAggregateOutputType | null
    _max: Oauth2UserMaxAggregateOutputType | null
  }

  type GetOauth2UserGroupByPayload<T extends Oauth2UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Oauth2UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Oauth2UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Oauth2UserGroupByOutputType[P]>
            : GetScalarType<T[P], Oauth2UserGroupByOutputType[P]>
        }
      >
    >


  export type Oauth2UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerUserId?: boolean
    email?: boolean
    phone?: boolean
    firstname?: boolean
    lastname?: boolean
    fullname?: boolean
    avatarUrl?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oauth2User"]>

  export type Oauth2UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerUserId?: boolean
    email?: boolean
    phone?: boolean
    firstname?: boolean
    lastname?: boolean
    fullname?: boolean
    avatarUrl?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oauth2User"]>

  export type Oauth2UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerUserId?: boolean
    email?: boolean
    phone?: boolean
    firstname?: boolean
    lastname?: boolean
    fullname?: boolean
    avatarUrl?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oauth2User"]>

  export type Oauth2UserSelectScalar = {
    id?: boolean
    provider?: boolean
    providerUserId?: boolean
    email?: boolean
    phone?: boolean
    firstname?: boolean
    lastname?: boolean
    fullname?: boolean
    avatarUrl?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type Oauth2UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "provider" | "providerUserId" | "email" | "phone" | "firstname" | "lastname" | "fullname" | "avatarUrl" | "username" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["oauth2User"]>
  export type Oauth2UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type Oauth2UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type Oauth2UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $Oauth2UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Oauth2User"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      provider: $Enums.Provider
      providerUserId: string
      email: string
      phone: string | null
      firstname: string | null
      lastname: string | null
      fullname: string | null
      avatarUrl: string | null
      username: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["oauth2User"]>
    composites: {}
  }

  type Oauth2UserGetPayload<S extends boolean | null | undefined | Oauth2UserDefaultArgs> = $Result.GetResult<Prisma.$Oauth2UserPayload, S>

  type Oauth2UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Oauth2UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Oauth2UserCountAggregateInputType | true
    }

  export interface Oauth2UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Oauth2User'], meta: { name: 'Oauth2User' } }
    /**
     * Find zero or one Oauth2User that matches the filter.
     * @param {Oauth2UserFindUniqueArgs} args - Arguments to find a Oauth2User
     * @example
     * // Get one Oauth2User
     * const oauth2User = await prisma.oauth2User.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Oauth2UserFindUniqueArgs>(args: SelectSubset<T, Oauth2UserFindUniqueArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Oauth2User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Oauth2UserFindUniqueOrThrowArgs} args - Arguments to find a Oauth2User
     * @example
     * // Get one Oauth2User
     * const oauth2User = await prisma.oauth2User.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Oauth2UserFindUniqueOrThrowArgs>(args: SelectSubset<T, Oauth2UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Oauth2User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserFindFirstArgs} args - Arguments to find a Oauth2User
     * @example
     * // Get one Oauth2User
     * const oauth2User = await prisma.oauth2User.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Oauth2UserFindFirstArgs>(args?: SelectSubset<T, Oauth2UserFindFirstArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Oauth2User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserFindFirstOrThrowArgs} args - Arguments to find a Oauth2User
     * @example
     * // Get one Oauth2User
     * const oauth2User = await prisma.oauth2User.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Oauth2UserFindFirstOrThrowArgs>(args?: SelectSubset<T, Oauth2UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Oauth2Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Oauth2Users
     * const oauth2Users = await prisma.oauth2User.findMany()
     * 
     * // Get first 10 Oauth2Users
     * const oauth2Users = await prisma.oauth2User.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oauth2UserWithIdOnly = await prisma.oauth2User.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Oauth2UserFindManyArgs>(args?: SelectSubset<T, Oauth2UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Oauth2User.
     * @param {Oauth2UserCreateArgs} args - Arguments to create a Oauth2User.
     * @example
     * // Create one Oauth2User
     * const Oauth2User = await prisma.oauth2User.create({
     *   data: {
     *     // ... data to create a Oauth2User
     *   }
     * })
     * 
     */
    create<T extends Oauth2UserCreateArgs>(args: SelectSubset<T, Oauth2UserCreateArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Oauth2Users.
     * @param {Oauth2UserCreateManyArgs} args - Arguments to create many Oauth2Users.
     * @example
     * // Create many Oauth2Users
     * const oauth2User = await prisma.oauth2User.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Oauth2UserCreateManyArgs>(args?: SelectSubset<T, Oauth2UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Oauth2Users and returns the data saved in the database.
     * @param {Oauth2UserCreateManyAndReturnArgs} args - Arguments to create many Oauth2Users.
     * @example
     * // Create many Oauth2Users
     * const oauth2User = await prisma.oauth2User.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Oauth2Users and only return the `id`
     * const oauth2UserWithIdOnly = await prisma.oauth2User.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Oauth2UserCreateManyAndReturnArgs>(args?: SelectSubset<T, Oauth2UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Oauth2User.
     * @param {Oauth2UserDeleteArgs} args - Arguments to delete one Oauth2User.
     * @example
     * // Delete one Oauth2User
     * const Oauth2User = await prisma.oauth2User.delete({
     *   where: {
     *     // ... filter to delete one Oauth2User
     *   }
     * })
     * 
     */
    delete<T extends Oauth2UserDeleteArgs>(args: SelectSubset<T, Oauth2UserDeleteArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Oauth2User.
     * @param {Oauth2UserUpdateArgs} args - Arguments to update one Oauth2User.
     * @example
     * // Update one Oauth2User
     * const oauth2User = await prisma.oauth2User.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Oauth2UserUpdateArgs>(args: SelectSubset<T, Oauth2UserUpdateArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Oauth2Users.
     * @param {Oauth2UserDeleteManyArgs} args - Arguments to filter Oauth2Users to delete.
     * @example
     * // Delete a few Oauth2Users
     * const { count } = await prisma.oauth2User.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Oauth2UserDeleteManyArgs>(args?: SelectSubset<T, Oauth2UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Oauth2Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Oauth2Users
     * const oauth2User = await prisma.oauth2User.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Oauth2UserUpdateManyArgs>(args: SelectSubset<T, Oauth2UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Oauth2Users and returns the data updated in the database.
     * @param {Oauth2UserUpdateManyAndReturnArgs} args - Arguments to update many Oauth2Users.
     * @example
     * // Update many Oauth2Users
     * const oauth2User = await prisma.oauth2User.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Oauth2Users and only return the `id`
     * const oauth2UserWithIdOnly = await prisma.oauth2User.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Oauth2UserUpdateManyAndReturnArgs>(args: SelectSubset<T, Oauth2UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Oauth2User.
     * @param {Oauth2UserUpsertArgs} args - Arguments to update or create a Oauth2User.
     * @example
     * // Update or create a Oauth2User
     * const oauth2User = await prisma.oauth2User.upsert({
     *   create: {
     *     // ... data to create a Oauth2User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Oauth2User we want to update
     *   }
     * })
     */
    upsert<T extends Oauth2UserUpsertArgs>(args: SelectSubset<T, Oauth2UserUpsertArgs<ExtArgs>>): Prisma__Oauth2UserClient<$Result.GetResult<Prisma.$Oauth2UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Oauth2Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserCountArgs} args - Arguments to filter Oauth2Users to count.
     * @example
     * // Count the number of Oauth2Users
     * const count = await prisma.oauth2User.count({
     *   where: {
     *     // ... the filter for the Oauth2Users we want to count
     *   }
     * })
    **/
    count<T extends Oauth2UserCountArgs>(
      args?: Subset<T, Oauth2UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Oauth2UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Oauth2User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Oauth2UserAggregateArgs>(args: Subset<T, Oauth2UserAggregateArgs>): Prisma.PrismaPromise<GetOauth2UserAggregateType<T>>

    /**
     * Group by Oauth2User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Oauth2UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Oauth2UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Oauth2UserGroupByArgs['orderBy'] }
        : { orderBy?: Oauth2UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Oauth2UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOauth2UserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Oauth2User model
   */
  readonly fields: Oauth2UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Oauth2User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Oauth2UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Oauth2User model
   */
  interface Oauth2UserFieldRefs {
    readonly id: FieldRef<"Oauth2User", 'String'>
    readonly provider: FieldRef<"Oauth2User", 'Provider'>
    readonly providerUserId: FieldRef<"Oauth2User", 'String'>
    readonly email: FieldRef<"Oauth2User", 'String'>
    readonly phone: FieldRef<"Oauth2User", 'String'>
    readonly firstname: FieldRef<"Oauth2User", 'String'>
    readonly lastname: FieldRef<"Oauth2User", 'String'>
    readonly fullname: FieldRef<"Oauth2User", 'String'>
    readonly avatarUrl: FieldRef<"Oauth2User", 'String'>
    readonly username: FieldRef<"Oauth2User", 'String'>
    readonly createdAt: FieldRef<"Oauth2User", 'DateTime'>
    readonly updatedAt: FieldRef<"Oauth2User", 'DateTime'>
    readonly userId: FieldRef<"Oauth2User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Oauth2User findUnique
   */
  export type Oauth2UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter, which Oauth2User to fetch.
     */
    where: Oauth2UserWhereUniqueInput
  }

  /**
   * Oauth2User findUniqueOrThrow
   */
  export type Oauth2UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter, which Oauth2User to fetch.
     */
    where: Oauth2UserWhereUniqueInput
  }

  /**
   * Oauth2User findFirst
   */
  export type Oauth2UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter, which Oauth2User to fetch.
     */
    where?: Oauth2UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oauth2Users to fetch.
     */
    orderBy?: Oauth2UserOrderByWithRelationInput | Oauth2UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oauth2Users.
     */
    cursor?: Oauth2UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oauth2Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oauth2Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oauth2Users.
     */
    distinct?: Oauth2UserScalarFieldEnum | Oauth2UserScalarFieldEnum[]
  }

  /**
   * Oauth2User findFirstOrThrow
   */
  export type Oauth2UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter, which Oauth2User to fetch.
     */
    where?: Oauth2UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oauth2Users to fetch.
     */
    orderBy?: Oauth2UserOrderByWithRelationInput | Oauth2UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oauth2Users.
     */
    cursor?: Oauth2UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oauth2Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oauth2Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oauth2Users.
     */
    distinct?: Oauth2UserScalarFieldEnum | Oauth2UserScalarFieldEnum[]
  }

  /**
   * Oauth2User findMany
   */
  export type Oauth2UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter, which Oauth2Users to fetch.
     */
    where?: Oauth2UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oauth2Users to fetch.
     */
    orderBy?: Oauth2UserOrderByWithRelationInput | Oauth2UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Oauth2Users.
     */
    cursor?: Oauth2UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oauth2Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oauth2Users.
     */
    skip?: number
    distinct?: Oauth2UserScalarFieldEnum | Oauth2UserScalarFieldEnum[]
  }

  /**
   * Oauth2User create
   */
  export type Oauth2UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * The data needed to create a Oauth2User.
     */
    data: XOR<Oauth2UserCreateInput, Oauth2UserUncheckedCreateInput>
  }

  /**
   * Oauth2User createMany
   */
  export type Oauth2UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Oauth2Users.
     */
    data: Oauth2UserCreateManyInput | Oauth2UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Oauth2User createManyAndReturn
   */
  export type Oauth2UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * The data used to create many Oauth2Users.
     */
    data: Oauth2UserCreateManyInput | Oauth2UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Oauth2User update
   */
  export type Oauth2UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * The data needed to update a Oauth2User.
     */
    data: XOR<Oauth2UserUpdateInput, Oauth2UserUncheckedUpdateInput>
    /**
     * Choose, which Oauth2User to update.
     */
    where: Oauth2UserWhereUniqueInput
  }

  /**
   * Oauth2User updateMany
   */
  export type Oauth2UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Oauth2Users.
     */
    data: XOR<Oauth2UserUpdateManyMutationInput, Oauth2UserUncheckedUpdateManyInput>
    /**
     * Filter which Oauth2Users to update
     */
    where?: Oauth2UserWhereInput
    /**
     * Limit how many Oauth2Users to update.
     */
    limit?: number
  }

  /**
   * Oauth2User updateManyAndReturn
   */
  export type Oauth2UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * The data used to update Oauth2Users.
     */
    data: XOR<Oauth2UserUpdateManyMutationInput, Oauth2UserUncheckedUpdateManyInput>
    /**
     * Filter which Oauth2Users to update
     */
    where?: Oauth2UserWhereInput
    /**
     * Limit how many Oauth2Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Oauth2User upsert
   */
  export type Oauth2UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * The filter to search for the Oauth2User to update in case it exists.
     */
    where: Oauth2UserWhereUniqueInput
    /**
     * In case the Oauth2User found by the `where` argument doesn't exist, create a new Oauth2User with this data.
     */
    create: XOR<Oauth2UserCreateInput, Oauth2UserUncheckedCreateInput>
    /**
     * In case the Oauth2User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Oauth2UserUpdateInput, Oauth2UserUncheckedUpdateInput>
  }

  /**
   * Oauth2User delete
   */
  export type Oauth2UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
    /**
     * Filter which Oauth2User to delete.
     */
    where: Oauth2UserWhereUniqueInput
  }

  /**
   * Oauth2User deleteMany
   */
  export type Oauth2UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oauth2Users to delete
     */
    where?: Oauth2UserWhereInput
    /**
     * Limit how many Oauth2Users to delete.
     */
    limit?: number
  }

  /**
   * Oauth2User without action
   */
  export type Oauth2UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oauth2User
     */
    select?: Oauth2UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Oauth2User
     */
    omit?: Oauth2UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Oauth2UserInclude<ExtArgs> | null
  }


  /**
   * Model CreditCard
   */

  export type AggregateCreditCard = {
    _count: CreditCardCountAggregateOutputType | null
    _min: CreditCardMinAggregateOutputType | null
    _max: CreditCardMaxAggregateOutputType | null
  }

  export type CreditCardMinAggregateOutputType = {
    id: string | null
    creditNumber: string | null
    expiredDate: Date | null
    ccvSecure: string | null
    name: string | null
    address: string | null
    postalCode: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditCardMaxAggregateOutputType = {
    id: string | null
    creditNumber: string | null
    expiredDate: Date | null
    ccvSecure: string | null
    name: string | null
    address: string | null
    postalCode: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditCardCountAggregateOutputType = {
    id: number
    creditNumber: number
    expiredDate: number
    ccvSecure: number
    name: number
    address: number
    postalCode: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CreditCardMinAggregateInputType = {
    id?: true
    creditNumber?: true
    expiredDate?: true
    ccvSecure?: true
    name?: true
    address?: true
    postalCode?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditCardMaxAggregateInputType = {
    id?: true
    creditNumber?: true
    expiredDate?: true
    ccvSecure?: true
    name?: true
    address?: true
    postalCode?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditCardCountAggregateInputType = {
    id?: true
    creditNumber?: true
    expiredDate?: true
    ccvSecure?: true
    name?: true
    address?: true
    postalCode?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CreditCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditCard to aggregate.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreditCards
    **/
    _count?: true | CreditCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditCardMaxAggregateInputType
  }

  export type GetCreditCardAggregateType<T extends CreditCardAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditCard[P]>
      : GetScalarType<T[P], AggregateCreditCard[P]>
  }




  export type CreditCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditCardWhereInput
    orderBy?: CreditCardOrderByWithAggregationInput | CreditCardOrderByWithAggregationInput[]
    by: CreditCardScalarFieldEnum[] | CreditCardScalarFieldEnum
    having?: CreditCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditCardCountAggregateInputType | true
    _min?: CreditCardMinAggregateInputType
    _max?: CreditCardMaxAggregateInputType
  }

  export type CreditCardGroupByOutputType = {
    id: string
    creditNumber: string
    expiredDate: Date
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: CreditCardCountAggregateOutputType | null
    _min: CreditCardMinAggregateOutputType | null
    _max: CreditCardMaxAggregateOutputType | null
  }

  type GetCreditCardGroupByPayload<T extends CreditCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditCardGroupByOutputType[P]>
            : GetScalarType<T[P], CreditCardGroupByOutputType[P]>
        }
      >
    >


  export type CreditCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creditNumber?: boolean
    expiredDate?: boolean
    ccvSecure?: boolean
    name?: boolean
    address?: boolean
    postalCode?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creditNumber?: boolean
    expiredDate?: boolean
    ccvSecure?: boolean
    name?: boolean
    address?: boolean
    postalCode?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creditNumber?: boolean
    expiredDate?: boolean
    ccvSecure?: boolean
    name?: boolean
    address?: boolean
    postalCode?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectScalar = {
    id?: boolean
    creditNumber?: boolean
    expiredDate?: boolean
    ccvSecure?: boolean
    name?: boolean
    address?: boolean
    postalCode?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CreditCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "creditNumber" | "expiredDate" | "ccvSecure" | "name" | "address" | "postalCode" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["creditCard"]>
  export type CreditCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CreditCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CreditCardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CreditCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreditCard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      creditNumber: string
      expiredDate: Date
      ccvSecure: string
      name: string
      address: string
      postalCode: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["creditCard"]>
    composites: {}
  }

  type CreditCardGetPayload<S extends boolean | null | undefined | CreditCardDefaultArgs> = $Result.GetResult<Prisma.$CreditCardPayload, S>

  type CreditCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CreditCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CreditCardCountAggregateInputType | true
    }

  export interface CreditCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreditCard'], meta: { name: 'CreditCard' } }
    /**
     * Find zero or one CreditCard that matches the filter.
     * @param {CreditCardFindUniqueArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditCardFindUniqueArgs>(args: SelectSubset<T, CreditCardFindUniqueArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CreditCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CreditCardFindUniqueOrThrowArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditCardFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CreditCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindFirstArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditCardFindFirstArgs>(args?: SelectSubset<T, CreditCardFindFirstArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CreditCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindFirstOrThrowArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditCardFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CreditCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditCards
     * const creditCards = await prisma.creditCard.findMany()
     * 
     * // Get first 10 CreditCards
     * const creditCards = await prisma.creditCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditCardFindManyArgs>(args?: SelectSubset<T, CreditCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CreditCard.
     * @param {CreditCardCreateArgs} args - Arguments to create a CreditCard.
     * @example
     * // Create one CreditCard
     * const CreditCard = await prisma.creditCard.create({
     *   data: {
     *     // ... data to create a CreditCard
     *   }
     * })
     * 
     */
    create<T extends CreditCardCreateArgs>(args: SelectSubset<T, CreditCardCreateArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CreditCards.
     * @param {CreditCardCreateManyArgs} args - Arguments to create many CreditCards.
     * @example
     * // Create many CreditCards
     * const creditCard = await prisma.creditCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditCardCreateManyArgs>(args?: SelectSubset<T, CreditCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CreditCards and returns the data saved in the database.
     * @param {CreditCardCreateManyAndReturnArgs} args - Arguments to create many CreditCards.
     * @example
     * // Create many CreditCards
     * const creditCard = await prisma.creditCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CreditCards and only return the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CreditCardCreateManyAndReturnArgs>(args?: SelectSubset<T, CreditCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CreditCard.
     * @param {CreditCardDeleteArgs} args - Arguments to delete one CreditCard.
     * @example
     * // Delete one CreditCard
     * const CreditCard = await prisma.creditCard.delete({
     *   where: {
     *     // ... filter to delete one CreditCard
     *   }
     * })
     * 
     */
    delete<T extends CreditCardDeleteArgs>(args: SelectSubset<T, CreditCardDeleteArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CreditCard.
     * @param {CreditCardUpdateArgs} args - Arguments to update one CreditCard.
     * @example
     * // Update one CreditCard
     * const creditCard = await prisma.creditCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditCardUpdateArgs>(args: SelectSubset<T, CreditCardUpdateArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CreditCards.
     * @param {CreditCardDeleteManyArgs} args - Arguments to filter CreditCards to delete.
     * @example
     * // Delete a few CreditCards
     * const { count } = await prisma.creditCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditCardDeleteManyArgs>(args?: SelectSubset<T, CreditCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditCards
     * const creditCard = await prisma.creditCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditCardUpdateManyArgs>(args: SelectSubset<T, CreditCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditCards and returns the data updated in the database.
     * @param {CreditCardUpdateManyAndReturnArgs} args - Arguments to update many CreditCards.
     * @example
     * // Update many CreditCards
     * const creditCard = await prisma.creditCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CreditCards and only return the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CreditCardUpdateManyAndReturnArgs>(args: SelectSubset<T, CreditCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CreditCard.
     * @param {CreditCardUpsertArgs} args - Arguments to update or create a CreditCard.
     * @example
     * // Update or create a CreditCard
     * const creditCard = await prisma.creditCard.upsert({
     *   create: {
     *     // ... data to create a CreditCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditCard we want to update
     *   }
     * })
     */
    upsert<T extends CreditCardUpsertArgs>(args: SelectSubset<T, CreditCardUpsertArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CreditCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardCountArgs} args - Arguments to filter CreditCards to count.
     * @example
     * // Count the number of CreditCards
     * const count = await prisma.creditCard.count({
     *   where: {
     *     // ... the filter for the CreditCards we want to count
     *   }
     * })
    **/
    count<T extends CreditCardCountArgs>(
      args?: Subset<T, CreditCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditCardAggregateArgs>(args: Subset<T, CreditCardAggregateArgs>): Prisma.PrismaPromise<GetCreditCardAggregateType<T>>

    /**
     * Group by CreditCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditCardGroupByArgs['orderBy'] }
        : { orderBy?: CreditCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreditCard model
   */
  readonly fields: CreditCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreditCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CreditCard model
   */
  interface CreditCardFieldRefs {
    readonly id: FieldRef<"CreditCard", 'String'>
    readonly creditNumber: FieldRef<"CreditCard", 'String'>
    readonly expiredDate: FieldRef<"CreditCard", 'DateTime'>
    readonly ccvSecure: FieldRef<"CreditCard", 'String'>
    readonly name: FieldRef<"CreditCard", 'String'>
    readonly address: FieldRef<"CreditCard", 'String'>
    readonly postalCode: FieldRef<"CreditCard", 'String'>
    readonly userId: FieldRef<"CreditCard", 'String'>
    readonly createdAt: FieldRef<"CreditCard", 'DateTime'>
    readonly updatedAt: FieldRef<"CreditCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CreditCard findUnique
   */
  export type CreditCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard findUniqueOrThrow
   */
  export type CreditCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard findFirst
   */
  export type CreditCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditCards.
     */
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard findFirstOrThrow
   */
  export type CreditCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditCards.
     */
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard findMany
   */
  export type CreditCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCards to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard create
   */
  export type CreditCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The data needed to create a CreditCard.
     */
    data: XOR<CreditCardCreateInput, CreditCardUncheckedCreateInput>
  }

  /**
   * CreditCard createMany
   */
  export type CreditCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreditCards.
     */
    data: CreditCardCreateManyInput | CreditCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CreditCard createManyAndReturn
   */
  export type CreditCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * The data used to create many CreditCards.
     */
    data: CreditCardCreateManyInput | CreditCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditCard update
   */
  export type CreditCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The data needed to update a CreditCard.
     */
    data: XOR<CreditCardUpdateInput, CreditCardUncheckedUpdateInput>
    /**
     * Choose, which CreditCard to update.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard updateMany
   */
  export type CreditCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreditCards.
     */
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyInput>
    /**
     * Filter which CreditCards to update
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to update.
     */
    limit?: number
  }

  /**
   * CreditCard updateManyAndReturn
   */
  export type CreditCardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * The data used to update CreditCards.
     */
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyInput>
    /**
     * Filter which CreditCards to update
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditCard upsert
   */
  export type CreditCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The filter to search for the CreditCard to update in case it exists.
     */
    where: CreditCardWhereUniqueInput
    /**
     * In case the CreditCard found by the `where` argument doesn't exist, create a new CreditCard with this data.
     */
    create: XOR<CreditCardCreateInput, CreditCardUncheckedCreateInput>
    /**
     * In case the CreditCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditCardUpdateInput, CreditCardUncheckedUpdateInput>
  }

  /**
   * CreditCard delete
   */
  export type CreditCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter which CreditCard to delete.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard deleteMany
   */
  export type CreditCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditCards to delete
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to delete.
     */
    limit?: number
  }

  /**
   * CreditCard without action
   */
  export type CreditCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SessionScalarFieldEnum: {
    id: 'id',
    hashingRefreshToken: 'hashingRefreshToken',
    userAgent: 'userAgent',
    userIp: 'userIp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    loginedAt: 'loginedAt',
    logoutedAt: 'logoutedAt',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    createdAt: 'createdAt',
    expiredAt: 'expiredAt',
    userId: 'userId'
  };

  export type CodeScalarFieldEnum = (typeof CodeScalarFieldEnum)[keyof typeof CodeScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parentId: 'parentId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    logoUrl: 'logoUrl',
    websiteUrl: 'websiteUrl',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const SpuScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    shortDesc: 'shortDesc',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categoryId: 'categoryId',
    brandId: 'brandId',
    shopId: 'shopId'
  };

  export type SpuScalarFieldEnum = (typeof SpuScalarFieldEnum)[keyof typeof SpuScalarFieldEnum]


  export const SkuScalarFieldEnum: {
    id: 'id',
    skuCode: 'skuCode',
    name: 'name',
    originalPrice: 'originalPrice',
    salePrice: 'salePrice',
    stock: 'stock',
    weight: 'weight',
    length: 'length',
    width: 'width',
    height: 'height',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    spuId: 'spuId'
  };

  export type SkuScalarFieldEnum = (typeof SkuScalarFieldEnum)[keyof typeof SkuScalarFieldEnum]


  export const SpuImageScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    altText: 'altText',
    sortOrder: 'sortOrder',
    isMain: 'isMain',
    createdAt: 'createdAt',
    spuId: 'spuId'
  };

  export type SpuImageScalarFieldEnum = (typeof SpuImageScalarFieldEnum)[keyof typeof SpuImageScalarFieldEnum]


  export const SkuImageScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    altText: 'altText',
    sortOrder: 'sortOrder',
    isMain: 'isMain',
    createdAt: 'createdAt',
    skuId: 'skuId'
  };

  export type SkuImageScalarFieldEnum = (typeof SkuImageScalarFieldEnum)[keyof typeof SkuImageScalarFieldEnum]


  export const AttributeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    type: 'type',
    isRequired: 'isRequired',
    isVariation: 'isVariation',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttributeScalarFieldEnum = (typeof AttributeScalarFieldEnum)[keyof typeof AttributeScalarFieldEnum]


  export const AttributeValueScalarFieldEnum: {
    id: 'id',
    value: 'value',
    displayName: 'displayName',
    colorCode: 'colorCode',
    imageUrl: 'imageUrl',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    attributeId: 'attributeId'
  };

  export type AttributeValueScalarFieldEnum = (typeof AttributeValueScalarFieldEnum)[keyof typeof AttributeValueScalarFieldEnum]


  export const SpuAttributeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    spuId: 'spuId',
    attributeId: 'attributeId',
    attributeValueId: 'attributeValueId'
  };

  export type SpuAttributeScalarFieldEnum = (typeof SpuAttributeScalarFieldEnum)[keyof typeof SpuAttributeScalarFieldEnum]


  export const SkuAttributeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    skuId: 'skuId',
    attributeId: 'attributeId',
    attributeValueId: 'attributeValueId'
  };

  export type SkuAttributeScalarFieldEnum = (typeof SkuAttributeScalarFieldEnum)[keyof typeof SkuAttributeScalarFieldEnum]


  export const SpuVariationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    spuId: 'spuId',
    attributeId: 'attributeId'
  };

  export type SpuVariationScalarFieldEnum = (typeof SpuVariationScalarFieldEnum)[keyof typeof SpuVariationScalarFieldEnum]


  export const SkuVariationValueScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    skuId: 'skuId',
    spuVariationId: 'spuVariationId',
    attributeValueId: 'attributeValueId'
  };

  export type SkuVariationValueScalarFieldEnum = (typeof SkuVariationValueScalarFieldEnum)[keyof typeof SkuVariationValueScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SpuTagScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    spuId: 'spuId',
    tagId: 'tagId'
  };

  export type SpuTagScalarFieldEnum = (typeof SpuTagScalarFieldEnum)[keyof typeof SpuTagScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    logoUrl: 'logoUrl',
    bannerUrl: 'bannerUrl',
    email: 'email',
    phone: 'phone',
    address: 'address',
    website: 'website',
    status: 'status',
    isActive: 'isActive',
    isVerified: 'isVerified',
    rating: 'rating',
    totalReviews: 'totalReviews',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    username: 'username',
    email: 'email',
    phone: 'phone',
    hashingPassword: 'hashingPassword',
    accountType: 'accountType',
    avatarUrl: 'avatarUrl',
    address: 'address',
    city: 'city',
    state: 'state',
    roles: 'roles',
    flags: 'flags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    visible: 'visible',
    isBanned: 'isBanned',
    isLocked: 'isLocked',
    isVerified: 'isVerified',
    lastActived: 'lastActived'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Oauth2UserScalarFieldEnum: {
    id: 'id',
    provider: 'provider',
    providerUserId: 'providerUserId',
    email: 'email',
    phone: 'phone',
    firstname: 'firstname',
    lastname: 'lastname',
    fullname: 'fullname',
    avatarUrl: 'avatarUrl',
    username: 'username',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type Oauth2UserScalarFieldEnum = (typeof Oauth2UserScalarFieldEnum)[keyof typeof Oauth2UserScalarFieldEnum]


  export const CreditCardScalarFieldEnum: {
    id: 'id',
    creditNumber: 'creditNumber',
    expiredDate: 'expiredDate',
    ccvSecure: 'ccvSecure',
    name: 'name',
    address: 'address',
    postalCode: 'postalCode',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CreditCardScalarFieldEnum = (typeof CreditCardScalarFieldEnum)[keyof typeof CreditCardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'SpuStatus'
   */
  export type EnumSpuStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SpuStatus'>
    


  /**
   * Reference to a field of type 'SpuStatus[]'
   */
  export type ListEnumSpuStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SpuStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'SkuStatus'
   */
  export type EnumSkuStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkuStatus'>
    


  /**
   * Reference to a field of type 'SkuStatus[]'
   */
  export type ListEnumSkuStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkuStatus[]'>
    


  /**
   * Reference to a field of type 'AttributeType'
   */
  export type EnumAttributeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttributeType'>
    


  /**
   * Reference to a field of type 'AttributeType[]'
   */
  export type ListEnumAttributeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttributeType[]'>
    


  /**
   * Reference to a field of type 'ShopStatus'
   */
  export type EnumShopStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShopStatus'>
    


  /**
   * Reference to a field of type 'ShopStatus[]'
   */
  export type ListEnumShopStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShopStatus[]'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    


  /**
   * Reference to a field of type 'AccountType[]'
   */
  export type ListEnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType[]'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserFlag[]'
   */
  export type ListEnumUserFlagFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserFlag[]'>
    


  /**
   * Reference to a field of type 'UserFlag'
   */
  export type EnumUserFlagFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserFlag'>
    


  /**
   * Reference to a field of type 'UserVisibility'
   */
  export type EnumUserVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserVisibility'>
    


  /**
   * Reference to a field of type 'UserVisibility[]'
   */
  export type ListEnumUserVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserVisibility[]'>
    


  /**
   * Reference to a field of type 'Provider'
   */
  export type EnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider'>
    


  /**
   * Reference to a field of type 'Provider[]'
   */
  export type ListEnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: UuidFilter<"Session"> | string
    hashingRefreshToken?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringFilter<"Session"> | string
    userIp?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    loginedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    logoutedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: UuidFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    hashingRefreshToken?: SortOrderInput | SortOrder
    userAgent?: SortOrder
    userIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginedAt?: SortOrderInput | SortOrder
    logoutedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    hashingRefreshToken?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringFilter<"Session"> | string
    userIp?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    loginedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    logoutedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: UuidFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    hashingRefreshToken?: SortOrderInput | SortOrder
    userAgent?: SortOrder
    userIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginedAt?: SortOrderInput | SortOrder
    logoutedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Session"> | string
    hashingRefreshToken?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringWithAggregatesFilter<"Session"> | string
    userIp?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    loginedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    logoutedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    userId?: UuidWithAggregatesFilter<"Session"> | string
  }

  export type CodeWhereInput = {
    AND?: CodeWhereInput | CodeWhereInput[]
    OR?: CodeWhereInput[]
    NOT?: CodeWhereInput | CodeWhereInput[]
    id?: UuidFilter<"Code"> | string
    code?: StringFilter<"Code"> | string
    createdAt?: DateTimeFilter<"Code"> | Date | string
    expiredAt?: DateTimeFilter<"Code"> | Date | string
    userId?: UuidFilter<"Code"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CodeWhereInput | CodeWhereInput[]
    OR?: CodeWhereInput[]
    NOT?: CodeWhereInput | CodeWhereInput[]
    code?: StringFilter<"Code"> | string
    createdAt?: DateTimeFilter<"Code"> | Date | string
    expiredAt?: DateTimeFilter<"Code"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    userId?: SortOrder
    _count?: CodeCountOrderByAggregateInput
    _max?: CodeMaxOrderByAggregateInput
    _min?: CodeMinOrderByAggregateInput
  }

  export type CodeScalarWhereWithAggregatesInput = {
    AND?: CodeScalarWhereWithAggregatesInput | CodeScalarWhereWithAggregatesInput[]
    OR?: CodeScalarWhereWithAggregatesInput[]
    NOT?: CodeScalarWhereWithAggregatesInput | CodeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Code"> | string
    code?: StringWithAggregatesFilter<"Code"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Code"> | Date | string
    expiredAt?: DateTimeWithAggregatesFilter<"Code"> | Date | string
    userId?: UuidWithAggregatesFilter<"Code"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: UuidFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    imageUrl?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    sortOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: UuidNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    spus?: SpuListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    spus?: SpuOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    imageUrl?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    sortOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: UuidNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    spus?: SpuListRelationFilter
  }, "id" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Category"> | string | null
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Category"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    parentId?: UuidNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: UuidFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    description?: StringNullableFilter<"Brand"> | string | null
    logoUrl?: StringNullableFilter<"Brand"> | string | null
    websiteUrl?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    spus?: SpuListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spus?: SpuOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    description?: StringNullableFilter<"Brand"> | string | null
    logoUrl?: StringNullableFilter<"Brand"> | string | null
    websiteUrl?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    spus?: SpuListRelationFilter
  }, "id" | "name" | "slug">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Brand"> | string
    name?: StringWithAggregatesFilter<"Brand"> | string
    slug?: StringWithAggregatesFilter<"Brand"> | string
    description?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    isActive?: BoolWithAggregatesFilter<"Brand"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
  }

  export type SpuWhereInput = {
    AND?: SpuWhereInput | SpuWhereInput[]
    OR?: SpuWhereInput[]
    NOT?: SpuWhereInput | SpuWhereInput[]
    id?: UuidFilter<"Spu"> | string
    name?: StringFilter<"Spu"> | string
    slug?: StringFilter<"Spu"> | string
    description?: StringNullableFilter<"Spu"> | string | null
    shortDesc?: StringNullableFilter<"Spu"> | string | null
    status?: EnumSpuStatusFilter<"Spu"> | $Enums.SpuStatus
    isActive?: BoolFilter<"Spu"> | boolean
    createdAt?: DateTimeFilter<"Spu"> | Date | string
    updatedAt?: DateTimeFilter<"Spu"> | Date | string
    categoryId?: UuidFilter<"Spu"> | string
    brandId?: UuidFilter<"Spu"> | string
    shopId?: UuidFilter<"Spu"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    shop?: XOR<ShopScalarRelationFilter, ShopWhereInput>
    skus?: SkuListRelationFilter
    spuImages?: SpuImageListRelationFilter
    spuAttributes?: SpuAttributeListRelationFilter
    spuTags?: SpuTagListRelationFilter
    spuVariations?: SpuVariationListRelationFilter
  }

  export type SpuOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDesc?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    brandId?: SortOrder
    shopId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
    shop?: ShopOrderByWithRelationInput
    skus?: SkuOrderByRelationAggregateInput
    spuImages?: SpuImageOrderByRelationAggregateInput
    spuAttributes?: SpuAttributeOrderByRelationAggregateInput
    spuTags?: SpuTagOrderByRelationAggregateInput
    spuVariations?: SpuVariationOrderByRelationAggregateInput
  }

  export type SpuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: SpuWhereInput | SpuWhereInput[]
    OR?: SpuWhereInput[]
    NOT?: SpuWhereInput | SpuWhereInput[]
    name?: StringFilter<"Spu"> | string
    description?: StringNullableFilter<"Spu"> | string | null
    shortDesc?: StringNullableFilter<"Spu"> | string | null
    status?: EnumSpuStatusFilter<"Spu"> | $Enums.SpuStatus
    isActive?: BoolFilter<"Spu"> | boolean
    createdAt?: DateTimeFilter<"Spu"> | Date | string
    updatedAt?: DateTimeFilter<"Spu"> | Date | string
    categoryId?: UuidFilter<"Spu"> | string
    brandId?: UuidFilter<"Spu"> | string
    shopId?: UuidFilter<"Spu"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    shop?: XOR<ShopScalarRelationFilter, ShopWhereInput>
    skus?: SkuListRelationFilter
    spuImages?: SpuImageListRelationFilter
    spuAttributes?: SpuAttributeListRelationFilter
    spuTags?: SpuTagListRelationFilter
    spuVariations?: SpuVariationListRelationFilter
  }, "id" | "slug">

  export type SpuOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDesc?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    brandId?: SortOrder
    shopId?: SortOrder
    _count?: SpuCountOrderByAggregateInput
    _max?: SpuMaxOrderByAggregateInput
    _min?: SpuMinOrderByAggregateInput
  }

  export type SpuScalarWhereWithAggregatesInput = {
    AND?: SpuScalarWhereWithAggregatesInput | SpuScalarWhereWithAggregatesInput[]
    OR?: SpuScalarWhereWithAggregatesInput[]
    NOT?: SpuScalarWhereWithAggregatesInput | SpuScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Spu"> | string
    name?: StringWithAggregatesFilter<"Spu"> | string
    slug?: StringWithAggregatesFilter<"Spu"> | string
    description?: StringNullableWithAggregatesFilter<"Spu"> | string | null
    shortDesc?: StringNullableWithAggregatesFilter<"Spu"> | string | null
    status?: EnumSpuStatusWithAggregatesFilter<"Spu"> | $Enums.SpuStatus
    isActive?: BoolWithAggregatesFilter<"Spu"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Spu"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Spu"> | Date | string
    categoryId?: UuidWithAggregatesFilter<"Spu"> | string
    brandId?: UuidWithAggregatesFilter<"Spu"> | string
    shopId?: UuidWithAggregatesFilter<"Spu"> | string
  }

  export type SkuWhereInput = {
    AND?: SkuWhereInput | SkuWhereInput[]
    OR?: SkuWhereInput[]
    NOT?: SkuWhereInput | SkuWhereInput[]
    id?: UuidFilter<"Sku"> | string
    skuCode?: StringFilter<"Sku"> | string
    name?: StringFilter<"Sku"> | string
    originalPrice?: DecimalFilter<"Sku"> | Decimal | DecimalJsLike | number | string
    salePrice?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    stock?: IntFilter<"Sku"> | number
    weight?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    length?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    width?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFilter<"Sku"> | $Enums.SkuStatus
    isActive?: BoolFilter<"Sku"> | boolean
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
    spuId?: UuidFilter<"Sku"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    skuImages?: SkuImageListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    skuVariationValues?: SkuVariationValueListRelationFilter
  }

  export type SkuOrderByWithRelationInput = {
    id?: SortOrder
    skuCode?: SortOrder
    name?: SortOrder
    originalPrice?: SortOrder
    salePrice?: SortOrderInput | SortOrder
    stock?: SortOrder
    weight?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuId?: SortOrder
    spu?: SpuOrderByWithRelationInput
    skuImages?: SkuImageOrderByRelationAggregateInput
    skuAttributes?: SkuAttributeOrderByRelationAggregateInput
    skuVariationValues?: SkuVariationValueOrderByRelationAggregateInput
  }

  export type SkuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    skuCode?: string
    AND?: SkuWhereInput | SkuWhereInput[]
    OR?: SkuWhereInput[]
    NOT?: SkuWhereInput | SkuWhereInput[]
    name?: StringFilter<"Sku"> | string
    originalPrice?: DecimalFilter<"Sku"> | Decimal | DecimalJsLike | number | string
    salePrice?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    stock?: IntFilter<"Sku"> | number
    weight?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    length?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    width?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFilter<"Sku"> | $Enums.SkuStatus
    isActive?: BoolFilter<"Sku"> | boolean
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
    spuId?: UuidFilter<"Sku"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    skuImages?: SkuImageListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    skuVariationValues?: SkuVariationValueListRelationFilter
  }, "id" | "skuCode">

  export type SkuOrderByWithAggregationInput = {
    id?: SortOrder
    skuCode?: SortOrder
    name?: SortOrder
    originalPrice?: SortOrder
    salePrice?: SortOrderInput | SortOrder
    stock?: SortOrder
    weight?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuId?: SortOrder
    _count?: SkuCountOrderByAggregateInput
    _avg?: SkuAvgOrderByAggregateInput
    _max?: SkuMaxOrderByAggregateInput
    _min?: SkuMinOrderByAggregateInput
    _sum?: SkuSumOrderByAggregateInput
  }

  export type SkuScalarWhereWithAggregatesInput = {
    AND?: SkuScalarWhereWithAggregatesInput | SkuScalarWhereWithAggregatesInput[]
    OR?: SkuScalarWhereWithAggregatesInput[]
    NOT?: SkuScalarWhereWithAggregatesInput | SkuScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Sku"> | string
    skuCode?: StringWithAggregatesFilter<"Sku"> | string
    name?: StringWithAggregatesFilter<"Sku"> | string
    originalPrice?: DecimalWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string
    salePrice?: DecimalNullableWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    stock?: IntWithAggregatesFilter<"Sku"> | number
    weight?: DecimalNullableWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    length?: DecimalNullableWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    width?: DecimalNullableWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableWithAggregatesFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusWithAggregatesFilter<"Sku"> | $Enums.SkuStatus
    isActive?: BoolWithAggregatesFilter<"Sku"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Sku"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sku"> | Date | string
    spuId?: UuidWithAggregatesFilter<"Sku"> | string
  }

  export type SpuImageWhereInput = {
    AND?: SpuImageWhereInput | SpuImageWhereInput[]
    OR?: SpuImageWhereInput[]
    NOT?: SpuImageWhereInput | SpuImageWhereInput[]
    id?: UuidFilter<"SpuImage"> | string
    imageUrl?: StringFilter<"SpuImage"> | string
    altText?: StringNullableFilter<"SpuImage"> | string | null
    sortOrder?: IntFilter<"SpuImage"> | number
    isMain?: BoolFilter<"SpuImage"> | boolean
    createdAt?: DateTimeFilter<"SpuImage"> | Date | string
    spuId?: UuidFilter<"SpuImage"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
  }

  export type SpuImageOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    spu?: SpuOrderByWithRelationInput
  }

  export type SpuImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SpuImageWhereInput | SpuImageWhereInput[]
    OR?: SpuImageWhereInput[]
    NOT?: SpuImageWhereInput | SpuImageWhereInput[]
    imageUrl?: StringFilter<"SpuImage"> | string
    altText?: StringNullableFilter<"SpuImage"> | string | null
    sortOrder?: IntFilter<"SpuImage"> | number
    isMain?: BoolFilter<"SpuImage"> | boolean
    createdAt?: DateTimeFilter<"SpuImage"> | Date | string
    spuId?: UuidFilter<"SpuImage"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
  }, "id">

  export type SpuImageOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    _count?: SpuImageCountOrderByAggregateInput
    _avg?: SpuImageAvgOrderByAggregateInput
    _max?: SpuImageMaxOrderByAggregateInput
    _min?: SpuImageMinOrderByAggregateInput
    _sum?: SpuImageSumOrderByAggregateInput
  }

  export type SpuImageScalarWhereWithAggregatesInput = {
    AND?: SpuImageScalarWhereWithAggregatesInput | SpuImageScalarWhereWithAggregatesInput[]
    OR?: SpuImageScalarWhereWithAggregatesInput[]
    NOT?: SpuImageScalarWhereWithAggregatesInput | SpuImageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SpuImage"> | string
    imageUrl?: StringWithAggregatesFilter<"SpuImage"> | string
    altText?: StringNullableWithAggregatesFilter<"SpuImage"> | string | null
    sortOrder?: IntWithAggregatesFilter<"SpuImage"> | number
    isMain?: BoolWithAggregatesFilter<"SpuImage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SpuImage"> | Date | string
    spuId?: UuidWithAggregatesFilter<"SpuImage"> | string
  }

  export type SkuImageWhereInput = {
    AND?: SkuImageWhereInput | SkuImageWhereInput[]
    OR?: SkuImageWhereInput[]
    NOT?: SkuImageWhereInput | SkuImageWhereInput[]
    id?: UuidFilter<"SkuImage"> | string
    imageUrl?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    sortOrder?: IntFilter<"SkuImage"> | number
    isMain?: BoolFilter<"SkuImage"> | boolean
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
    skuId?: UuidFilter<"SkuImage"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
  }

  export type SkuImageOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    sku?: SkuOrderByWithRelationInput
  }

  export type SkuImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SkuImageWhereInput | SkuImageWhereInput[]
    OR?: SkuImageWhereInput[]
    NOT?: SkuImageWhereInput | SkuImageWhereInput[]
    imageUrl?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    sortOrder?: IntFilter<"SkuImage"> | number
    isMain?: BoolFilter<"SkuImage"> | boolean
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
    skuId?: UuidFilter<"SkuImage"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
  }, "id">

  export type SkuImageOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    _count?: SkuImageCountOrderByAggregateInput
    _avg?: SkuImageAvgOrderByAggregateInput
    _max?: SkuImageMaxOrderByAggregateInput
    _min?: SkuImageMinOrderByAggregateInput
    _sum?: SkuImageSumOrderByAggregateInput
  }

  export type SkuImageScalarWhereWithAggregatesInput = {
    AND?: SkuImageScalarWhereWithAggregatesInput | SkuImageScalarWhereWithAggregatesInput[]
    OR?: SkuImageScalarWhereWithAggregatesInput[]
    NOT?: SkuImageScalarWhereWithAggregatesInput | SkuImageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SkuImage"> | string
    imageUrl?: StringWithAggregatesFilter<"SkuImage"> | string
    altText?: StringNullableWithAggregatesFilter<"SkuImage"> | string | null
    sortOrder?: IntWithAggregatesFilter<"SkuImage"> | number
    isMain?: BoolWithAggregatesFilter<"SkuImage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SkuImage"> | Date | string
    skuId?: UuidWithAggregatesFilter<"SkuImage"> | string
  }

  export type AttributeWhereInput = {
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    id?: UuidFilter<"Attribute"> | string
    name?: StringFilter<"Attribute"> | string
    displayName?: StringFilter<"Attribute"> | string
    type?: EnumAttributeTypeFilter<"Attribute"> | $Enums.AttributeType
    isRequired?: BoolFilter<"Attribute"> | boolean
    isVariation?: BoolFilter<"Attribute"> | boolean
    sortOrder?: IntFilter<"Attribute"> | number
    isActive?: BoolFilter<"Attribute"> | boolean
    createdAt?: DateTimeFilter<"Attribute"> | Date | string
    updatedAt?: DateTimeFilter<"Attribute"> | Date | string
    spuAttributes?: SpuAttributeListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    attributeValues?: AttributeValueListRelationFilter
    spuVariations?: SpuVariationListRelationFilter
  }

  export type AttributeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    isVariation?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuAttributes?: SpuAttributeOrderByRelationAggregateInput
    skuAttributes?: SkuAttributeOrderByRelationAggregateInput
    attributeValues?: AttributeValueOrderByRelationAggregateInput
    spuVariations?: SpuVariationOrderByRelationAggregateInput
  }

  export type AttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    displayName?: StringFilter<"Attribute"> | string
    type?: EnumAttributeTypeFilter<"Attribute"> | $Enums.AttributeType
    isRequired?: BoolFilter<"Attribute"> | boolean
    isVariation?: BoolFilter<"Attribute"> | boolean
    sortOrder?: IntFilter<"Attribute"> | number
    isActive?: BoolFilter<"Attribute"> | boolean
    createdAt?: DateTimeFilter<"Attribute"> | Date | string
    updatedAt?: DateTimeFilter<"Attribute"> | Date | string
    spuAttributes?: SpuAttributeListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    attributeValues?: AttributeValueListRelationFilter
    spuVariations?: SpuVariationListRelationFilter
  }, "id" | "name">

  export type AttributeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    isVariation?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttributeCountOrderByAggregateInput
    _avg?: AttributeAvgOrderByAggregateInput
    _max?: AttributeMaxOrderByAggregateInput
    _min?: AttributeMinOrderByAggregateInput
    _sum?: AttributeSumOrderByAggregateInput
  }

  export type AttributeScalarWhereWithAggregatesInput = {
    AND?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    OR?: AttributeScalarWhereWithAggregatesInput[]
    NOT?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Attribute"> | string
    name?: StringWithAggregatesFilter<"Attribute"> | string
    displayName?: StringWithAggregatesFilter<"Attribute"> | string
    type?: EnumAttributeTypeWithAggregatesFilter<"Attribute"> | $Enums.AttributeType
    isRequired?: BoolWithAggregatesFilter<"Attribute"> | boolean
    isVariation?: BoolWithAggregatesFilter<"Attribute"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Attribute"> | number
    isActive?: BoolWithAggregatesFilter<"Attribute"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Attribute"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Attribute"> | Date | string
  }

  export type AttributeValueWhereInput = {
    AND?: AttributeValueWhereInput | AttributeValueWhereInput[]
    OR?: AttributeValueWhereInput[]
    NOT?: AttributeValueWhereInput | AttributeValueWhereInput[]
    id?: UuidFilter<"AttributeValue"> | string
    value?: StringFilter<"AttributeValue"> | string
    displayName?: StringNullableFilter<"AttributeValue"> | string | null
    colorCode?: StringNullableFilter<"AttributeValue"> | string | null
    imageUrl?: StringNullableFilter<"AttributeValue"> | string | null
    sortOrder?: IntFilter<"AttributeValue"> | number
    isActive?: BoolFilter<"AttributeValue"> | boolean
    createdAt?: DateTimeFilter<"AttributeValue"> | Date | string
    updatedAt?: DateTimeFilter<"AttributeValue"> | Date | string
    attributeId?: UuidFilter<"AttributeValue"> | string
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    spuAttributes?: SpuAttributeListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    skuVariationValues?: SkuVariationValueListRelationFilter
  }

  export type AttributeValueOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    displayName?: SortOrderInput | SortOrder
    colorCode?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributeId?: SortOrder
    attribute?: AttributeOrderByWithRelationInput
    spuAttributes?: SpuAttributeOrderByRelationAggregateInput
    skuAttributes?: SkuAttributeOrderByRelationAggregateInput
    skuVariationValues?: SkuVariationValueOrderByRelationAggregateInput
  }

  export type AttributeValueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    attributeId_value?: AttributeValueAttributeIdValueCompoundUniqueInput
    AND?: AttributeValueWhereInput | AttributeValueWhereInput[]
    OR?: AttributeValueWhereInput[]
    NOT?: AttributeValueWhereInput | AttributeValueWhereInput[]
    value?: StringFilter<"AttributeValue"> | string
    displayName?: StringNullableFilter<"AttributeValue"> | string | null
    colorCode?: StringNullableFilter<"AttributeValue"> | string | null
    imageUrl?: StringNullableFilter<"AttributeValue"> | string | null
    sortOrder?: IntFilter<"AttributeValue"> | number
    isActive?: BoolFilter<"AttributeValue"> | boolean
    createdAt?: DateTimeFilter<"AttributeValue"> | Date | string
    updatedAt?: DateTimeFilter<"AttributeValue"> | Date | string
    attributeId?: UuidFilter<"AttributeValue"> | string
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    spuAttributes?: SpuAttributeListRelationFilter
    skuAttributes?: SkuAttributeListRelationFilter
    skuVariationValues?: SkuVariationValueListRelationFilter
  }, "id" | "attributeId_value">

  export type AttributeValueOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    displayName?: SortOrderInput | SortOrder
    colorCode?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributeId?: SortOrder
    _count?: AttributeValueCountOrderByAggregateInput
    _avg?: AttributeValueAvgOrderByAggregateInput
    _max?: AttributeValueMaxOrderByAggregateInput
    _min?: AttributeValueMinOrderByAggregateInput
    _sum?: AttributeValueSumOrderByAggregateInput
  }

  export type AttributeValueScalarWhereWithAggregatesInput = {
    AND?: AttributeValueScalarWhereWithAggregatesInput | AttributeValueScalarWhereWithAggregatesInput[]
    OR?: AttributeValueScalarWhereWithAggregatesInput[]
    NOT?: AttributeValueScalarWhereWithAggregatesInput | AttributeValueScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AttributeValue"> | string
    value?: StringWithAggregatesFilter<"AttributeValue"> | string
    displayName?: StringNullableWithAggregatesFilter<"AttributeValue"> | string | null
    colorCode?: StringNullableWithAggregatesFilter<"AttributeValue"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"AttributeValue"> | string | null
    sortOrder?: IntWithAggregatesFilter<"AttributeValue"> | number
    isActive?: BoolWithAggregatesFilter<"AttributeValue"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AttributeValue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttributeValue"> | Date | string
    attributeId?: UuidWithAggregatesFilter<"AttributeValue"> | string
  }

  export type SpuAttributeWhereInput = {
    AND?: SpuAttributeWhereInput | SpuAttributeWhereInput[]
    OR?: SpuAttributeWhereInput[]
    NOT?: SpuAttributeWhereInput | SpuAttributeWhereInput[]
    id?: UuidFilter<"SpuAttribute"> | string
    createdAt?: DateTimeFilter<"SpuAttribute"> | Date | string
    spuId?: UuidFilter<"SpuAttribute"> | string
    attributeId?: UuidFilter<"SpuAttribute"> | string
    attributeValueId?: UuidFilter<"SpuAttribute"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }

  export type SpuAttributeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
    spu?: SpuOrderByWithRelationInput
    attribute?: AttributeOrderByWithRelationInput
    attributeValue?: AttributeValueOrderByWithRelationInput
  }

  export type SpuAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spuId_attributeId?: SpuAttributeSpuIdAttributeIdCompoundUniqueInput
    AND?: SpuAttributeWhereInput | SpuAttributeWhereInput[]
    OR?: SpuAttributeWhereInput[]
    NOT?: SpuAttributeWhereInput | SpuAttributeWhereInput[]
    createdAt?: DateTimeFilter<"SpuAttribute"> | Date | string
    spuId?: UuidFilter<"SpuAttribute"> | string
    attributeId?: UuidFilter<"SpuAttribute"> | string
    attributeValueId?: UuidFilter<"SpuAttribute"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }, "id" | "spuId_attributeId">

  export type SpuAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
    _count?: SpuAttributeCountOrderByAggregateInput
    _max?: SpuAttributeMaxOrderByAggregateInput
    _min?: SpuAttributeMinOrderByAggregateInput
  }

  export type SpuAttributeScalarWhereWithAggregatesInput = {
    AND?: SpuAttributeScalarWhereWithAggregatesInput | SpuAttributeScalarWhereWithAggregatesInput[]
    OR?: SpuAttributeScalarWhereWithAggregatesInput[]
    NOT?: SpuAttributeScalarWhereWithAggregatesInput | SpuAttributeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SpuAttribute"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SpuAttribute"> | Date | string
    spuId?: UuidWithAggregatesFilter<"SpuAttribute"> | string
    attributeId?: UuidWithAggregatesFilter<"SpuAttribute"> | string
    attributeValueId?: UuidWithAggregatesFilter<"SpuAttribute"> | string
  }

  export type SkuAttributeWhereInput = {
    AND?: SkuAttributeWhereInput | SkuAttributeWhereInput[]
    OR?: SkuAttributeWhereInput[]
    NOT?: SkuAttributeWhereInput | SkuAttributeWhereInput[]
    id?: UuidFilter<"SkuAttribute"> | string
    createdAt?: DateTimeFilter<"SkuAttribute"> | Date | string
    skuId?: UuidFilter<"SkuAttribute"> | string
    attributeId?: UuidFilter<"SkuAttribute"> | string
    attributeValueId?: UuidFilter<"SkuAttribute"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }

  export type SkuAttributeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
    sku?: SkuOrderByWithRelationInput
    attribute?: AttributeOrderByWithRelationInput
    attributeValue?: AttributeValueOrderByWithRelationInput
  }

  export type SkuAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    skuId_attributeId?: SkuAttributeSkuIdAttributeIdCompoundUniqueInput
    AND?: SkuAttributeWhereInput | SkuAttributeWhereInput[]
    OR?: SkuAttributeWhereInput[]
    NOT?: SkuAttributeWhereInput | SkuAttributeWhereInput[]
    createdAt?: DateTimeFilter<"SkuAttribute"> | Date | string
    skuId?: UuidFilter<"SkuAttribute"> | string
    attributeId?: UuidFilter<"SkuAttribute"> | string
    attributeValueId?: UuidFilter<"SkuAttribute"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }, "id" | "skuId_attributeId">

  export type SkuAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
    _count?: SkuAttributeCountOrderByAggregateInput
    _max?: SkuAttributeMaxOrderByAggregateInput
    _min?: SkuAttributeMinOrderByAggregateInput
  }

  export type SkuAttributeScalarWhereWithAggregatesInput = {
    AND?: SkuAttributeScalarWhereWithAggregatesInput | SkuAttributeScalarWhereWithAggregatesInput[]
    OR?: SkuAttributeScalarWhereWithAggregatesInput[]
    NOT?: SkuAttributeScalarWhereWithAggregatesInput | SkuAttributeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SkuAttribute"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SkuAttribute"> | Date | string
    skuId?: UuidWithAggregatesFilter<"SkuAttribute"> | string
    attributeId?: UuidWithAggregatesFilter<"SkuAttribute"> | string
    attributeValueId?: UuidWithAggregatesFilter<"SkuAttribute"> | string
  }

  export type SpuVariationWhereInput = {
    AND?: SpuVariationWhereInput | SpuVariationWhereInput[]
    OR?: SpuVariationWhereInput[]
    NOT?: SpuVariationWhereInput | SpuVariationWhereInput[]
    id?: UuidFilter<"SpuVariation"> | string
    name?: StringFilter<"SpuVariation"> | string
    sortOrder?: IntFilter<"SpuVariation"> | number
    createdAt?: DateTimeFilter<"SpuVariation"> | Date | string
    spuId?: UuidFilter<"SpuVariation"> | string
    attributeId?: UuidFilter<"SpuVariation"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    skuVariationValues?: SkuVariationValueListRelationFilter
  }

  export type SpuVariationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    spu?: SpuOrderByWithRelationInput
    attribute?: AttributeOrderByWithRelationInput
    skuVariationValues?: SkuVariationValueOrderByRelationAggregateInput
  }

  export type SpuVariationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spuId_attributeId?: SpuVariationSpuIdAttributeIdCompoundUniqueInput
    AND?: SpuVariationWhereInput | SpuVariationWhereInput[]
    OR?: SpuVariationWhereInput[]
    NOT?: SpuVariationWhereInput | SpuVariationWhereInput[]
    name?: StringFilter<"SpuVariation"> | string
    sortOrder?: IntFilter<"SpuVariation"> | number
    createdAt?: DateTimeFilter<"SpuVariation"> | Date | string
    spuId?: UuidFilter<"SpuVariation"> | string
    attributeId?: UuidFilter<"SpuVariation"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    attribute?: XOR<AttributeScalarRelationFilter, AttributeWhereInput>
    skuVariationValues?: SkuVariationValueListRelationFilter
  }, "id" | "spuId_attributeId">

  export type SpuVariationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    _count?: SpuVariationCountOrderByAggregateInput
    _avg?: SpuVariationAvgOrderByAggregateInput
    _max?: SpuVariationMaxOrderByAggregateInput
    _min?: SpuVariationMinOrderByAggregateInput
    _sum?: SpuVariationSumOrderByAggregateInput
  }

  export type SpuVariationScalarWhereWithAggregatesInput = {
    AND?: SpuVariationScalarWhereWithAggregatesInput | SpuVariationScalarWhereWithAggregatesInput[]
    OR?: SpuVariationScalarWhereWithAggregatesInput[]
    NOT?: SpuVariationScalarWhereWithAggregatesInput | SpuVariationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SpuVariation"> | string
    name?: StringWithAggregatesFilter<"SpuVariation"> | string
    sortOrder?: IntWithAggregatesFilter<"SpuVariation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SpuVariation"> | Date | string
    spuId?: UuidWithAggregatesFilter<"SpuVariation"> | string
    attributeId?: UuidWithAggregatesFilter<"SpuVariation"> | string
  }

  export type SkuVariationValueWhereInput = {
    AND?: SkuVariationValueWhereInput | SkuVariationValueWhereInput[]
    OR?: SkuVariationValueWhereInput[]
    NOT?: SkuVariationValueWhereInput | SkuVariationValueWhereInput[]
    id?: UuidFilter<"SkuVariationValue"> | string
    createdAt?: DateTimeFilter<"SkuVariationValue"> | Date | string
    skuId?: UuidFilter<"SkuVariationValue"> | string
    spuVariationId?: UuidFilter<"SkuVariationValue"> | string
    attributeValueId?: UuidFilter<"SkuVariationValue"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    spuVariation?: XOR<SpuVariationScalarRelationFilter, SpuVariationWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }

  export type SkuVariationValueOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    spuVariationId?: SortOrder
    attributeValueId?: SortOrder
    sku?: SkuOrderByWithRelationInput
    spuVariation?: SpuVariationOrderByWithRelationInput
    attributeValue?: AttributeValueOrderByWithRelationInput
  }

  export type SkuVariationValueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    skuId_spuVariationId?: SkuVariationValueSkuIdSpuVariationIdCompoundUniqueInput
    AND?: SkuVariationValueWhereInput | SkuVariationValueWhereInput[]
    OR?: SkuVariationValueWhereInput[]
    NOT?: SkuVariationValueWhereInput | SkuVariationValueWhereInput[]
    createdAt?: DateTimeFilter<"SkuVariationValue"> | Date | string
    skuId?: UuidFilter<"SkuVariationValue"> | string
    spuVariationId?: UuidFilter<"SkuVariationValue"> | string
    attributeValueId?: UuidFilter<"SkuVariationValue"> | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    spuVariation?: XOR<SpuVariationScalarRelationFilter, SpuVariationWhereInput>
    attributeValue?: XOR<AttributeValueScalarRelationFilter, AttributeValueWhereInput>
  }, "id" | "skuId_spuVariationId">

  export type SkuVariationValueOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    spuVariationId?: SortOrder
    attributeValueId?: SortOrder
    _count?: SkuVariationValueCountOrderByAggregateInput
    _max?: SkuVariationValueMaxOrderByAggregateInput
    _min?: SkuVariationValueMinOrderByAggregateInput
  }

  export type SkuVariationValueScalarWhereWithAggregatesInput = {
    AND?: SkuVariationValueScalarWhereWithAggregatesInput | SkuVariationValueScalarWhereWithAggregatesInput[]
    OR?: SkuVariationValueScalarWhereWithAggregatesInput[]
    NOT?: SkuVariationValueScalarWhereWithAggregatesInput | SkuVariationValueScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SkuVariationValue"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SkuVariationValue"> | Date | string
    skuId?: UuidWithAggregatesFilter<"SkuVariationValue"> | string
    spuVariationId?: UuidWithAggregatesFilter<"SkuVariationValue"> | string
    attributeValueId?: UuidWithAggregatesFilter<"SkuVariationValue"> | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: UuidFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    slug?: StringFilter<"Tag"> | string
    color?: StringNullableFilter<"Tag"> | string | null
    isActive?: BoolFilter<"Tag"> | boolean
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    spuTags?: SpuTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuTags?: SpuTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    color?: StringNullableFilter<"Tag"> | string | null
    isActive?: BoolFilter<"Tag"> | boolean
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    spuTags?: SpuTagListRelationFilter
  }, "id" | "name" | "slug">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    slug?: StringWithAggregatesFilter<"Tag"> | string
    color?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    isActive?: BoolWithAggregatesFilter<"Tag"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type SpuTagWhereInput = {
    AND?: SpuTagWhereInput | SpuTagWhereInput[]
    OR?: SpuTagWhereInput[]
    NOT?: SpuTagWhereInput | SpuTagWhereInput[]
    id?: UuidFilter<"SpuTag"> | string
    createdAt?: DateTimeFilter<"SpuTag"> | Date | string
    spuId?: UuidFilter<"SpuTag"> | string
    tagId?: UuidFilter<"SpuTag"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type SpuTagOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    tagId?: SortOrder
    spu?: SpuOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type SpuTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    spuId_tagId?: SpuTagSpuIdTagIdCompoundUniqueInput
    AND?: SpuTagWhereInput | SpuTagWhereInput[]
    OR?: SpuTagWhereInput[]
    NOT?: SpuTagWhereInput | SpuTagWhereInput[]
    createdAt?: DateTimeFilter<"SpuTag"> | Date | string
    spuId?: UuidFilter<"SpuTag"> | string
    tagId?: UuidFilter<"SpuTag"> | string
    spu?: XOR<SpuScalarRelationFilter, SpuWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "spuId_tagId">

  export type SpuTagOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    tagId?: SortOrder
    _count?: SpuTagCountOrderByAggregateInput
    _max?: SpuTagMaxOrderByAggregateInput
    _min?: SpuTagMinOrderByAggregateInput
  }

  export type SpuTagScalarWhereWithAggregatesInput = {
    AND?: SpuTagScalarWhereWithAggregatesInput | SpuTagScalarWhereWithAggregatesInput[]
    OR?: SpuTagScalarWhereWithAggregatesInput[]
    NOT?: SpuTagScalarWhereWithAggregatesInput | SpuTagScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SpuTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SpuTag"> | Date | string
    spuId?: UuidWithAggregatesFilter<"SpuTag"> | string
    tagId?: UuidWithAggregatesFilter<"SpuTag"> | string
  }

  export type ShopWhereInput = {
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    id?: UuidFilter<"Shop"> | string
    name?: StringFilter<"Shop"> | string
    slug?: StringFilter<"Shop"> | string
    description?: StringNullableFilter<"Shop"> | string | null
    logoUrl?: StringNullableFilter<"Shop"> | string | null
    bannerUrl?: StringNullableFilter<"Shop"> | string | null
    email?: StringNullableFilter<"Shop"> | string | null
    phone?: StringNullableFilter<"Shop"> | string | null
    address?: StringNullableFilter<"Shop"> | string | null
    website?: StringNullableFilter<"Shop"> | string | null
    status?: EnumShopStatusFilter<"Shop"> | $Enums.ShopStatus
    isActive?: BoolFilter<"Shop"> | boolean
    isVerified?: BoolFilter<"Shop"> | boolean
    rating?: DecimalNullableFilter<"Shop"> | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFilter<"Shop"> | number
    createdAt?: DateTimeFilter<"Shop"> | Date | string
    updatedAt?: DateTimeFilter<"Shop"> | Date | string
    ownerId?: UuidFilter<"Shop"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    spus?: SpuListRelationFilter
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    rating?: SortOrderInput | SortOrder
    totalReviews?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    spus?: SpuOrderByRelationAggregateInput
  }

  export type ShopWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    name?: StringFilter<"Shop"> | string
    description?: StringNullableFilter<"Shop"> | string | null
    logoUrl?: StringNullableFilter<"Shop"> | string | null
    bannerUrl?: StringNullableFilter<"Shop"> | string | null
    email?: StringNullableFilter<"Shop"> | string | null
    phone?: StringNullableFilter<"Shop"> | string | null
    address?: StringNullableFilter<"Shop"> | string | null
    website?: StringNullableFilter<"Shop"> | string | null
    status?: EnumShopStatusFilter<"Shop"> | $Enums.ShopStatus
    isActive?: BoolFilter<"Shop"> | boolean
    isVerified?: BoolFilter<"Shop"> | boolean
    rating?: DecimalNullableFilter<"Shop"> | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFilter<"Shop"> | number
    createdAt?: DateTimeFilter<"Shop"> | Date | string
    updatedAt?: DateTimeFilter<"Shop"> | Date | string
    ownerId?: UuidFilter<"Shop"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    spus?: SpuListRelationFilter
  }, "id" | "slug">

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    rating?: SortOrderInput | SortOrder
    totalReviews?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    OR?: ShopScalarWhereWithAggregatesInput[]
    NOT?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Shop"> | string
    name?: StringWithAggregatesFilter<"Shop"> | string
    slug?: StringWithAggregatesFilter<"Shop"> | string
    description?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    bannerUrl?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    email?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    address?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    website?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    status?: EnumShopStatusWithAggregatesFilter<"Shop"> | $Enums.ShopStatus
    isActive?: BoolWithAggregatesFilter<"Shop"> | boolean
    isVerified?: BoolWithAggregatesFilter<"Shop"> | boolean
    rating?: DecimalNullableWithAggregatesFilter<"Shop"> | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntWithAggregatesFilter<"Shop"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Shop"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shop"> | Date | string
    ownerId?: UuidWithAggregatesFilter<"Shop"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    fullname?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    hashingPassword?: StringNullableFilter<"User"> | string | null
    accountType?: EnumAccountTypeFilter<"User"> | $Enums.AccountType
    avatarUrl?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    roles?: EnumUserRoleNullableListFilter<"User">
    flags?: EnumUserFlagNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    visible?: EnumUserVisibilityFilter<"User"> | $Enums.UserVisibility
    isBanned?: BoolFilter<"User"> | boolean
    isLocked?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    lastActived?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    codes?: XOR<CodeNullableScalarRelationFilter, CodeWhereInput> | null
    Oauth2User?: Oauth2UserListRelationFilter
    shops?: ShopListRelationFilter
    CreditCard?: CreditCardListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    hashingPassword?: SortOrderInput | SortOrder
    accountType?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    roles?: SortOrder
    flags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    visible?: SortOrder
    isBanned?: SortOrder
    isLocked?: SortOrder
    isVerified?: SortOrder
    lastActived?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    codes?: CodeOrderByWithRelationInput
    Oauth2User?: Oauth2UserOrderByRelationAggregateInput
    shops?: ShopOrderByRelationAggregateInput
    CreditCard?: CreditCardOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullname?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    hashingPassword?: StringNullableFilter<"User"> | string | null
    accountType?: EnumAccountTypeFilter<"User"> | $Enums.AccountType
    avatarUrl?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    roles?: EnumUserRoleNullableListFilter<"User">
    flags?: EnumUserFlagNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    visible?: EnumUserVisibilityFilter<"User"> | $Enums.UserVisibility
    isBanned?: BoolFilter<"User"> | boolean
    isLocked?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    lastActived?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    codes?: XOR<CodeNullableScalarRelationFilter, CodeWhereInput> | null
    Oauth2User?: Oauth2UserListRelationFilter
    shops?: ShopListRelationFilter
    CreditCard?: CreditCardListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    hashingPassword?: SortOrderInput | SortOrder
    accountType?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    roles?: SortOrder
    flags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    visible?: SortOrder
    isBanned?: SortOrder
    isLocked?: SortOrder
    isVerified?: SortOrder
    lastActived?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    fullname?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    hashingPassword?: StringNullableWithAggregatesFilter<"User"> | string | null
    accountType?: EnumAccountTypeWithAggregatesFilter<"User"> | $Enums.AccountType
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    state?: StringNullableWithAggregatesFilter<"User"> | string | null
    roles?: EnumUserRoleNullableListFilter<"User">
    flags?: EnumUserFlagNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    visible?: EnumUserVisibilityWithAggregatesFilter<"User"> | $Enums.UserVisibility
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
    isLocked?: BoolWithAggregatesFilter<"User"> | boolean
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    lastActived?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type Oauth2UserWhereInput = {
    AND?: Oauth2UserWhereInput | Oauth2UserWhereInput[]
    OR?: Oauth2UserWhereInput[]
    NOT?: Oauth2UserWhereInput | Oauth2UserWhereInput[]
    id?: UuidFilter<"Oauth2User"> | string
    provider?: EnumProviderFilter<"Oauth2User"> | $Enums.Provider
    providerUserId?: StringFilter<"Oauth2User"> | string
    email?: StringFilter<"Oauth2User"> | string
    phone?: StringNullableFilter<"Oauth2User"> | string | null
    firstname?: StringNullableFilter<"Oauth2User"> | string | null
    lastname?: StringNullableFilter<"Oauth2User"> | string | null
    fullname?: StringNullableFilter<"Oauth2User"> | string | null
    avatarUrl?: StringNullableFilter<"Oauth2User"> | string | null
    username?: StringNullableFilter<"Oauth2User"> | string | null
    createdAt?: DateTimeFilter<"Oauth2User"> | Date | string
    updatedAt?: DateTimeFilter<"Oauth2User"> | Date | string
    userId?: UuidFilter<"Oauth2User"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type Oauth2UserOrderByWithRelationInput = {
    id?: SortOrder
    provider?: SortOrder
    providerUserId?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    fullname?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type Oauth2UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: Oauth2UserWhereInput | Oauth2UserWhereInput[]
    OR?: Oauth2UserWhereInput[]
    NOT?: Oauth2UserWhereInput | Oauth2UserWhereInput[]
    provider?: EnumProviderFilter<"Oauth2User"> | $Enums.Provider
    providerUserId?: StringFilter<"Oauth2User"> | string
    phone?: StringNullableFilter<"Oauth2User"> | string | null
    firstname?: StringNullableFilter<"Oauth2User"> | string | null
    lastname?: StringNullableFilter<"Oauth2User"> | string | null
    fullname?: StringNullableFilter<"Oauth2User"> | string | null
    avatarUrl?: StringNullableFilter<"Oauth2User"> | string | null
    username?: StringNullableFilter<"Oauth2User"> | string | null
    createdAt?: DateTimeFilter<"Oauth2User"> | Date | string
    updatedAt?: DateTimeFilter<"Oauth2User"> | Date | string
    userId?: UuidFilter<"Oauth2User"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "email">

  export type Oauth2UserOrderByWithAggregationInput = {
    id?: SortOrder
    provider?: SortOrder
    providerUserId?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    firstname?: SortOrderInput | SortOrder
    lastname?: SortOrderInput | SortOrder
    fullname?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: Oauth2UserCountOrderByAggregateInput
    _max?: Oauth2UserMaxOrderByAggregateInput
    _min?: Oauth2UserMinOrderByAggregateInput
  }

  export type Oauth2UserScalarWhereWithAggregatesInput = {
    AND?: Oauth2UserScalarWhereWithAggregatesInput | Oauth2UserScalarWhereWithAggregatesInput[]
    OR?: Oauth2UserScalarWhereWithAggregatesInput[]
    NOT?: Oauth2UserScalarWhereWithAggregatesInput | Oauth2UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Oauth2User"> | string
    provider?: EnumProviderWithAggregatesFilter<"Oauth2User"> | $Enums.Provider
    providerUserId?: StringWithAggregatesFilter<"Oauth2User"> | string
    email?: StringWithAggregatesFilter<"Oauth2User"> | string
    phone?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    firstname?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    lastname?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    fullname?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    username?: StringNullableWithAggregatesFilter<"Oauth2User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Oauth2User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Oauth2User"> | Date | string
    userId?: UuidWithAggregatesFilter<"Oauth2User"> | string
  }

  export type CreditCardWhereInput = {
    AND?: CreditCardWhereInput | CreditCardWhereInput[]
    OR?: CreditCardWhereInput[]
    NOT?: CreditCardWhereInput | CreditCardWhereInput[]
    id?: UuidFilter<"CreditCard"> | string
    creditNumber?: StringFilter<"CreditCard"> | string
    expiredDate?: DateTimeFilter<"CreditCard"> | Date | string
    ccvSecure?: StringFilter<"CreditCard"> | string
    name?: StringFilter<"CreditCard"> | string
    address?: StringFilter<"CreditCard"> | string
    postalCode?: StringFilter<"CreditCard"> | string
    userId?: UuidFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CreditCardOrderByWithRelationInput = {
    id?: SortOrder
    creditNumber?: SortOrder
    expiredDate?: SortOrder
    ccvSecure?: SortOrder
    name?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CreditCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    creditNumber?: string
    AND?: CreditCardWhereInput | CreditCardWhereInput[]
    OR?: CreditCardWhereInput[]
    NOT?: CreditCardWhereInput | CreditCardWhereInput[]
    expiredDate?: DateTimeFilter<"CreditCard"> | Date | string
    ccvSecure?: StringFilter<"CreditCard"> | string
    name?: StringFilter<"CreditCard"> | string
    address?: StringFilter<"CreditCard"> | string
    postalCode?: StringFilter<"CreditCard"> | string
    userId?: UuidFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "creditNumber">

  export type CreditCardOrderByWithAggregationInput = {
    id?: SortOrder
    creditNumber?: SortOrder
    expiredDate?: SortOrder
    ccvSecure?: SortOrder
    name?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CreditCardCountOrderByAggregateInput
    _max?: CreditCardMaxOrderByAggregateInput
    _min?: CreditCardMinOrderByAggregateInput
  }

  export type CreditCardScalarWhereWithAggregatesInput = {
    AND?: CreditCardScalarWhereWithAggregatesInput | CreditCardScalarWhereWithAggregatesInput[]
    OR?: CreditCardScalarWhereWithAggregatesInput[]
    NOT?: CreditCardScalarWhereWithAggregatesInput | CreditCardScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CreditCard"> | string
    creditNumber?: StringWithAggregatesFilter<"CreditCard"> | string
    expiredDate?: DateTimeWithAggregatesFilter<"CreditCard"> | Date | string
    ccvSecure?: StringWithAggregatesFilter<"CreditCard"> | string
    name?: StringWithAggregatesFilter<"CreditCard"> | string
    address?: StringWithAggregatesFilter<"CreditCard"> | string
    postalCode?: StringWithAggregatesFilter<"CreditCard"> | string
    userId?: UuidWithAggregatesFilter<"CreditCard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CreditCard"> | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CodeCreateInput = {
    id?: string
    code: string
    createdAt?: Date | string
    expiredAt: Date | string
    user: UserCreateNestedOneWithoutCodesInput
  }

  export type CodeUncheckedCreateInput = {
    id?: string
    code: string
    createdAt?: Date | string
    expiredAt: Date | string
    userId: string
  }

  export type CodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCodesNestedInput
  }

  export type CodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CodeCreateManyInput = {
    id?: string
    code: string
    createdAt?: Date | string
    expiredAt: Date | string
    userId: string
  }

  export type CodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    spus?: SpuCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    spus?: SpuUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    spus?: SpuUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    spus?: SpuUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    websiteUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spus?: SpuCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    websiteUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spus?: SpuUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spus?: SpuUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spus?: SpuUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    websiteUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SpuCreateManyInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
  }

  export type SpuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuCreateInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spu: SpuCreateNestedOneWithoutSkusInput
    skuImages?: SkuImageCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuId: string
    skuImages?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSkusNestedInput
    skuImages?: SkuImageUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    skuImages?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SkuCreateManyInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuId: string
  }

  export type SkuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuImageCreateInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuImagesInput
  }

  export type SpuImageUncheckedCreateInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    spuId: string
  }

  export type SpuImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuImagesNestedInput
  }

  export type SpuImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuImageCreateManyInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    spuId: string
  }

  export type SpuImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuImageCreateInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuImagesInput
  }

  export type SkuImageUncheckedCreateInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    skuId: string
  }

  export type SkuImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuImagesNestedInput
  }

  export type SkuImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuImageCreateManyInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
    skuId: string
  }

  export type SkuImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeCreateInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueUncheckedCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUncheckedUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeCreateManyInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttributeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttributeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttributeValueCreateInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutAttributeValuesInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUncheckedCreateInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attributeId: string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutAttributeValuesNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueCreateManyInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attributeId: string
  }

  export type AttributeValueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttributeValueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeCreateInput = {
    id?: string
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuAttributesInput
    attribute: AttributeCreateNestedOneWithoutSpuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSpuAttributesInput
  }

  export type SpuAttributeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeId: string
    attributeValueId: string
  }

  export type SpuAttributeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuAttributesNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSpuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSpuAttributesNestedInput
  }

  export type SpuAttributeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeId: string
    attributeValueId: string
  }

  export type SpuAttributeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuAttributeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeCreateInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuAttributesInput
    attribute: AttributeCreateNestedOneWithoutSkuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuAttributesInput
  }

  export type SkuAttributeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeId: string
    attributeValueId: string
  }

  export type SkuAttributeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuAttributesNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSkuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuAttributesNestedInput
  }

  export type SkuAttributeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeId: string
    attributeValueId: string
  }

  export type SkuAttributeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuAttributeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuVariationCreateInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuVariationsInput
    attribute: AttributeCreateNestedOneWithoutSpuVariationsInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationUncheckedCreateInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spuId: string
    attributeId: string
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuVariationsNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSpuVariationsNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationCreateManyInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spuId: string
    attributeId: string
  }

  export type SpuVariationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuVariationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueCreateInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuVariationValuesInput
    spuVariation: SpuVariationCreateNestedOneWithoutSkuVariationValuesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuVariationValuesInput
  }

  export type SkuVariationValueUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    spuVariationId: string
    attributeValueId: string
  }

  export type SkuVariationValueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuVariationValuesNestedInput
    spuVariation?: SpuVariationUpdateOneRequiredWithoutSkuVariationValuesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuVariationValuesNestedInput
  }

  export type SkuVariationValueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueCreateManyInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    spuVariationId: string
    attributeValueId: string
  }

  export type SkuVariationValueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuVariationValueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    slug: string
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuTags?: SpuTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuTags?: SpuTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuTags?: SpuTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    slug: string
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuTagCreateInput = {
    id?: string
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuTagsInput
    tag: TagCreateNestedOneWithoutSpuTagsInput
  }

  export type SpuTagUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    tagId: string
  }

  export type SpuTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutSpuTagsNestedInput
  }

  export type SpuTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuTagCreateManyInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    tagId: string
  }

  export type SpuTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ShopCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutShopsInput
    spus?: SpuCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    spus?: SpuUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutShopsNestedInput
    spus?: SpuUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    spus?: SpuUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopCreateManyInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type ShopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    codes?: CodeCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserCreateNestedManyWithoutUserInput
    shops?: ShopCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    codes?: CodeUncheckedCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserUncheckedCreateNestedManyWithoutUserInput
    shops?: ShopUncheckedCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    codes?: CodeUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUpdateManyWithoutUserNestedInput
    shops?: ShopUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    codes?: CodeUncheckedUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUncheckedUpdateManyWithoutUserNestedInput
    shops?: ShopUncheckedUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Oauth2UserCreateInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOauth2UserInput
  }

  export type Oauth2UserUncheckedCreateInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type Oauth2UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOauth2UserNestedInput
  }

  export type Oauth2UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type Oauth2UserCreateManyInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type Oauth2UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Oauth2UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CreditCardCreateInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCreditCardInput
  }

  export type CreditCardUncheckedCreateInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCreditCardNestedInput
  }

  export type CreditCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardCreateManyInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    hashingRefreshToken?: SortOrder
    userAgent?: SortOrder
    userIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginedAt?: SortOrder
    logoutedAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    hashingRefreshToken?: SortOrder
    userAgent?: SortOrder
    userIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginedAt?: SortOrder
    logoutedAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    hashingRefreshToken?: SortOrder
    userAgent?: SortOrder
    userIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginedAt?: SortOrder
    logoutedAt?: SortOrder
    userId?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    userId?: SortOrder
  }

  export type CodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    userId?: SortOrder
  }

  export type CodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type SpuListRelationFilter = {
    every?: SpuWhereInput
    some?: SpuWhereInput
    none?: SpuWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    websiteUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    websiteUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    websiteUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSpuStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SpuStatus | EnumSpuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSpuStatusFilter<$PrismaModel> | $Enums.SpuStatus
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type ShopScalarRelationFilter = {
    is?: ShopWhereInput
    isNot?: ShopWhereInput
  }

  export type SkuListRelationFilter = {
    every?: SkuWhereInput
    some?: SkuWhereInput
    none?: SkuWhereInput
  }

  export type SpuImageListRelationFilter = {
    every?: SpuImageWhereInput
    some?: SpuImageWhereInput
    none?: SpuImageWhereInput
  }

  export type SpuAttributeListRelationFilter = {
    every?: SpuAttributeWhereInput
    some?: SpuAttributeWhereInput
    none?: SpuAttributeWhereInput
  }

  export type SpuTagListRelationFilter = {
    every?: SpuTagWhereInput
    some?: SpuTagWhereInput
    none?: SpuTagWhereInput
  }

  export type SpuVariationListRelationFilter = {
    every?: SpuVariationWhereInput
    some?: SpuVariationWhereInput
    none?: SpuVariationWhereInput
  }

  export type SkuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuVariationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpuCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    shortDesc?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    brandId?: SortOrder
    shopId?: SortOrder
  }

  export type SpuMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    shortDesc?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    brandId?: SortOrder
    shopId?: SortOrder
  }

  export type SpuMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    shortDesc?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    brandId?: SortOrder
    shopId?: SortOrder
  }

  export type EnumSpuStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SpuStatus | EnumSpuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSpuStatusWithAggregatesFilter<$PrismaModel> | $Enums.SpuStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSpuStatusFilter<$PrismaModel>
    _max?: NestedEnumSpuStatusFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumSkuStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SkuStatus | EnumSkuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSkuStatusFilter<$PrismaModel> | $Enums.SkuStatus
  }

  export type SpuScalarRelationFilter = {
    is?: SpuWhereInput
    isNot?: SpuWhereInput
  }

  export type SkuImageListRelationFilter = {
    every?: SkuImageWhereInput
    some?: SkuImageWhereInput
    none?: SkuImageWhereInput
  }

  export type SkuAttributeListRelationFilter = {
    every?: SkuAttributeWhereInput
    some?: SkuAttributeWhereInput
    none?: SkuAttributeWhereInput
  }

  export type SkuVariationValueListRelationFilter = {
    every?: SkuVariationValueWhereInput
    some?: SkuVariationValueWhereInput
    none?: SkuVariationValueWhereInput
  }

  export type SkuImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuVariationValueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuCountOrderByAggregateInput = {
    id?: SortOrder
    skuCode?: SortOrder
    name?: SortOrder
    originalPrice?: SortOrder
    salePrice?: SortOrder
    stock?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuId?: SortOrder
  }

  export type SkuAvgOrderByAggregateInput = {
    originalPrice?: SortOrder
    salePrice?: SortOrder
    stock?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type SkuMaxOrderByAggregateInput = {
    id?: SortOrder
    skuCode?: SortOrder
    name?: SortOrder
    originalPrice?: SortOrder
    salePrice?: SortOrder
    stock?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuId?: SortOrder
  }

  export type SkuMinOrderByAggregateInput = {
    id?: SortOrder
    skuCode?: SortOrder
    name?: SortOrder
    originalPrice?: SortOrder
    salePrice?: SortOrder
    stock?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spuId?: SortOrder
  }

  export type SkuSumOrderByAggregateInput = {
    originalPrice?: SortOrder
    salePrice?: SortOrder
    stock?: SortOrder
    weight?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumSkuStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkuStatus | EnumSkuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSkuStatusWithAggregatesFilter<$PrismaModel> | $Enums.SkuStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkuStatusFilter<$PrismaModel>
    _max?: NestedEnumSkuStatusFilter<$PrismaModel>
  }

  export type SpuImageCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
  }

  export type SpuImageAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SpuImageMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
  }

  export type SpuImageMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
  }

  export type SpuImageSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SkuScalarRelationFilter = {
    is?: SkuWhereInput
    isNot?: SkuWhereInput
  }

  export type SkuImageCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
  }

  export type SkuImageAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SkuImageMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
  }

  export type SkuImageMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    altText?: SortOrder
    sortOrder?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
  }

  export type SkuImageSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type EnumAttributeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AttributeType | EnumAttributeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttributeTypeFilter<$PrismaModel> | $Enums.AttributeType
  }

  export type AttributeValueListRelationFilter = {
    every?: AttributeValueWhereInput
    some?: AttributeValueWhereInput
    none?: AttributeValueWhereInput
  }

  export type AttributeValueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttributeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    isVariation?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttributeAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    isVariation?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttributeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    isVariation?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttributeSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type EnumAttributeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttributeType | EnumAttributeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttributeTypeWithAggregatesFilter<$PrismaModel> | $Enums.AttributeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttributeTypeFilter<$PrismaModel>
    _max?: NestedEnumAttributeTypeFilter<$PrismaModel>
  }

  export type AttributeScalarRelationFilter = {
    is?: AttributeWhereInput
    isNot?: AttributeWhereInput
  }

  export type AttributeValueAttributeIdValueCompoundUniqueInput = {
    attributeId: string
    value: string
  }

  export type AttributeValueCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    displayName?: SortOrder
    colorCode?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributeId?: SortOrder
  }

  export type AttributeValueAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AttributeValueMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    displayName?: SortOrder
    colorCode?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributeId?: SortOrder
  }

  export type AttributeValueMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    displayName?: SortOrder
    colorCode?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributeId?: SortOrder
  }

  export type AttributeValueSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AttributeValueScalarRelationFilter = {
    is?: AttributeValueWhereInput
    isNot?: AttributeValueWhereInput
  }

  export type SpuAttributeSpuIdAttributeIdCompoundUniqueInput = {
    spuId: string
    attributeId: string
  }

  export type SpuAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SpuAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SpuAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SkuAttributeSkuIdAttributeIdCompoundUniqueInput = {
    skuId: string
    attributeId: string
  }

  export type SkuAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SkuAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SkuAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    attributeId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SpuVariationSpuIdAttributeIdCompoundUniqueInput = {
    spuId: string
    attributeId: string
  }

  export type SpuVariationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
  }

  export type SpuVariationAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SpuVariationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
  }

  export type SpuVariationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    attributeId?: SortOrder
  }

  export type SpuVariationSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SpuVariationScalarRelationFilter = {
    is?: SpuVariationWhereInput
    isNot?: SpuVariationWhereInput
  }

  export type SkuVariationValueSkuIdSpuVariationIdCompoundUniqueInput = {
    skuId: string
    spuVariationId: string
  }

  export type SkuVariationValueCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    spuVariationId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SkuVariationValueMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    spuVariationId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type SkuVariationValueMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    skuId?: SortOrder
    spuVariationId?: SortOrder
    attributeValueId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type SpuTagSpuIdTagIdCompoundUniqueInput = {
    spuId: string
    tagId: string
  }

  export type SpuTagCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    tagId?: SortOrder
  }

  export type SpuTagMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    tagId?: SortOrder
  }

  export type SpuTagMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    spuId?: SortOrder
    tagId?: SortOrder
  }

  export type EnumShopStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShopStatus | EnumShopStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShopStatusFilter<$PrismaModel> | $Enums.ShopStatus
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    bannerUrl?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    rating?: SortOrder
    totalReviews?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    rating?: SortOrder
    totalReviews?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    bannerUrl?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    rating?: SortOrder
    totalReviews?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    bannerUrl?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    rating?: SortOrder
    totalReviews?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    rating?: SortOrder
    totalReviews?: SortOrder
  }

  export type EnumShopStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShopStatus | EnumShopStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShopStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShopStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShopStatusFilter<$PrismaModel>
    _max?: NestedEnumShopStatusFilter<$PrismaModel>
  }

  export type EnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type EnumUserRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumUserFlagNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.UserFlag[] | ListEnumUserFlagFieldRefInput<$PrismaModel> | null
    has?: $Enums.UserFlag | EnumUserFlagFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.UserFlag[] | ListEnumUserFlagFieldRefInput<$PrismaModel>
    hasSome?: $Enums.UserFlag[] | ListEnumUserFlagFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumUserVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.UserVisibility | EnumUserVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumUserVisibilityFilter<$PrismaModel> | $Enums.UserVisibility
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type CodeNullableScalarRelationFilter = {
    is?: CodeWhereInput | null
    isNot?: CodeWhereInput | null
  }

  export type Oauth2UserListRelationFilter = {
    every?: Oauth2UserWhereInput
    some?: Oauth2UserWhereInput
    none?: Oauth2UserWhereInput
  }

  export type ShopListRelationFilter = {
    every?: ShopWhereInput
    some?: ShopWhereInput
    none?: ShopWhereInput
  }

  export type CreditCardListRelationFilter = {
    every?: CreditCardWhereInput
    some?: CreditCardWhereInput
    none?: CreditCardWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Oauth2UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CreditCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashingPassword?: SortOrder
    accountType?: SortOrder
    avatarUrl?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    roles?: SortOrder
    flags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    visible?: SortOrder
    isBanned?: SortOrder
    isLocked?: SortOrder
    isVerified?: SortOrder
    lastActived?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashingPassword?: SortOrder
    accountType?: SortOrder
    avatarUrl?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    visible?: SortOrder
    isBanned?: SortOrder
    isLocked?: SortOrder
    isVerified?: SortOrder
    lastActived?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashingPassword?: SortOrder
    accountType?: SortOrder
    avatarUrl?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    visible?: SortOrder
    isBanned?: SortOrder
    isLocked?: SortOrder
    isVerified?: SortOrder
    lastActived?: SortOrder
  }

  export type EnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type EnumUserVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserVisibility | EnumUserVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumUserVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.UserVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserVisibilityFilter<$PrismaModel>
    _max?: NestedEnumUserVisibilityFilter<$PrismaModel>
  }

  export type EnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type Oauth2UserCountOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerUserId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    fullname?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type Oauth2UserMaxOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerUserId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    fullname?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type Oauth2UserMinOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerUserId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    fullname?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type CreditCardCountOrderByAggregateInput = {
    id?: SortOrder
    creditNumber?: SortOrder
    expiredDate?: SortOrder
    ccvSecure?: SortOrder
    name?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditCardMaxOrderByAggregateInput = {
    id?: SortOrder
    creditNumber?: SortOrder
    expiredDate?: SortOrder
    ccvSecure?: SortOrder
    name?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditCardMinOrderByAggregateInput = {
    id?: SortOrder
    creditNumber?: SortOrder
    expiredDate?: SortOrder
    ccvSecure?: SortOrder
    name?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutCodesInput = {
    create?: XOR<UserCreateWithoutCodesInput, UserUncheckedCreateWithoutCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCodesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCodesNestedInput = {
    create?: XOR<UserCreateWithoutCodesInput, UserUncheckedCreateWithoutCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCodesInput
    upsert?: UserUpsertWithoutCodesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCodesInput, UserUpdateWithoutCodesInput>, UserUncheckedUpdateWithoutCodesInput>
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SpuCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput> | SpuCreateWithoutCategoryInput[] | SpuUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutCategoryInput | SpuCreateOrConnectWithoutCategoryInput[]
    createMany?: SpuCreateManyCategoryInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SpuUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput> | SpuCreateWithoutCategoryInput[] | SpuUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutCategoryInput | SpuCreateOrConnectWithoutCategoryInput[]
    createMany?: SpuCreateManyCategoryInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SpuUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput> | SpuCreateWithoutCategoryInput[] | SpuUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutCategoryInput | SpuCreateOrConnectWithoutCategoryInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutCategoryInput | SpuUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SpuCreateManyCategoryInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutCategoryInput | SpuUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutCategoryInput | SpuUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SpuUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput> | SpuCreateWithoutCategoryInput[] | SpuUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutCategoryInput | SpuCreateOrConnectWithoutCategoryInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutCategoryInput | SpuUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SpuCreateManyCategoryInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutCategoryInput | SpuUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutCategoryInput | SpuUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type SpuCreateNestedManyWithoutBrandInput = {
    create?: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput> | SpuCreateWithoutBrandInput[] | SpuUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutBrandInput | SpuCreateOrConnectWithoutBrandInput[]
    createMany?: SpuCreateManyBrandInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type SpuUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput> | SpuCreateWithoutBrandInput[] | SpuUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutBrandInput | SpuCreateOrConnectWithoutBrandInput[]
    createMany?: SpuCreateManyBrandInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type SpuUpdateManyWithoutBrandNestedInput = {
    create?: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput> | SpuCreateWithoutBrandInput[] | SpuUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutBrandInput | SpuCreateOrConnectWithoutBrandInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutBrandInput | SpuUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: SpuCreateManyBrandInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutBrandInput | SpuUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutBrandInput | SpuUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type SpuUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput> | SpuCreateWithoutBrandInput[] | SpuUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutBrandInput | SpuCreateOrConnectWithoutBrandInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutBrandInput | SpuUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: SpuCreateManyBrandInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutBrandInput | SpuUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutBrandInput | SpuUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutSpusInput = {
    create?: XOR<CategoryCreateWithoutSpusInput, CategoryUncheckedCreateWithoutSpusInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSpusInput
    connect?: CategoryWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutSpusInput = {
    create?: XOR<BrandCreateWithoutSpusInput, BrandUncheckedCreateWithoutSpusInput>
    connectOrCreate?: BrandCreateOrConnectWithoutSpusInput
    connect?: BrandWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutSpusInput = {
    create?: XOR<ShopCreateWithoutSpusInput, ShopUncheckedCreateWithoutSpusInput>
    connectOrCreate?: ShopCreateOrConnectWithoutSpusInput
    connect?: ShopWhereUniqueInput
  }

  export type SkuCreateNestedManyWithoutSpuInput = {
    create?: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput> | SkuCreateWithoutSpuInput[] | SkuUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutSpuInput | SkuCreateOrConnectWithoutSpuInput[]
    createMany?: SkuCreateManySpuInputEnvelope
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
  }

  export type SpuImageCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput> | SpuImageCreateWithoutSpuInput[] | SpuImageUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuImageCreateOrConnectWithoutSpuInput | SpuImageCreateOrConnectWithoutSpuInput[]
    createMany?: SpuImageCreateManySpuInputEnvelope
    connect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
  }

  export type SpuAttributeCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput> | SpuAttributeCreateWithoutSpuInput[] | SpuAttributeUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutSpuInput | SpuAttributeCreateOrConnectWithoutSpuInput[]
    createMany?: SpuAttributeCreateManySpuInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SpuTagCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput> | SpuTagCreateWithoutSpuInput[] | SpuTagUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutSpuInput | SpuTagCreateOrConnectWithoutSpuInput[]
    createMany?: SpuTagCreateManySpuInputEnvelope
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
  }

  export type SpuVariationCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput> | SpuVariationCreateWithoutSpuInput[] | SpuVariationUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSpuInput | SpuVariationCreateOrConnectWithoutSpuInput[]
    createMany?: SpuVariationCreateManySpuInputEnvelope
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
  }

  export type SkuUncheckedCreateNestedManyWithoutSpuInput = {
    create?: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput> | SkuCreateWithoutSpuInput[] | SkuUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutSpuInput | SkuCreateOrConnectWithoutSpuInput[]
    createMany?: SkuCreateManySpuInputEnvelope
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
  }

  export type SpuImageUncheckedCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput> | SpuImageCreateWithoutSpuInput[] | SpuImageUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuImageCreateOrConnectWithoutSpuInput | SpuImageCreateOrConnectWithoutSpuInput[]
    createMany?: SpuImageCreateManySpuInputEnvelope
    connect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
  }

  export type SpuAttributeUncheckedCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput> | SpuAttributeCreateWithoutSpuInput[] | SpuAttributeUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutSpuInput | SpuAttributeCreateOrConnectWithoutSpuInput[]
    createMany?: SpuAttributeCreateManySpuInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SpuTagUncheckedCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput> | SpuTagCreateWithoutSpuInput[] | SpuTagUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutSpuInput | SpuTagCreateOrConnectWithoutSpuInput[]
    createMany?: SpuTagCreateManySpuInputEnvelope
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
  }

  export type SpuVariationUncheckedCreateNestedManyWithoutSpuInput = {
    create?: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput> | SpuVariationCreateWithoutSpuInput[] | SpuVariationUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSpuInput | SpuVariationCreateOrConnectWithoutSpuInput[]
    createMany?: SpuVariationCreateManySpuInputEnvelope
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
  }

  export type EnumSpuStatusFieldUpdateOperationsInput = {
    set?: $Enums.SpuStatus
  }

  export type CategoryUpdateOneRequiredWithoutSpusNestedInput = {
    create?: XOR<CategoryCreateWithoutSpusInput, CategoryUncheckedCreateWithoutSpusInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSpusInput
    upsert?: CategoryUpsertWithoutSpusInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSpusInput, CategoryUpdateWithoutSpusInput>, CategoryUncheckedUpdateWithoutSpusInput>
  }

  export type BrandUpdateOneRequiredWithoutSpusNestedInput = {
    create?: XOR<BrandCreateWithoutSpusInput, BrandUncheckedCreateWithoutSpusInput>
    connectOrCreate?: BrandCreateOrConnectWithoutSpusInput
    upsert?: BrandUpsertWithoutSpusInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutSpusInput, BrandUpdateWithoutSpusInput>, BrandUncheckedUpdateWithoutSpusInput>
  }

  export type ShopUpdateOneRequiredWithoutSpusNestedInput = {
    create?: XOR<ShopCreateWithoutSpusInput, ShopUncheckedCreateWithoutSpusInput>
    connectOrCreate?: ShopCreateOrConnectWithoutSpusInput
    upsert?: ShopUpsertWithoutSpusInput
    connect?: ShopWhereUniqueInput
    update?: XOR<XOR<ShopUpdateToOneWithWhereWithoutSpusInput, ShopUpdateWithoutSpusInput>, ShopUncheckedUpdateWithoutSpusInput>
  }

  export type SkuUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput> | SkuCreateWithoutSpuInput[] | SkuUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutSpuInput | SkuCreateOrConnectWithoutSpuInput[]
    upsert?: SkuUpsertWithWhereUniqueWithoutSpuInput | SkuUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SkuCreateManySpuInputEnvelope
    set?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    disconnect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    delete?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    update?: SkuUpdateWithWhereUniqueWithoutSpuInput | SkuUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SkuUpdateManyWithWhereWithoutSpuInput | SkuUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SkuScalarWhereInput | SkuScalarWhereInput[]
  }

  export type SpuImageUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput> | SpuImageCreateWithoutSpuInput[] | SpuImageUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuImageCreateOrConnectWithoutSpuInput | SpuImageCreateOrConnectWithoutSpuInput[]
    upsert?: SpuImageUpsertWithWhereUniqueWithoutSpuInput | SpuImageUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuImageCreateManySpuInputEnvelope
    set?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    disconnect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    delete?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    connect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    update?: SpuImageUpdateWithWhereUniqueWithoutSpuInput | SpuImageUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuImageUpdateManyWithWhereWithoutSpuInput | SpuImageUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuImageScalarWhereInput | SpuImageScalarWhereInput[]
  }

  export type SpuAttributeUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput> | SpuAttributeCreateWithoutSpuInput[] | SpuAttributeUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutSpuInput | SpuAttributeCreateOrConnectWithoutSpuInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutSpuInput | SpuAttributeUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuAttributeCreateManySpuInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutSpuInput | SpuAttributeUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutSpuInput | SpuAttributeUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SpuTagUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput> | SpuTagCreateWithoutSpuInput[] | SpuTagUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutSpuInput | SpuTagCreateOrConnectWithoutSpuInput[]
    upsert?: SpuTagUpsertWithWhereUniqueWithoutSpuInput | SpuTagUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuTagCreateManySpuInputEnvelope
    set?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    disconnect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    delete?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    update?: SpuTagUpdateWithWhereUniqueWithoutSpuInput | SpuTagUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuTagUpdateManyWithWhereWithoutSpuInput | SpuTagUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
  }

  export type SpuVariationUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput> | SpuVariationCreateWithoutSpuInput[] | SpuVariationUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSpuInput | SpuVariationCreateOrConnectWithoutSpuInput[]
    upsert?: SpuVariationUpsertWithWhereUniqueWithoutSpuInput | SpuVariationUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuVariationCreateManySpuInputEnvelope
    set?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    disconnect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    delete?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    update?: SpuVariationUpdateWithWhereUniqueWithoutSpuInput | SpuVariationUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuVariationUpdateManyWithWhereWithoutSpuInput | SpuVariationUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
  }

  export type SkuUncheckedUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput> | SkuCreateWithoutSpuInput[] | SkuUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutSpuInput | SkuCreateOrConnectWithoutSpuInput[]
    upsert?: SkuUpsertWithWhereUniqueWithoutSpuInput | SkuUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SkuCreateManySpuInputEnvelope
    set?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    disconnect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    delete?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    update?: SkuUpdateWithWhereUniqueWithoutSpuInput | SkuUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SkuUpdateManyWithWhereWithoutSpuInput | SkuUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SkuScalarWhereInput | SkuScalarWhereInput[]
  }

  export type SpuImageUncheckedUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput> | SpuImageCreateWithoutSpuInput[] | SpuImageUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuImageCreateOrConnectWithoutSpuInput | SpuImageCreateOrConnectWithoutSpuInput[]
    upsert?: SpuImageUpsertWithWhereUniqueWithoutSpuInput | SpuImageUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuImageCreateManySpuInputEnvelope
    set?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    disconnect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    delete?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    connect?: SpuImageWhereUniqueInput | SpuImageWhereUniqueInput[]
    update?: SpuImageUpdateWithWhereUniqueWithoutSpuInput | SpuImageUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuImageUpdateManyWithWhereWithoutSpuInput | SpuImageUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuImageScalarWhereInput | SpuImageScalarWhereInput[]
  }

  export type SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput> | SpuAttributeCreateWithoutSpuInput[] | SpuAttributeUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutSpuInput | SpuAttributeCreateOrConnectWithoutSpuInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutSpuInput | SpuAttributeUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuAttributeCreateManySpuInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutSpuInput | SpuAttributeUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutSpuInput | SpuAttributeUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SpuTagUncheckedUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput> | SpuTagCreateWithoutSpuInput[] | SpuTagUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutSpuInput | SpuTagCreateOrConnectWithoutSpuInput[]
    upsert?: SpuTagUpsertWithWhereUniqueWithoutSpuInput | SpuTagUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuTagCreateManySpuInputEnvelope
    set?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    disconnect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    delete?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    update?: SpuTagUpdateWithWhereUniqueWithoutSpuInput | SpuTagUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuTagUpdateManyWithWhereWithoutSpuInput | SpuTagUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
  }

  export type SpuVariationUncheckedUpdateManyWithoutSpuNestedInput = {
    create?: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput> | SpuVariationCreateWithoutSpuInput[] | SpuVariationUncheckedCreateWithoutSpuInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSpuInput | SpuVariationCreateOrConnectWithoutSpuInput[]
    upsert?: SpuVariationUpsertWithWhereUniqueWithoutSpuInput | SpuVariationUpsertWithWhereUniqueWithoutSpuInput[]
    createMany?: SpuVariationCreateManySpuInputEnvelope
    set?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    disconnect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    delete?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    update?: SpuVariationUpdateWithWhereUniqueWithoutSpuInput | SpuVariationUpdateWithWhereUniqueWithoutSpuInput[]
    updateMany?: SpuVariationUpdateManyWithWhereWithoutSpuInput | SpuVariationUpdateManyWithWhereWithoutSpuInput[]
    deleteMany?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
  }

  export type SpuCreateNestedOneWithoutSkusInput = {
    create?: XOR<SpuCreateWithoutSkusInput, SpuUncheckedCreateWithoutSkusInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSkusInput
    connect?: SpuWhereUniqueInput
  }

  export type SkuImageCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
  }

  export type SkuAttributeCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput> | SkuAttributeCreateWithoutSkuInput[] | SkuAttributeUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutSkuInput | SkuAttributeCreateOrConnectWithoutSkuInput[]
    createMany?: SkuAttributeCreateManySkuInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type SkuVariationValueCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput> | SkuVariationValueCreateWithoutSkuInput[] | SkuVariationValueUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSkuInput | SkuVariationValueCreateOrConnectWithoutSkuInput[]
    createMany?: SkuVariationValueCreateManySkuInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type SkuImageUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
  }

  export type SkuAttributeUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput> | SkuAttributeCreateWithoutSkuInput[] | SkuAttributeUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutSkuInput | SkuAttributeCreateOrConnectWithoutSkuInput[]
    createMany?: SkuAttributeCreateManySkuInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type SkuVariationValueUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput> | SkuVariationValueCreateWithoutSkuInput[] | SkuVariationValueUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSkuInput | SkuVariationValueCreateOrConnectWithoutSkuInput[]
    createMany?: SkuVariationValueCreateManySkuInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumSkuStatusFieldUpdateOperationsInput = {
    set?: $Enums.SkuStatus
  }

  export type SpuUpdateOneRequiredWithoutSkusNestedInput = {
    create?: XOR<SpuCreateWithoutSkusInput, SpuUncheckedCreateWithoutSkusInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSkusInput
    upsert?: SpuUpsertWithoutSkusInput
    connect?: SpuWhereUniqueInput
    update?: XOR<XOR<SpuUpdateToOneWithWhereWithoutSkusInput, SpuUpdateWithoutSkusInput>, SpuUncheckedUpdateWithoutSkusInput>
  }

  export type SkuImageUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    upsert?: SkuImageUpsertWithWhereUniqueWithoutSkuInput | SkuImageUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    set?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    disconnect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    delete?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    update?: SkuImageUpdateWithWhereUniqueWithoutSkuInput | SkuImageUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuImageUpdateManyWithWhereWithoutSkuInput | SkuImageUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
  }

  export type SkuAttributeUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput> | SkuAttributeCreateWithoutSkuInput[] | SkuAttributeUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutSkuInput | SkuAttributeCreateOrConnectWithoutSkuInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutSkuInput | SkuAttributeUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuAttributeCreateManySkuInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutSkuInput | SkuAttributeUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutSkuInput | SkuAttributeUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type SkuVariationValueUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput> | SkuVariationValueCreateWithoutSkuInput[] | SkuVariationValueUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSkuInput | SkuVariationValueCreateOrConnectWithoutSkuInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutSkuInput | SkuVariationValueUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuVariationValueCreateManySkuInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutSkuInput | SkuVariationValueUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutSkuInput | SkuVariationValueUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SkuImageUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    upsert?: SkuImageUpsertWithWhereUniqueWithoutSkuInput | SkuImageUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    set?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    disconnect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    delete?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    update?: SkuImageUpdateWithWhereUniqueWithoutSkuInput | SkuImageUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuImageUpdateManyWithWhereWithoutSkuInput | SkuImageUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
  }

  export type SkuAttributeUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput> | SkuAttributeCreateWithoutSkuInput[] | SkuAttributeUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutSkuInput | SkuAttributeCreateOrConnectWithoutSkuInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutSkuInput | SkuAttributeUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuAttributeCreateManySkuInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutSkuInput | SkuAttributeUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutSkuInput | SkuAttributeUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput> | SkuVariationValueCreateWithoutSkuInput[] | SkuVariationValueUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSkuInput | SkuVariationValueCreateOrConnectWithoutSkuInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutSkuInput | SkuVariationValueUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuVariationValueCreateManySkuInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutSkuInput | SkuVariationValueUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutSkuInput | SkuVariationValueUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SpuCreateNestedOneWithoutSpuImagesInput = {
    create?: XOR<SpuCreateWithoutSpuImagesInput, SpuUncheckedCreateWithoutSpuImagesInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuImagesInput
    connect?: SpuWhereUniqueInput
  }

  export type SpuUpdateOneRequiredWithoutSpuImagesNestedInput = {
    create?: XOR<SpuCreateWithoutSpuImagesInput, SpuUncheckedCreateWithoutSpuImagesInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuImagesInput
    upsert?: SpuUpsertWithoutSpuImagesInput
    connect?: SpuWhereUniqueInput
    update?: XOR<XOR<SpuUpdateToOneWithWhereWithoutSpuImagesInput, SpuUpdateWithoutSpuImagesInput>, SpuUncheckedUpdateWithoutSpuImagesInput>
  }

  export type SkuCreateNestedOneWithoutSkuImagesInput = {
    create?: XOR<SkuCreateWithoutSkuImagesInput, SkuUncheckedCreateWithoutSkuImagesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuImagesInput
    connect?: SkuWhereUniqueInput
  }

  export type SkuUpdateOneRequiredWithoutSkuImagesNestedInput = {
    create?: XOR<SkuCreateWithoutSkuImagesInput, SkuUncheckedCreateWithoutSkuImagesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuImagesInput
    upsert?: SkuUpsertWithoutSkuImagesInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutSkuImagesInput, SkuUpdateWithoutSkuImagesInput>, SkuUncheckedUpdateWithoutSkuImagesInput>
  }

  export type SpuAttributeCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput> | SpuAttributeCreateWithoutAttributeInput[] | SpuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeInput | SpuAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: SpuAttributeCreateManyAttributeInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SkuAttributeCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput> | SkuAttributeCreateWithoutAttributeInput[] | SkuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeInput | SkuAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: SkuAttributeCreateManyAttributeInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type AttributeValueCreateNestedManyWithoutAttributeInput = {
    create?: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput> | AttributeValueCreateWithoutAttributeInput[] | AttributeValueUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: AttributeValueCreateOrConnectWithoutAttributeInput | AttributeValueCreateOrConnectWithoutAttributeInput[]
    createMany?: AttributeValueCreateManyAttributeInputEnvelope
    connect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
  }

  export type SpuVariationCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput> | SpuVariationCreateWithoutAttributeInput[] | SpuVariationUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutAttributeInput | SpuVariationCreateOrConnectWithoutAttributeInput[]
    createMany?: SpuVariationCreateManyAttributeInputEnvelope
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
  }

  export type SpuAttributeUncheckedCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput> | SpuAttributeCreateWithoutAttributeInput[] | SpuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeInput | SpuAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: SpuAttributeCreateManyAttributeInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SkuAttributeUncheckedCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput> | SkuAttributeCreateWithoutAttributeInput[] | SkuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeInput | SkuAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: SkuAttributeCreateManyAttributeInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type AttributeValueUncheckedCreateNestedManyWithoutAttributeInput = {
    create?: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput> | AttributeValueCreateWithoutAttributeInput[] | AttributeValueUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: AttributeValueCreateOrConnectWithoutAttributeInput | AttributeValueCreateOrConnectWithoutAttributeInput[]
    createMany?: AttributeValueCreateManyAttributeInputEnvelope
    connect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
  }

  export type SpuVariationUncheckedCreateNestedManyWithoutAttributeInput = {
    create?: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput> | SpuVariationCreateWithoutAttributeInput[] | SpuVariationUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutAttributeInput | SpuVariationCreateOrConnectWithoutAttributeInput[]
    createMany?: SpuVariationCreateManyAttributeInputEnvelope
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
  }

  export type EnumAttributeTypeFieldUpdateOperationsInput = {
    set?: $Enums.AttributeType
  }

  export type SpuAttributeUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput> | SpuAttributeCreateWithoutAttributeInput[] | SpuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeInput | SpuAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutAttributeInput | SpuAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SpuAttributeCreateManyAttributeInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutAttributeInput | SpuAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutAttributeInput | SpuAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SkuAttributeUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput> | SkuAttributeCreateWithoutAttributeInput[] | SkuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeInput | SkuAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutAttributeInput | SkuAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SkuAttributeCreateManyAttributeInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutAttributeInput | SkuAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutAttributeInput | SkuAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type AttributeValueUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput> | AttributeValueCreateWithoutAttributeInput[] | AttributeValueUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: AttributeValueCreateOrConnectWithoutAttributeInput | AttributeValueCreateOrConnectWithoutAttributeInput[]
    upsert?: AttributeValueUpsertWithWhereUniqueWithoutAttributeInput | AttributeValueUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: AttributeValueCreateManyAttributeInputEnvelope
    set?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    disconnect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    delete?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    connect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    update?: AttributeValueUpdateWithWhereUniqueWithoutAttributeInput | AttributeValueUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: AttributeValueUpdateManyWithWhereWithoutAttributeInput | AttributeValueUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: AttributeValueScalarWhereInput | AttributeValueScalarWhereInput[]
  }

  export type SpuVariationUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput> | SpuVariationCreateWithoutAttributeInput[] | SpuVariationUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutAttributeInput | SpuVariationCreateOrConnectWithoutAttributeInput[]
    upsert?: SpuVariationUpsertWithWhereUniqueWithoutAttributeInput | SpuVariationUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SpuVariationCreateManyAttributeInputEnvelope
    set?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    disconnect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    delete?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    update?: SpuVariationUpdateWithWhereUniqueWithoutAttributeInput | SpuVariationUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SpuVariationUpdateManyWithWhereWithoutAttributeInput | SpuVariationUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
  }

  export type SpuAttributeUncheckedUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput> | SpuAttributeCreateWithoutAttributeInput[] | SpuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeInput | SpuAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutAttributeInput | SpuAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SpuAttributeCreateManyAttributeInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutAttributeInput | SpuAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutAttributeInput | SpuAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SkuAttributeUncheckedUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput> | SkuAttributeCreateWithoutAttributeInput[] | SkuAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeInput | SkuAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutAttributeInput | SkuAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SkuAttributeCreateManyAttributeInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutAttributeInput | SkuAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutAttributeInput | SkuAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type AttributeValueUncheckedUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput> | AttributeValueCreateWithoutAttributeInput[] | AttributeValueUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: AttributeValueCreateOrConnectWithoutAttributeInput | AttributeValueCreateOrConnectWithoutAttributeInput[]
    upsert?: AttributeValueUpsertWithWhereUniqueWithoutAttributeInput | AttributeValueUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: AttributeValueCreateManyAttributeInputEnvelope
    set?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    disconnect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    delete?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    connect?: AttributeValueWhereUniqueInput | AttributeValueWhereUniqueInput[]
    update?: AttributeValueUpdateWithWhereUniqueWithoutAttributeInput | AttributeValueUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: AttributeValueUpdateManyWithWhereWithoutAttributeInput | AttributeValueUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: AttributeValueScalarWhereInput | AttributeValueScalarWhereInput[]
  }

  export type SpuVariationUncheckedUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput> | SpuVariationCreateWithoutAttributeInput[] | SpuVariationUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: SpuVariationCreateOrConnectWithoutAttributeInput | SpuVariationCreateOrConnectWithoutAttributeInput[]
    upsert?: SpuVariationUpsertWithWhereUniqueWithoutAttributeInput | SpuVariationUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: SpuVariationCreateManyAttributeInputEnvelope
    set?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    disconnect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    delete?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    connect?: SpuVariationWhereUniqueInput | SpuVariationWhereUniqueInput[]
    update?: SpuVariationUpdateWithWhereUniqueWithoutAttributeInput | SpuVariationUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: SpuVariationUpdateManyWithWhereWithoutAttributeInput | SpuVariationUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
  }

  export type AttributeCreateNestedOneWithoutAttributeValuesInput = {
    create?: XOR<AttributeCreateWithoutAttributeValuesInput, AttributeUncheckedCreateWithoutAttributeValuesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutAttributeValuesInput
    connect?: AttributeWhereUniqueInput
  }

  export type SpuAttributeCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput> | SpuAttributeCreateWithoutAttributeValueInput[] | SpuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeValueInput | SpuAttributeCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SpuAttributeCreateManyAttributeValueInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SkuAttributeCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput> | SkuAttributeCreateWithoutAttributeValueInput[] | SkuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeValueInput | SkuAttributeCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SkuAttributeCreateManyAttributeValueInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type SkuVariationValueCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput> | SkuVariationValueCreateWithoutAttributeValueInput[] | SkuVariationValueUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutAttributeValueInput | SkuVariationValueCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SkuVariationValueCreateManyAttributeValueInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type SpuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput> | SpuAttributeCreateWithoutAttributeValueInput[] | SpuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeValueInput | SpuAttributeCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SpuAttributeCreateManyAttributeValueInputEnvelope
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
  }

  export type SkuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput> | SkuAttributeCreateWithoutAttributeValueInput[] | SkuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeValueInput | SkuAttributeCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SkuAttributeCreateManyAttributeValueInputEnvelope
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
  }

  export type SkuVariationValueUncheckedCreateNestedManyWithoutAttributeValueInput = {
    create?: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput> | SkuVariationValueCreateWithoutAttributeValueInput[] | SkuVariationValueUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutAttributeValueInput | SkuVariationValueCreateOrConnectWithoutAttributeValueInput[]
    createMany?: SkuVariationValueCreateManyAttributeValueInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type AttributeUpdateOneRequiredWithoutAttributeValuesNestedInput = {
    create?: XOR<AttributeCreateWithoutAttributeValuesInput, AttributeUncheckedCreateWithoutAttributeValuesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutAttributeValuesInput
    upsert?: AttributeUpsertWithoutAttributeValuesInput
    connect?: AttributeWhereUniqueInput
    update?: XOR<XOR<AttributeUpdateToOneWithWhereWithoutAttributeValuesInput, AttributeUpdateWithoutAttributeValuesInput>, AttributeUncheckedUpdateWithoutAttributeValuesInput>
  }

  export type SpuAttributeUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput> | SpuAttributeCreateWithoutAttributeValueInput[] | SpuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeValueInput | SpuAttributeCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput | SpuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SpuAttributeCreateManyAttributeValueInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput | SpuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutAttributeValueInput | SpuAttributeUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SkuAttributeUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput> | SkuAttributeCreateWithoutAttributeValueInput[] | SkuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeValueInput | SkuAttributeCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput | SkuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SkuAttributeCreateManyAttributeValueInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput | SkuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutAttributeValueInput | SkuAttributeUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type SkuVariationValueUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput> | SkuVariationValueCreateWithoutAttributeValueInput[] | SkuVariationValueUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutAttributeValueInput | SkuVariationValueCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutAttributeValueInput | SkuVariationValueUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SkuVariationValueCreateManyAttributeValueInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutAttributeValueInput | SkuVariationValueUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutAttributeValueInput | SkuVariationValueUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SpuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput> | SpuAttributeCreateWithoutAttributeValueInput[] | SpuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SpuAttributeCreateOrConnectWithoutAttributeValueInput | SpuAttributeCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SpuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput | SpuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SpuAttributeCreateManyAttributeValueInputEnvelope
    set?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    disconnect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    delete?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    connect?: SpuAttributeWhereUniqueInput | SpuAttributeWhereUniqueInput[]
    update?: SpuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput | SpuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SpuAttributeUpdateManyWithWhereWithoutAttributeValueInput | SpuAttributeUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
  }

  export type SkuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput> | SkuAttributeCreateWithoutAttributeValueInput[] | SkuAttributeUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuAttributeCreateOrConnectWithoutAttributeValueInput | SkuAttributeCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SkuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput | SkuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SkuAttributeCreateManyAttributeValueInputEnvelope
    set?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    disconnect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    delete?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    connect?: SkuAttributeWhereUniqueInput | SkuAttributeWhereUniqueInput[]
    update?: SkuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput | SkuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SkuAttributeUpdateManyWithWhereWithoutAttributeValueInput | SkuAttributeUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutAttributeValueNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput> | SkuVariationValueCreateWithoutAttributeValueInput[] | SkuVariationValueUncheckedCreateWithoutAttributeValueInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutAttributeValueInput | SkuVariationValueCreateOrConnectWithoutAttributeValueInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutAttributeValueInput | SkuVariationValueUpsertWithWhereUniqueWithoutAttributeValueInput[]
    createMany?: SkuVariationValueCreateManyAttributeValueInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutAttributeValueInput | SkuVariationValueUpdateWithWhereUniqueWithoutAttributeValueInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutAttributeValueInput | SkuVariationValueUpdateManyWithWhereWithoutAttributeValueInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SpuCreateNestedOneWithoutSpuAttributesInput = {
    create?: XOR<SpuCreateWithoutSpuAttributesInput, SpuUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuAttributesInput
    connect?: SpuWhereUniqueInput
  }

  export type AttributeCreateNestedOneWithoutSpuAttributesInput = {
    create?: XOR<AttributeCreateWithoutSpuAttributesInput, AttributeUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSpuAttributesInput
    connect?: AttributeWhereUniqueInput
  }

  export type AttributeValueCreateNestedOneWithoutSpuAttributesInput = {
    create?: XOR<AttributeValueCreateWithoutSpuAttributesInput, AttributeValueUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSpuAttributesInput
    connect?: AttributeValueWhereUniqueInput
  }

  export type SpuUpdateOneRequiredWithoutSpuAttributesNestedInput = {
    create?: XOR<SpuCreateWithoutSpuAttributesInput, SpuUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuAttributesInput
    upsert?: SpuUpsertWithoutSpuAttributesInput
    connect?: SpuWhereUniqueInput
    update?: XOR<XOR<SpuUpdateToOneWithWhereWithoutSpuAttributesInput, SpuUpdateWithoutSpuAttributesInput>, SpuUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type AttributeUpdateOneRequiredWithoutSpuAttributesNestedInput = {
    create?: XOR<AttributeCreateWithoutSpuAttributesInput, AttributeUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSpuAttributesInput
    upsert?: AttributeUpsertWithoutSpuAttributesInput
    connect?: AttributeWhereUniqueInput
    update?: XOR<XOR<AttributeUpdateToOneWithWhereWithoutSpuAttributesInput, AttributeUpdateWithoutSpuAttributesInput>, AttributeUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type AttributeValueUpdateOneRequiredWithoutSpuAttributesNestedInput = {
    create?: XOR<AttributeValueCreateWithoutSpuAttributesInput, AttributeValueUncheckedCreateWithoutSpuAttributesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSpuAttributesInput
    upsert?: AttributeValueUpsertWithoutSpuAttributesInput
    connect?: AttributeValueWhereUniqueInput
    update?: XOR<XOR<AttributeValueUpdateToOneWithWhereWithoutSpuAttributesInput, AttributeValueUpdateWithoutSpuAttributesInput>, AttributeValueUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type SkuCreateNestedOneWithoutSkuAttributesInput = {
    create?: XOR<SkuCreateWithoutSkuAttributesInput, SkuUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuAttributesInput
    connect?: SkuWhereUniqueInput
  }

  export type AttributeCreateNestedOneWithoutSkuAttributesInput = {
    create?: XOR<AttributeCreateWithoutSkuAttributesInput, AttributeUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSkuAttributesInput
    connect?: AttributeWhereUniqueInput
  }

  export type AttributeValueCreateNestedOneWithoutSkuAttributesInput = {
    create?: XOR<AttributeValueCreateWithoutSkuAttributesInput, AttributeValueUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSkuAttributesInput
    connect?: AttributeValueWhereUniqueInput
  }

  export type SkuUpdateOneRequiredWithoutSkuAttributesNestedInput = {
    create?: XOR<SkuCreateWithoutSkuAttributesInput, SkuUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuAttributesInput
    upsert?: SkuUpsertWithoutSkuAttributesInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutSkuAttributesInput, SkuUpdateWithoutSkuAttributesInput>, SkuUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type AttributeUpdateOneRequiredWithoutSkuAttributesNestedInput = {
    create?: XOR<AttributeCreateWithoutSkuAttributesInput, AttributeUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSkuAttributesInput
    upsert?: AttributeUpsertWithoutSkuAttributesInput
    connect?: AttributeWhereUniqueInput
    update?: XOR<XOR<AttributeUpdateToOneWithWhereWithoutSkuAttributesInput, AttributeUpdateWithoutSkuAttributesInput>, AttributeUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type AttributeValueUpdateOneRequiredWithoutSkuAttributesNestedInput = {
    create?: XOR<AttributeValueCreateWithoutSkuAttributesInput, AttributeValueUncheckedCreateWithoutSkuAttributesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSkuAttributesInput
    upsert?: AttributeValueUpsertWithoutSkuAttributesInput
    connect?: AttributeValueWhereUniqueInput
    update?: XOR<XOR<AttributeValueUpdateToOneWithWhereWithoutSkuAttributesInput, AttributeValueUpdateWithoutSkuAttributesInput>, AttributeValueUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type SpuCreateNestedOneWithoutSpuVariationsInput = {
    create?: XOR<SpuCreateWithoutSpuVariationsInput, SpuUncheckedCreateWithoutSpuVariationsInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuVariationsInput
    connect?: SpuWhereUniqueInput
  }

  export type AttributeCreateNestedOneWithoutSpuVariationsInput = {
    create?: XOR<AttributeCreateWithoutSpuVariationsInput, AttributeUncheckedCreateWithoutSpuVariationsInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSpuVariationsInput
    connect?: AttributeWhereUniqueInput
  }

  export type SkuVariationValueCreateNestedManyWithoutSpuVariationInput = {
    create?: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput> | SkuVariationValueCreateWithoutSpuVariationInput[] | SkuVariationValueUncheckedCreateWithoutSpuVariationInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSpuVariationInput | SkuVariationValueCreateOrConnectWithoutSpuVariationInput[]
    createMany?: SkuVariationValueCreateManySpuVariationInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type SkuVariationValueUncheckedCreateNestedManyWithoutSpuVariationInput = {
    create?: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput> | SkuVariationValueCreateWithoutSpuVariationInput[] | SkuVariationValueUncheckedCreateWithoutSpuVariationInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSpuVariationInput | SkuVariationValueCreateOrConnectWithoutSpuVariationInput[]
    createMany?: SkuVariationValueCreateManySpuVariationInputEnvelope
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
  }

  export type SpuUpdateOneRequiredWithoutSpuVariationsNestedInput = {
    create?: XOR<SpuCreateWithoutSpuVariationsInput, SpuUncheckedCreateWithoutSpuVariationsInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuVariationsInput
    upsert?: SpuUpsertWithoutSpuVariationsInput
    connect?: SpuWhereUniqueInput
    update?: XOR<XOR<SpuUpdateToOneWithWhereWithoutSpuVariationsInput, SpuUpdateWithoutSpuVariationsInput>, SpuUncheckedUpdateWithoutSpuVariationsInput>
  }

  export type AttributeUpdateOneRequiredWithoutSpuVariationsNestedInput = {
    create?: XOR<AttributeCreateWithoutSpuVariationsInput, AttributeUncheckedCreateWithoutSpuVariationsInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutSpuVariationsInput
    upsert?: AttributeUpsertWithoutSpuVariationsInput
    connect?: AttributeWhereUniqueInput
    update?: XOR<XOR<AttributeUpdateToOneWithWhereWithoutSpuVariationsInput, AttributeUpdateWithoutSpuVariationsInput>, AttributeUncheckedUpdateWithoutSpuVariationsInput>
  }

  export type SkuVariationValueUpdateManyWithoutSpuVariationNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput> | SkuVariationValueCreateWithoutSpuVariationInput[] | SkuVariationValueUncheckedCreateWithoutSpuVariationInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSpuVariationInput | SkuVariationValueCreateOrConnectWithoutSpuVariationInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutSpuVariationInput | SkuVariationValueUpsertWithWhereUniqueWithoutSpuVariationInput[]
    createMany?: SkuVariationValueCreateManySpuVariationInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutSpuVariationInput | SkuVariationValueUpdateWithWhereUniqueWithoutSpuVariationInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutSpuVariationInput | SkuVariationValueUpdateManyWithWhereWithoutSpuVariationInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutSpuVariationNestedInput = {
    create?: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput> | SkuVariationValueCreateWithoutSpuVariationInput[] | SkuVariationValueUncheckedCreateWithoutSpuVariationInput[]
    connectOrCreate?: SkuVariationValueCreateOrConnectWithoutSpuVariationInput | SkuVariationValueCreateOrConnectWithoutSpuVariationInput[]
    upsert?: SkuVariationValueUpsertWithWhereUniqueWithoutSpuVariationInput | SkuVariationValueUpsertWithWhereUniqueWithoutSpuVariationInput[]
    createMany?: SkuVariationValueCreateManySpuVariationInputEnvelope
    set?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    disconnect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    delete?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    connect?: SkuVariationValueWhereUniqueInput | SkuVariationValueWhereUniqueInput[]
    update?: SkuVariationValueUpdateWithWhereUniqueWithoutSpuVariationInput | SkuVariationValueUpdateWithWhereUniqueWithoutSpuVariationInput[]
    updateMany?: SkuVariationValueUpdateManyWithWhereWithoutSpuVariationInput | SkuVariationValueUpdateManyWithWhereWithoutSpuVariationInput[]
    deleteMany?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
  }

  export type SkuCreateNestedOneWithoutSkuVariationValuesInput = {
    create?: XOR<SkuCreateWithoutSkuVariationValuesInput, SkuUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuVariationValuesInput
    connect?: SkuWhereUniqueInput
  }

  export type SpuVariationCreateNestedOneWithoutSkuVariationValuesInput = {
    create?: XOR<SpuVariationCreateWithoutSkuVariationValuesInput, SpuVariationUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSkuVariationValuesInput
    connect?: SpuVariationWhereUniqueInput
  }

  export type AttributeValueCreateNestedOneWithoutSkuVariationValuesInput = {
    create?: XOR<AttributeValueCreateWithoutSkuVariationValuesInput, AttributeValueUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSkuVariationValuesInput
    connect?: AttributeValueWhereUniqueInput
  }

  export type SkuUpdateOneRequiredWithoutSkuVariationValuesNestedInput = {
    create?: XOR<SkuCreateWithoutSkuVariationValuesInput, SkuUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutSkuVariationValuesInput
    upsert?: SkuUpsertWithoutSkuVariationValuesInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutSkuVariationValuesInput, SkuUpdateWithoutSkuVariationValuesInput>, SkuUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type SpuVariationUpdateOneRequiredWithoutSkuVariationValuesNestedInput = {
    create?: XOR<SpuVariationCreateWithoutSkuVariationValuesInput, SpuVariationUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: SpuVariationCreateOrConnectWithoutSkuVariationValuesInput
    upsert?: SpuVariationUpsertWithoutSkuVariationValuesInput
    connect?: SpuVariationWhereUniqueInput
    update?: XOR<XOR<SpuVariationUpdateToOneWithWhereWithoutSkuVariationValuesInput, SpuVariationUpdateWithoutSkuVariationValuesInput>, SpuVariationUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type AttributeValueUpdateOneRequiredWithoutSkuVariationValuesNestedInput = {
    create?: XOR<AttributeValueCreateWithoutSkuVariationValuesInput, AttributeValueUncheckedCreateWithoutSkuVariationValuesInput>
    connectOrCreate?: AttributeValueCreateOrConnectWithoutSkuVariationValuesInput
    upsert?: AttributeValueUpsertWithoutSkuVariationValuesInput
    connect?: AttributeValueWhereUniqueInput
    update?: XOR<XOR<AttributeValueUpdateToOneWithWhereWithoutSkuVariationValuesInput, AttributeValueUpdateWithoutSkuVariationValuesInput>, AttributeValueUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type SpuTagCreateNestedManyWithoutTagInput = {
    create?: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput> | SpuTagCreateWithoutTagInput[] | SpuTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutTagInput | SpuTagCreateOrConnectWithoutTagInput[]
    createMany?: SpuTagCreateManyTagInputEnvelope
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
  }

  export type SpuTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput> | SpuTagCreateWithoutTagInput[] | SpuTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutTagInput | SpuTagCreateOrConnectWithoutTagInput[]
    createMany?: SpuTagCreateManyTagInputEnvelope
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
  }

  export type SpuTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput> | SpuTagCreateWithoutTagInput[] | SpuTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutTagInput | SpuTagCreateOrConnectWithoutTagInput[]
    upsert?: SpuTagUpsertWithWhereUniqueWithoutTagInput | SpuTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: SpuTagCreateManyTagInputEnvelope
    set?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    disconnect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    delete?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    update?: SpuTagUpdateWithWhereUniqueWithoutTagInput | SpuTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: SpuTagUpdateManyWithWhereWithoutTagInput | SpuTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
  }

  export type SpuTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput> | SpuTagCreateWithoutTagInput[] | SpuTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: SpuTagCreateOrConnectWithoutTagInput | SpuTagCreateOrConnectWithoutTagInput[]
    upsert?: SpuTagUpsertWithWhereUniqueWithoutTagInput | SpuTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: SpuTagCreateManyTagInputEnvelope
    set?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    disconnect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    delete?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    connect?: SpuTagWhereUniqueInput | SpuTagWhereUniqueInput[]
    update?: SpuTagUpdateWithWhereUniqueWithoutTagInput | SpuTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: SpuTagUpdateManyWithWhereWithoutTagInput | SpuTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
  }

  export type SpuCreateNestedOneWithoutSpuTagsInput = {
    create?: XOR<SpuCreateWithoutSpuTagsInput, SpuUncheckedCreateWithoutSpuTagsInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuTagsInput
    connect?: SpuWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutSpuTagsInput = {
    create?: XOR<TagCreateWithoutSpuTagsInput, TagUncheckedCreateWithoutSpuTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutSpuTagsInput
    connect?: TagWhereUniqueInput
  }

  export type SpuUpdateOneRequiredWithoutSpuTagsNestedInput = {
    create?: XOR<SpuCreateWithoutSpuTagsInput, SpuUncheckedCreateWithoutSpuTagsInput>
    connectOrCreate?: SpuCreateOrConnectWithoutSpuTagsInput
    upsert?: SpuUpsertWithoutSpuTagsInput
    connect?: SpuWhereUniqueInput
    update?: XOR<XOR<SpuUpdateToOneWithWhereWithoutSpuTagsInput, SpuUpdateWithoutSpuTagsInput>, SpuUncheckedUpdateWithoutSpuTagsInput>
  }

  export type TagUpdateOneRequiredWithoutSpuTagsNestedInput = {
    create?: XOR<TagCreateWithoutSpuTagsInput, TagUncheckedCreateWithoutSpuTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutSpuTagsInput
    upsert?: TagUpsertWithoutSpuTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutSpuTagsInput, TagUpdateWithoutSpuTagsInput>, TagUncheckedUpdateWithoutSpuTagsInput>
  }

  export type UserCreateNestedOneWithoutShopsInput = {
    create?: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopsInput
    connect?: UserWhereUniqueInput
  }

  export type SpuCreateNestedManyWithoutShopInput = {
    create?: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput> | SpuCreateWithoutShopInput[] | SpuUncheckedCreateWithoutShopInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutShopInput | SpuCreateOrConnectWithoutShopInput[]
    createMany?: SpuCreateManyShopInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type SpuUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput> | SpuCreateWithoutShopInput[] | SpuUncheckedCreateWithoutShopInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutShopInput | SpuCreateOrConnectWithoutShopInput[]
    createMany?: SpuCreateManyShopInputEnvelope
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
  }

  export type EnumShopStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShopStatus
  }

  export type UserUpdateOneRequiredWithoutShopsNestedInput = {
    create?: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopsInput
    upsert?: UserUpsertWithoutShopsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShopsInput, UserUpdateWithoutShopsInput>, UserUncheckedUpdateWithoutShopsInput>
  }

  export type SpuUpdateManyWithoutShopNestedInput = {
    create?: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput> | SpuCreateWithoutShopInput[] | SpuUncheckedCreateWithoutShopInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutShopInput | SpuCreateOrConnectWithoutShopInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutShopInput | SpuUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: SpuCreateManyShopInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutShopInput | SpuUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutShopInput | SpuUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type SpuUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput> | SpuCreateWithoutShopInput[] | SpuUncheckedCreateWithoutShopInput[]
    connectOrCreate?: SpuCreateOrConnectWithoutShopInput | SpuCreateOrConnectWithoutShopInput[]
    upsert?: SpuUpsertWithWhereUniqueWithoutShopInput | SpuUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: SpuCreateManyShopInputEnvelope
    set?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    disconnect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    delete?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    connect?: SpuWhereUniqueInput | SpuWhereUniqueInput[]
    update?: SpuUpdateWithWhereUniqueWithoutShopInput | SpuUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: SpuUpdateManyWithWhereWithoutShopInput | SpuUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: SpuScalarWhereInput | SpuScalarWhereInput[]
  }

  export type UserCreaterolesInput = {
    set: $Enums.UserRole[]
  }

  export type UserCreateflagsInput = {
    set: $Enums.UserFlag[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CodeCreateNestedOneWithoutUserInput = {
    create?: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: CodeCreateOrConnectWithoutUserInput
    connect?: CodeWhereUniqueInput
  }

  export type Oauth2UserCreateNestedManyWithoutUserInput = {
    create?: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput> | Oauth2UserCreateWithoutUserInput[] | Oauth2UserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Oauth2UserCreateOrConnectWithoutUserInput | Oauth2UserCreateOrConnectWithoutUserInput[]
    createMany?: Oauth2UserCreateManyUserInputEnvelope
    connect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
  }

  export type ShopCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput> | ShopCreateWithoutOwnerInput[] | ShopUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput | ShopCreateOrConnectWithoutOwnerInput[]
    createMany?: ShopCreateManyOwnerInputEnvelope
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
  }

  export type CreditCardCreateNestedManyWithoutUserInput = {
    create?: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput> | CreditCardCreateWithoutUserInput[] | CreditCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutUserInput | CreditCardCreateOrConnectWithoutUserInput[]
    createMany?: CreditCardCreateManyUserInputEnvelope
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CodeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: CodeCreateOrConnectWithoutUserInput
    connect?: CodeWhereUniqueInput
  }

  export type Oauth2UserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput> | Oauth2UserCreateWithoutUserInput[] | Oauth2UserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Oauth2UserCreateOrConnectWithoutUserInput | Oauth2UserCreateOrConnectWithoutUserInput[]
    createMany?: Oauth2UserCreateManyUserInputEnvelope
    connect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
  }

  export type ShopUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput> | ShopCreateWithoutOwnerInput[] | ShopUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput | ShopCreateOrConnectWithoutOwnerInput[]
    createMany?: ShopCreateManyOwnerInputEnvelope
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
  }

  export type CreditCardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput> | CreditCardCreateWithoutUserInput[] | CreditCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutUserInput | CreditCardCreateOrConnectWithoutUserInput[]
    createMany?: CreditCardCreateManyUserInputEnvelope
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
  }

  export type EnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType
  }

  export type UserUpdaterolesInput = {
    set?: $Enums.UserRole[]
    push?: $Enums.UserRole | $Enums.UserRole[]
  }

  export type UserUpdateflagsInput = {
    set?: $Enums.UserFlag[]
    push?: $Enums.UserFlag | $Enums.UserFlag[]
  }

  export type EnumUserVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.UserVisibility
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CodeUpdateOneWithoutUserNestedInput = {
    create?: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: CodeCreateOrConnectWithoutUserInput
    upsert?: CodeUpsertWithoutUserInput
    disconnect?: CodeWhereInput | boolean
    delete?: CodeWhereInput | boolean
    connect?: CodeWhereUniqueInput
    update?: XOR<XOR<CodeUpdateToOneWithWhereWithoutUserInput, CodeUpdateWithoutUserInput>, CodeUncheckedUpdateWithoutUserInput>
  }

  export type Oauth2UserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput> | Oauth2UserCreateWithoutUserInput[] | Oauth2UserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Oauth2UserCreateOrConnectWithoutUserInput | Oauth2UserCreateOrConnectWithoutUserInput[]
    upsert?: Oauth2UserUpsertWithWhereUniqueWithoutUserInput | Oauth2UserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Oauth2UserCreateManyUserInputEnvelope
    set?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    disconnect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    delete?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    connect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    update?: Oauth2UserUpdateWithWhereUniqueWithoutUserInput | Oauth2UserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Oauth2UserUpdateManyWithWhereWithoutUserInput | Oauth2UserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Oauth2UserScalarWhereInput | Oauth2UserScalarWhereInput[]
  }

  export type ShopUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput> | ShopCreateWithoutOwnerInput[] | ShopUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput | ShopCreateOrConnectWithoutOwnerInput[]
    upsert?: ShopUpsertWithWhereUniqueWithoutOwnerInput | ShopUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ShopCreateManyOwnerInputEnvelope
    set?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    disconnect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    delete?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    update?: ShopUpdateWithWhereUniqueWithoutOwnerInput | ShopUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ShopUpdateManyWithWhereWithoutOwnerInput | ShopUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ShopScalarWhereInput | ShopScalarWhereInput[]
  }

  export type CreditCardUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput> | CreditCardCreateWithoutUserInput[] | CreditCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutUserInput | CreditCardCreateOrConnectWithoutUserInput[]
    upsert?: CreditCardUpsertWithWhereUniqueWithoutUserInput | CreditCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreditCardCreateManyUserInputEnvelope
    set?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    disconnect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    delete?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    update?: CreditCardUpdateWithWhereUniqueWithoutUserInput | CreditCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreditCardUpdateManyWithWhereWithoutUserInput | CreditCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CodeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: CodeCreateOrConnectWithoutUserInput
    upsert?: CodeUpsertWithoutUserInput
    disconnect?: CodeWhereInput | boolean
    delete?: CodeWhereInput | boolean
    connect?: CodeWhereUniqueInput
    update?: XOR<XOR<CodeUpdateToOneWithWhereWithoutUserInput, CodeUpdateWithoutUserInput>, CodeUncheckedUpdateWithoutUserInput>
  }

  export type Oauth2UserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput> | Oauth2UserCreateWithoutUserInput[] | Oauth2UserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Oauth2UserCreateOrConnectWithoutUserInput | Oauth2UserCreateOrConnectWithoutUserInput[]
    upsert?: Oauth2UserUpsertWithWhereUniqueWithoutUserInput | Oauth2UserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Oauth2UserCreateManyUserInputEnvelope
    set?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    disconnect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    delete?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    connect?: Oauth2UserWhereUniqueInput | Oauth2UserWhereUniqueInput[]
    update?: Oauth2UserUpdateWithWhereUniqueWithoutUserInput | Oauth2UserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Oauth2UserUpdateManyWithWhereWithoutUserInput | Oauth2UserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Oauth2UserScalarWhereInput | Oauth2UserScalarWhereInput[]
  }

  export type ShopUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput> | ShopCreateWithoutOwnerInput[] | ShopUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput | ShopCreateOrConnectWithoutOwnerInput[]
    upsert?: ShopUpsertWithWhereUniqueWithoutOwnerInput | ShopUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ShopCreateManyOwnerInputEnvelope
    set?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    disconnect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    delete?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    update?: ShopUpdateWithWhereUniqueWithoutOwnerInput | ShopUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ShopUpdateManyWithWhereWithoutOwnerInput | ShopUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ShopScalarWhereInput | ShopScalarWhereInput[]
  }

  export type CreditCardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput> | CreditCardCreateWithoutUserInput[] | CreditCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutUserInput | CreditCardCreateOrConnectWithoutUserInput[]
    upsert?: CreditCardUpsertWithWhereUniqueWithoutUserInput | CreditCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreditCardCreateManyUserInputEnvelope
    set?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    disconnect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    delete?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    update?: CreditCardUpdateWithWhereUniqueWithoutUserInput | CreditCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreditCardUpdateManyWithWhereWithoutUserInput | CreditCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOauth2UserInput = {
    create?: XOR<UserCreateWithoutOauth2UserInput, UserUncheckedCreateWithoutOauth2UserInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauth2UserInput
    connect?: UserWhereUniqueInput
  }

  export type EnumProviderFieldUpdateOperationsInput = {
    set?: $Enums.Provider
  }

  export type UserUpdateOneRequiredWithoutOauth2UserNestedInput = {
    create?: XOR<UserCreateWithoutOauth2UserInput, UserUncheckedCreateWithoutOauth2UserInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauth2UserInput
    upsert?: UserUpsertWithoutOauth2UserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauth2UserInput, UserUpdateWithoutOauth2UserInput>, UserUncheckedUpdateWithoutOauth2UserInput>
  }

  export type UserCreateNestedOneWithoutCreditCardInput = {
    create?: XOR<UserCreateWithoutCreditCardInput, UserUncheckedCreateWithoutCreditCardInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreditCardInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreditCardNestedInput = {
    create?: XOR<UserCreateWithoutCreditCardInput, UserUncheckedCreateWithoutCreditCardInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreditCardInput
    upsert?: UserUpsertWithoutCreditCardInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreditCardInput, UserUpdateWithoutCreditCardInput>, UserUncheckedUpdateWithoutCreditCardInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumSpuStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SpuStatus | EnumSpuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSpuStatusFilter<$PrismaModel> | $Enums.SpuStatus
  }

  export type NestedEnumSpuStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SpuStatus | EnumSpuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpuStatus[] | ListEnumSpuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSpuStatusWithAggregatesFilter<$PrismaModel> | $Enums.SpuStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSpuStatusFilter<$PrismaModel>
    _max?: NestedEnumSpuStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumSkuStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SkuStatus | EnumSkuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSkuStatusFilter<$PrismaModel> | $Enums.SkuStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumSkuStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkuStatus | EnumSkuStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkuStatus[] | ListEnumSkuStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSkuStatusWithAggregatesFilter<$PrismaModel> | $Enums.SkuStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkuStatusFilter<$PrismaModel>
    _max?: NestedEnumSkuStatusFilter<$PrismaModel>
  }

  export type NestedEnumAttributeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AttributeType | EnumAttributeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttributeTypeFilter<$PrismaModel> | $Enums.AttributeType
  }

  export type NestedEnumAttributeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttributeType | EnumAttributeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttributeType[] | ListEnumAttributeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAttributeTypeWithAggregatesFilter<$PrismaModel> | $Enums.AttributeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttributeTypeFilter<$PrismaModel>
    _max?: NestedEnumAttributeTypeFilter<$PrismaModel>
  }

  export type NestedEnumShopStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShopStatus | EnumShopStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShopStatusFilter<$PrismaModel> | $Enums.ShopStatus
  }

  export type NestedEnumShopStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShopStatus | EnumShopStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShopStatus[] | ListEnumShopStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShopStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShopStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShopStatusFilter<$PrismaModel>
    _max?: NestedEnumShopStatusFilter<$PrismaModel>
  }

  export type NestedEnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type NestedEnumUserVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.UserVisibility | EnumUserVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumUserVisibilityFilter<$PrismaModel> | $Enums.UserVisibility
  }

  export type NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type NestedEnumUserVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserVisibility | EnumUserVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserVisibility[] | ListEnumUserVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumUserVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.UserVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserVisibilityFilter<$PrismaModel>
    _max?: NestedEnumUserVisibilityFilter<$PrismaModel>
  }

  export type NestedEnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type NestedEnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    codes?: CodeCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserCreateNestedManyWithoutUserInput
    shops?: ShopCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    codes?: CodeUncheckedCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserUncheckedCreateNestedManyWithoutUserInput
    shops?: ShopUncheckedCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codes?: CodeUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUpdateManyWithoutUserNestedInput
    shops?: ShopUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codes?: CodeUncheckedUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUncheckedUpdateManyWithoutUserNestedInput
    shops?: ShopUncheckedUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCodesInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    Oauth2User?: Oauth2UserCreateNestedManyWithoutUserInput
    shops?: ShopCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCodesInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Oauth2User?: Oauth2UserUncheckedCreateNestedManyWithoutUserInput
    shops?: ShopUncheckedCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCodesInput, UserUncheckedCreateWithoutCodesInput>
  }

  export type UserUpsertWithoutCodesInput = {
    update: XOR<UserUpdateWithoutCodesInput, UserUncheckedUpdateWithoutCodesInput>
    create: XOR<UserCreateWithoutCodesInput, UserUncheckedCreateWithoutCodesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCodesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCodesInput, UserUncheckedUpdateWithoutCodesInput>
  }

  export type UserUpdateWithoutCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Oauth2User?: Oauth2UserUpdateManyWithoutUserNestedInput
    shops?: ShopUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Oauth2User?: Oauth2UserUncheckedUpdateManyWithoutUserNestedInput
    shops?: ShopUncheckedUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    spus?: SpuCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    spus?: SpuUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    spus?: SpuCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    spus?: SpuUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type SpuCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutCategoryInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput>
  }

  export type SpuCreateManyCategoryInputEnvelope = {
    data: SpuCreateManyCategoryInput | SpuCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    spus?: SpuUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    spus?: SpuUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: UuidFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    imageUrl?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    sortOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: UuidNullableFilter<"Category"> | string | null
  }

  export type SpuUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SpuWhereUniqueInput
    update: XOR<SpuUpdateWithoutCategoryInput, SpuUncheckedUpdateWithoutCategoryInput>
    create: XOR<SpuCreateWithoutCategoryInput, SpuUncheckedCreateWithoutCategoryInput>
  }

  export type SpuUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SpuWhereUniqueInput
    data: XOR<SpuUpdateWithoutCategoryInput, SpuUncheckedUpdateWithoutCategoryInput>
  }

  export type SpuUpdateManyWithWhereWithoutCategoryInput = {
    where: SpuScalarWhereInput
    data: XOR<SpuUpdateManyMutationInput, SpuUncheckedUpdateManyWithoutCategoryInput>
  }

  export type SpuScalarWhereInput = {
    AND?: SpuScalarWhereInput | SpuScalarWhereInput[]
    OR?: SpuScalarWhereInput[]
    NOT?: SpuScalarWhereInput | SpuScalarWhereInput[]
    id?: UuidFilter<"Spu"> | string
    name?: StringFilter<"Spu"> | string
    slug?: StringFilter<"Spu"> | string
    description?: StringNullableFilter<"Spu"> | string | null
    shortDesc?: StringNullableFilter<"Spu"> | string | null
    status?: EnumSpuStatusFilter<"Spu"> | $Enums.SpuStatus
    isActive?: BoolFilter<"Spu"> | boolean
    createdAt?: DateTimeFilter<"Spu"> | Date | string
    updatedAt?: DateTimeFilter<"Spu"> | Date | string
    categoryId?: UuidFilter<"Spu"> | string
    brandId?: UuidFilter<"Spu"> | string
    shopId?: UuidFilter<"Spu"> | string
  }

  export type SpuCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutBrandInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput>
  }

  export type SpuCreateManyBrandInputEnvelope = {
    data: SpuCreateManyBrandInput | SpuCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type SpuUpsertWithWhereUniqueWithoutBrandInput = {
    where: SpuWhereUniqueInput
    update: XOR<SpuUpdateWithoutBrandInput, SpuUncheckedUpdateWithoutBrandInput>
    create: XOR<SpuCreateWithoutBrandInput, SpuUncheckedCreateWithoutBrandInput>
  }

  export type SpuUpdateWithWhereUniqueWithoutBrandInput = {
    where: SpuWhereUniqueInput
    data: XOR<SpuUpdateWithoutBrandInput, SpuUncheckedUpdateWithoutBrandInput>
  }

  export type SpuUpdateManyWithWhereWithoutBrandInput = {
    where: SpuScalarWhereInput
    data: XOR<SpuUpdateManyMutationInput, SpuUncheckedUpdateManyWithoutBrandInput>
  }

  export type CategoryCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutSpusInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSpusInput, CategoryUncheckedCreateWithoutSpusInput>
  }

  export type BrandCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    websiteUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUncheckedCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    websiteUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateOrConnectWithoutSpusInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutSpusInput, BrandUncheckedCreateWithoutSpusInput>
  }

  export type ShopCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutShopsInput
  }

  export type ShopUncheckedCreateWithoutSpusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type ShopCreateOrConnectWithoutSpusInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutSpusInput, ShopUncheckedCreateWithoutSpusInput>
  }

  export type SkuCreateWithoutSpuInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skuImages?: SkuImageCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutSpuInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skuImages?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutSpuInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput>
  }

  export type SkuCreateManySpuInputEnvelope = {
    data: SkuCreateManySpuInput | SkuCreateManySpuInput[]
    skipDuplicates?: boolean
  }

  export type SpuImageCreateWithoutSpuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SpuImageUncheckedCreateWithoutSpuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SpuImageCreateOrConnectWithoutSpuInput = {
    where: SpuImageWhereUniqueInput
    create: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput>
  }

  export type SpuImageCreateManySpuInputEnvelope = {
    data: SpuImageCreateManySpuInput | SpuImageCreateManySpuInput[]
    skipDuplicates?: boolean
  }

  export type SpuAttributeCreateWithoutSpuInput = {
    id?: string
    createdAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutSpuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSpuAttributesInput
  }

  export type SpuAttributeUncheckedCreateWithoutSpuInput = {
    id?: string
    createdAt?: Date | string
    attributeId: string
    attributeValueId: string
  }

  export type SpuAttributeCreateOrConnectWithoutSpuInput = {
    where: SpuAttributeWhereUniqueInput
    create: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput>
  }

  export type SpuAttributeCreateManySpuInputEnvelope = {
    data: SpuAttributeCreateManySpuInput | SpuAttributeCreateManySpuInput[]
    skipDuplicates?: boolean
  }

  export type SpuTagCreateWithoutSpuInput = {
    id?: string
    createdAt?: Date | string
    tag: TagCreateNestedOneWithoutSpuTagsInput
  }

  export type SpuTagUncheckedCreateWithoutSpuInput = {
    id?: string
    createdAt?: Date | string
    tagId: string
  }

  export type SpuTagCreateOrConnectWithoutSpuInput = {
    where: SpuTagWhereUniqueInput
    create: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput>
  }

  export type SpuTagCreateManySpuInputEnvelope = {
    data: SpuTagCreateManySpuInput | SpuTagCreateManySpuInput[]
    skipDuplicates?: boolean
  }

  export type SpuVariationCreateWithoutSpuInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutSpuVariationsInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationUncheckedCreateWithoutSpuInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    attributeId: string
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationCreateOrConnectWithoutSpuInput = {
    where: SpuVariationWhereUniqueInput
    create: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput>
  }

  export type SpuVariationCreateManySpuInputEnvelope = {
    data: SpuVariationCreateManySpuInput | SpuVariationCreateManySpuInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutSpusInput = {
    update: XOR<CategoryUpdateWithoutSpusInput, CategoryUncheckedUpdateWithoutSpusInput>
    create: XOR<CategoryCreateWithoutSpusInput, CategoryUncheckedCreateWithoutSpusInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSpusInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSpusInput, CategoryUncheckedUpdateWithoutSpusInput>
  }

  export type CategoryUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type BrandUpsertWithoutSpusInput = {
    update: XOR<BrandUpdateWithoutSpusInput, BrandUncheckedUpdateWithoutSpusInput>
    create: XOR<BrandCreateWithoutSpusInput, BrandUncheckedCreateWithoutSpusInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutSpusInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutSpusInput, BrandUncheckedUpdateWithoutSpusInput>
  }

  export type BrandUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUpsertWithoutSpusInput = {
    update: XOR<ShopUpdateWithoutSpusInput, ShopUncheckedUpdateWithoutSpusInput>
    create: XOR<ShopCreateWithoutSpusInput, ShopUncheckedCreateWithoutSpusInput>
    where?: ShopWhereInput
  }

  export type ShopUpdateToOneWithWhereWithoutSpusInput = {
    where?: ShopWhereInput
    data: XOR<ShopUpdateWithoutSpusInput, ShopUncheckedUpdateWithoutSpusInput>
  }

  export type ShopUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutShopsNestedInput
  }

  export type ShopUncheckedUpdateWithoutSpusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuUpsertWithWhereUniqueWithoutSpuInput = {
    where: SkuWhereUniqueInput
    update: XOR<SkuUpdateWithoutSpuInput, SkuUncheckedUpdateWithoutSpuInput>
    create: XOR<SkuCreateWithoutSpuInput, SkuUncheckedCreateWithoutSpuInput>
  }

  export type SkuUpdateWithWhereUniqueWithoutSpuInput = {
    where: SkuWhereUniqueInput
    data: XOR<SkuUpdateWithoutSpuInput, SkuUncheckedUpdateWithoutSpuInput>
  }

  export type SkuUpdateManyWithWhereWithoutSpuInput = {
    where: SkuScalarWhereInput
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyWithoutSpuInput>
  }

  export type SkuScalarWhereInput = {
    AND?: SkuScalarWhereInput | SkuScalarWhereInput[]
    OR?: SkuScalarWhereInput[]
    NOT?: SkuScalarWhereInput | SkuScalarWhereInput[]
    id?: UuidFilter<"Sku"> | string
    skuCode?: StringFilter<"Sku"> | string
    name?: StringFilter<"Sku"> | string
    originalPrice?: DecimalFilter<"Sku"> | Decimal | DecimalJsLike | number | string
    salePrice?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    stock?: IntFilter<"Sku"> | number
    weight?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    length?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    width?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"Sku"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFilter<"Sku"> | $Enums.SkuStatus
    isActive?: BoolFilter<"Sku"> | boolean
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
    spuId?: UuidFilter<"Sku"> | string
  }

  export type SpuImageUpsertWithWhereUniqueWithoutSpuInput = {
    where: SpuImageWhereUniqueInput
    update: XOR<SpuImageUpdateWithoutSpuInput, SpuImageUncheckedUpdateWithoutSpuInput>
    create: XOR<SpuImageCreateWithoutSpuInput, SpuImageUncheckedCreateWithoutSpuInput>
  }

  export type SpuImageUpdateWithWhereUniqueWithoutSpuInput = {
    where: SpuImageWhereUniqueInput
    data: XOR<SpuImageUpdateWithoutSpuInput, SpuImageUncheckedUpdateWithoutSpuInput>
  }

  export type SpuImageUpdateManyWithWhereWithoutSpuInput = {
    where: SpuImageScalarWhereInput
    data: XOR<SpuImageUpdateManyMutationInput, SpuImageUncheckedUpdateManyWithoutSpuInput>
  }

  export type SpuImageScalarWhereInput = {
    AND?: SpuImageScalarWhereInput | SpuImageScalarWhereInput[]
    OR?: SpuImageScalarWhereInput[]
    NOT?: SpuImageScalarWhereInput | SpuImageScalarWhereInput[]
    id?: UuidFilter<"SpuImage"> | string
    imageUrl?: StringFilter<"SpuImage"> | string
    altText?: StringNullableFilter<"SpuImage"> | string | null
    sortOrder?: IntFilter<"SpuImage"> | number
    isMain?: BoolFilter<"SpuImage"> | boolean
    createdAt?: DateTimeFilter<"SpuImage"> | Date | string
    spuId?: UuidFilter<"SpuImage"> | string
  }

  export type SpuAttributeUpsertWithWhereUniqueWithoutSpuInput = {
    where: SpuAttributeWhereUniqueInput
    update: XOR<SpuAttributeUpdateWithoutSpuInput, SpuAttributeUncheckedUpdateWithoutSpuInput>
    create: XOR<SpuAttributeCreateWithoutSpuInput, SpuAttributeUncheckedCreateWithoutSpuInput>
  }

  export type SpuAttributeUpdateWithWhereUniqueWithoutSpuInput = {
    where: SpuAttributeWhereUniqueInput
    data: XOR<SpuAttributeUpdateWithoutSpuInput, SpuAttributeUncheckedUpdateWithoutSpuInput>
  }

  export type SpuAttributeUpdateManyWithWhereWithoutSpuInput = {
    where: SpuAttributeScalarWhereInput
    data: XOR<SpuAttributeUpdateManyMutationInput, SpuAttributeUncheckedUpdateManyWithoutSpuInput>
  }

  export type SpuAttributeScalarWhereInput = {
    AND?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
    OR?: SpuAttributeScalarWhereInput[]
    NOT?: SpuAttributeScalarWhereInput | SpuAttributeScalarWhereInput[]
    id?: UuidFilter<"SpuAttribute"> | string
    createdAt?: DateTimeFilter<"SpuAttribute"> | Date | string
    spuId?: UuidFilter<"SpuAttribute"> | string
    attributeId?: UuidFilter<"SpuAttribute"> | string
    attributeValueId?: UuidFilter<"SpuAttribute"> | string
  }

  export type SpuTagUpsertWithWhereUniqueWithoutSpuInput = {
    where: SpuTagWhereUniqueInput
    update: XOR<SpuTagUpdateWithoutSpuInput, SpuTagUncheckedUpdateWithoutSpuInput>
    create: XOR<SpuTagCreateWithoutSpuInput, SpuTagUncheckedCreateWithoutSpuInput>
  }

  export type SpuTagUpdateWithWhereUniqueWithoutSpuInput = {
    where: SpuTagWhereUniqueInput
    data: XOR<SpuTagUpdateWithoutSpuInput, SpuTagUncheckedUpdateWithoutSpuInput>
  }

  export type SpuTagUpdateManyWithWhereWithoutSpuInput = {
    where: SpuTagScalarWhereInput
    data: XOR<SpuTagUpdateManyMutationInput, SpuTagUncheckedUpdateManyWithoutSpuInput>
  }

  export type SpuTagScalarWhereInput = {
    AND?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
    OR?: SpuTagScalarWhereInput[]
    NOT?: SpuTagScalarWhereInput | SpuTagScalarWhereInput[]
    id?: UuidFilter<"SpuTag"> | string
    createdAt?: DateTimeFilter<"SpuTag"> | Date | string
    spuId?: UuidFilter<"SpuTag"> | string
    tagId?: UuidFilter<"SpuTag"> | string
  }

  export type SpuVariationUpsertWithWhereUniqueWithoutSpuInput = {
    where: SpuVariationWhereUniqueInput
    update: XOR<SpuVariationUpdateWithoutSpuInput, SpuVariationUncheckedUpdateWithoutSpuInput>
    create: XOR<SpuVariationCreateWithoutSpuInput, SpuVariationUncheckedCreateWithoutSpuInput>
  }

  export type SpuVariationUpdateWithWhereUniqueWithoutSpuInput = {
    where: SpuVariationWhereUniqueInput
    data: XOR<SpuVariationUpdateWithoutSpuInput, SpuVariationUncheckedUpdateWithoutSpuInput>
  }

  export type SpuVariationUpdateManyWithWhereWithoutSpuInput = {
    where: SpuVariationScalarWhereInput
    data: XOR<SpuVariationUpdateManyMutationInput, SpuVariationUncheckedUpdateManyWithoutSpuInput>
  }

  export type SpuVariationScalarWhereInput = {
    AND?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
    OR?: SpuVariationScalarWhereInput[]
    NOT?: SpuVariationScalarWhereInput | SpuVariationScalarWhereInput[]
    id?: UuidFilter<"SpuVariation"> | string
    name?: StringFilter<"SpuVariation"> | string
    sortOrder?: IntFilter<"SpuVariation"> | number
    createdAt?: DateTimeFilter<"SpuVariation"> | Date | string
    spuId?: UuidFilter<"SpuVariation"> | string
    attributeId?: UuidFilter<"SpuVariation"> | string
  }

  export type SpuCreateWithoutSkusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutSkusInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutSkusInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutSkusInput, SpuUncheckedCreateWithoutSkusInput>
  }

  export type SkuImageCreateWithoutSkuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SkuImageUncheckedCreateWithoutSkuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SkuImageCreateOrConnectWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    create: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput>
  }

  export type SkuImageCreateManySkuInputEnvelope = {
    data: SkuImageCreateManySkuInput | SkuImageCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type SkuAttributeCreateWithoutSkuInput = {
    id?: string
    createdAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutSkuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuAttributesInput
  }

  export type SkuAttributeUncheckedCreateWithoutSkuInput = {
    id?: string
    createdAt?: Date | string
    attributeId: string
    attributeValueId: string
  }

  export type SkuAttributeCreateOrConnectWithoutSkuInput = {
    where: SkuAttributeWhereUniqueInput
    create: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput>
  }

  export type SkuAttributeCreateManySkuInputEnvelope = {
    data: SkuAttributeCreateManySkuInput | SkuAttributeCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type SkuVariationValueCreateWithoutSkuInput = {
    id?: string
    createdAt?: Date | string
    spuVariation: SpuVariationCreateNestedOneWithoutSkuVariationValuesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuVariationValuesInput
  }

  export type SkuVariationValueUncheckedCreateWithoutSkuInput = {
    id?: string
    createdAt?: Date | string
    spuVariationId: string
    attributeValueId: string
  }

  export type SkuVariationValueCreateOrConnectWithoutSkuInput = {
    where: SkuVariationValueWhereUniqueInput
    create: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput>
  }

  export type SkuVariationValueCreateManySkuInputEnvelope = {
    data: SkuVariationValueCreateManySkuInput | SkuVariationValueCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type SpuUpsertWithoutSkusInput = {
    update: XOR<SpuUpdateWithoutSkusInput, SpuUncheckedUpdateWithoutSkusInput>
    create: XOR<SpuCreateWithoutSkusInput, SpuUncheckedCreateWithoutSkusInput>
    where?: SpuWhereInput
  }

  export type SpuUpdateToOneWithWhereWithoutSkusInput = {
    where?: SpuWhereInput
    data: XOR<SpuUpdateWithoutSkusInput, SpuUncheckedUpdateWithoutSkusInput>
  }

  export type SpuUpdateWithoutSkusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutSkusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SkuImageUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    update: XOR<SkuImageUpdateWithoutSkuInput, SkuImageUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput>
  }

  export type SkuImageUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    data: XOR<SkuImageUpdateWithoutSkuInput, SkuImageUncheckedUpdateWithoutSkuInput>
  }

  export type SkuImageUpdateManyWithWhereWithoutSkuInput = {
    where: SkuImageScalarWhereInput
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuImageScalarWhereInput = {
    AND?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
    OR?: SkuImageScalarWhereInput[]
    NOT?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
    id?: UuidFilter<"SkuImage"> | string
    imageUrl?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    sortOrder?: IntFilter<"SkuImage"> | number
    isMain?: BoolFilter<"SkuImage"> | boolean
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
    skuId?: UuidFilter<"SkuImage"> | string
  }

  export type SkuAttributeUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuAttributeWhereUniqueInput
    update: XOR<SkuAttributeUpdateWithoutSkuInput, SkuAttributeUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuAttributeCreateWithoutSkuInput, SkuAttributeUncheckedCreateWithoutSkuInput>
  }

  export type SkuAttributeUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuAttributeWhereUniqueInput
    data: XOR<SkuAttributeUpdateWithoutSkuInput, SkuAttributeUncheckedUpdateWithoutSkuInput>
  }

  export type SkuAttributeUpdateManyWithWhereWithoutSkuInput = {
    where: SkuAttributeScalarWhereInput
    data: XOR<SkuAttributeUpdateManyMutationInput, SkuAttributeUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuAttributeScalarWhereInput = {
    AND?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
    OR?: SkuAttributeScalarWhereInput[]
    NOT?: SkuAttributeScalarWhereInput | SkuAttributeScalarWhereInput[]
    id?: UuidFilter<"SkuAttribute"> | string
    createdAt?: DateTimeFilter<"SkuAttribute"> | Date | string
    skuId?: UuidFilter<"SkuAttribute"> | string
    attributeId?: UuidFilter<"SkuAttribute"> | string
    attributeValueId?: UuidFilter<"SkuAttribute"> | string
  }

  export type SkuVariationValueUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuVariationValueWhereUniqueInput
    update: XOR<SkuVariationValueUpdateWithoutSkuInput, SkuVariationValueUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuVariationValueCreateWithoutSkuInput, SkuVariationValueUncheckedCreateWithoutSkuInput>
  }

  export type SkuVariationValueUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuVariationValueWhereUniqueInput
    data: XOR<SkuVariationValueUpdateWithoutSkuInput, SkuVariationValueUncheckedUpdateWithoutSkuInput>
  }

  export type SkuVariationValueUpdateManyWithWhereWithoutSkuInput = {
    where: SkuVariationValueScalarWhereInput
    data: XOR<SkuVariationValueUpdateManyMutationInput, SkuVariationValueUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuVariationValueScalarWhereInput = {
    AND?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
    OR?: SkuVariationValueScalarWhereInput[]
    NOT?: SkuVariationValueScalarWhereInput | SkuVariationValueScalarWhereInput[]
    id?: UuidFilter<"SkuVariationValue"> | string
    createdAt?: DateTimeFilter<"SkuVariationValue"> | Date | string
    skuId?: UuidFilter<"SkuVariationValue"> | string
    spuVariationId?: UuidFilter<"SkuVariationValue"> | string
    attributeValueId?: UuidFilter<"SkuVariationValue"> | string
  }

  export type SpuCreateWithoutSpuImagesInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutSpuImagesInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutSpuImagesInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutSpuImagesInput, SpuUncheckedCreateWithoutSpuImagesInput>
  }

  export type SpuUpsertWithoutSpuImagesInput = {
    update: XOR<SpuUpdateWithoutSpuImagesInput, SpuUncheckedUpdateWithoutSpuImagesInput>
    create: XOR<SpuCreateWithoutSpuImagesInput, SpuUncheckedCreateWithoutSpuImagesInput>
    where?: SpuWhereInput
  }

  export type SpuUpdateToOneWithWhereWithoutSpuImagesInput = {
    where?: SpuWhereInput
    data: XOR<SpuUpdateWithoutSpuImagesInput, SpuUncheckedUpdateWithoutSpuImagesInput>
  }

  export type SpuUpdateWithoutSpuImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutSpuImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SkuCreateWithoutSkuImagesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spu: SpuCreateNestedOneWithoutSkusInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutSkuImagesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuId: string
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutSkuImagesInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutSkuImagesInput, SkuUncheckedCreateWithoutSkuImagesInput>
  }

  export type SkuUpsertWithoutSkuImagesInput = {
    update: XOR<SkuUpdateWithoutSkuImagesInput, SkuUncheckedUpdateWithoutSkuImagesInput>
    create: XOR<SkuCreateWithoutSkuImagesInput, SkuUncheckedCreateWithoutSkuImagesInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutSkuImagesInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutSkuImagesInput, SkuUncheckedUpdateWithoutSkuImagesInput>
  }

  export type SkuUpdateWithoutSkuImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSkusNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutSkuImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SpuAttributeCreateWithoutAttributeInput = {
    id?: string
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSpuAttributesInput
  }

  export type SpuAttributeUncheckedCreateWithoutAttributeInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeValueId: string
  }

  export type SpuAttributeCreateOrConnectWithoutAttributeInput = {
    where: SpuAttributeWhereUniqueInput
    create: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type SpuAttributeCreateManyAttributeInputEnvelope = {
    data: SpuAttributeCreateManyAttributeInput | SpuAttributeCreateManyAttributeInput[]
    skipDuplicates?: boolean
  }

  export type SkuAttributeCreateWithoutAttributeInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuAttributesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuAttributesInput
  }

  export type SkuAttributeUncheckedCreateWithoutAttributeInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeValueId: string
  }

  export type SkuAttributeCreateOrConnectWithoutAttributeInput = {
    where: SkuAttributeWhereUniqueInput
    create: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type SkuAttributeCreateManyAttributeInputEnvelope = {
    data: SkuAttributeCreateManyAttributeInput | SkuAttributeCreateManyAttributeInput[]
    skipDuplicates?: boolean
  }

  export type AttributeValueCreateWithoutAttributeInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUncheckedCreateWithoutAttributeInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueCreateOrConnectWithoutAttributeInput = {
    where: AttributeValueWhereUniqueInput
    create: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput>
  }

  export type AttributeValueCreateManyAttributeInputEnvelope = {
    data: AttributeValueCreateManyAttributeInput | AttributeValueCreateManyAttributeInput[]
    skipDuplicates?: boolean
  }

  export type SpuVariationCreateWithoutAttributeInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuVariationsInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationUncheckedCreateWithoutAttributeInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spuId: string
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSpuVariationInput
  }

  export type SpuVariationCreateOrConnectWithoutAttributeInput = {
    where: SpuVariationWhereUniqueInput
    create: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput>
  }

  export type SpuVariationCreateManyAttributeInputEnvelope = {
    data: SpuVariationCreateManyAttributeInput | SpuVariationCreateManyAttributeInput[]
    skipDuplicates?: boolean
  }

  export type SpuAttributeUpsertWithWhereUniqueWithoutAttributeInput = {
    where: SpuAttributeWhereUniqueInput
    update: XOR<SpuAttributeUpdateWithoutAttributeInput, SpuAttributeUncheckedUpdateWithoutAttributeInput>
    create: XOR<SpuAttributeCreateWithoutAttributeInput, SpuAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type SpuAttributeUpdateWithWhereUniqueWithoutAttributeInput = {
    where: SpuAttributeWhereUniqueInput
    data: XOR<SpuAttributeUpdateWithoutAttributeInput, SpuAttributeUncheckedUpdateWithoutAttributeInput>
  }

  export type SpuAttributeUpdateManyWithWhereWithoutAttributeInput = {
    where: SpuAttributeScalarWhereInput
    data: XOR<SpuAttributeUpdateManyMutationInput, SpuAttributeUncheckedUpdateManyWithoutAttributeInput>
  }

  export type SkuAttributeUpsertWithWhereUniqueWithoutAttributeInput = {
    where: SkuAttributeWhereUniqueInput
    update: XOR<SkuAttributeUpdateWithoutAttributeInput, SkuAttributeUncheckedUpdateWithoutAttributeInput>
    create: XOR<SkuAttributeCreateWithoutAttributeInput, SkuAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type SkuAttributeUpdateWithWhereUniqueWithoutAttributeInput = {
    where: SkuAttributeWhereUniqueInput
    data: XOR<SkuAttributeUpdateWithoutAttributeInput, SkuAttributeUncheckedUpdateWithoutAttributeInput>
  }

  export type SkuAttributeUpdateManyWithWhereWithoutAttributeInput = {
    where: SkuAttributeScalarWhereInput
    data: XOR<SkuAttributeUpdateManyMutationInput, SkuAttributeUncheckedUpdateManyWithoutAttributeInput>
  }

  export type AttributeValueUpsertWithWhereUniqueWithoutAttributeInput = {
    where: AttributeValueWhereUniqueInput
    update: XOR<AttributeValueUpdateWithoutAttributeInput, AttributeValueUncheckedUpdateWithoutAttributeInput>
    create: XOR<AttributeValueCreateWithoutAttributeInput, AttributeValueUncheckedCreateWithoutAttributeInput>
  }

  export type AttributeValueUpdateWithWhereUniqueWithoutAttributeInput = {
    where: AttributeValueWhereUniqueInput
    data: XOR<AttributeValueUpdateWithoutAttributeInput, AttributeValueUncheckedUpdateWithoutAttributeInput>
  }

  export type AttributeValueUpdateManyWithWhereWithoutAttributeInput = {
    where: AttributeValueScalarWhereInput
    data: XOR<AttributeValueUpdateManyMutationInput, AttributeValueUncheckedUpdateManyWithoutAttributeInput>
  }

  export type AttributeValueScalarWhereInput = {
    AND?: AttributeValueScalarWhereInput | AttributeValueScalarWhereInput[]
    OR?: AttributeValueScalarWhereInput[]
    NOT?: AttributeValueScalarWhereInput | AttributeValueScalarWhereInput[]
    id?: UuidFilter<"AttributeValue"> | string
    value?: StringFilter<"AttributeValue"> | string
    displayName?: StringNullableFilter<"AttributeValue"> | string | null
    colorCode?: StringNullableFilter<"AttributeValue"> | string | null
    imageUrl?: StringNullableFilter<"AttributeValue"> | string | null
    sortOrder?: IntFilter<"AttributeValue"> | number
    isActive?: BoolFilter<"AttributeValue"> | boolean
    createdAt?: DateTimeFilter<"AttributeValue"> | Date | string
    updatedAt?: DateTimeFilter<"AttributeValue"> | Date | string
    attributeId?: UuidFilter<"AttributeValue"> | string
  }

  export type SpuVariationUpsertWithWhereUniqueWithoutAttributeInput = {
    where: SpuVariationWhereUniqueInput
    update: XOR<SpuVariationUpdateWithoutAttributeInput, SpuVariationUncheckedUpdateWithoutAttributeInput>
    create: XOR<SpuVariationCreateWithoutAttributeInput, SpuVariationUncheckedCreateWithoutAttributeInput>
  }

  export type SpuVariationUpdateWithWhereUniqueWithoutAttributeInput = {
    where: SpuVariationWhereUniqueInput
    data: XOR<SpuVariationUpdateWithoutAttributeInput, SpuVariationUncheckedUpdateWithoutAttributeInput>
  }

  export type SpuVariationUpdateManyWithWhereWithoutAttributeInput = {
    where: SpuVariationScalarWhereInput
    data: XOR<SpuVariationUpdateManyMutationInput, SpuVariationUncheckedUpdateManyWithoutAttributeInput>
  }

  export type AttributeCreateWithoutAttributeValuesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateWithoutAttributeValuesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeCreateOrConnectWithoutAttributeValuesInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutAttributeValuesInput, AttributeUncheckedCreateWithoutAttributeValuesInput>
  }

  export type SpuAttributeCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuAttributesInput
    attribute: AttributeCreateNestedOneWithoutSpuAttributesInput
  }

  export type SpuAttributeUncheckedCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeId: string
  }

  export type SpuAttributeCreateOrConnectWithoutAttributeValueInput = {
    where: SpuAttributeWhereUniqueInput
    create: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput>
  }

  export type SpuAttributeCreateManyAttributeValueInputEnvelope = {
    data: SpuAttributeCreateManyAttributeValueInput | SpuAttributeCreateManyAttributeValueInput[]
    skipDuplicates?: boolean
  }

  export type SkuAttributeCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuAttributesInput
    attribute: AttributeCreateNestedOneWithoutSkuAttributesInput
  }

  export type SkuAttributeUncheckedCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeId: string
  }

  export type SkuAttributeCreateOrConnectWithoutAttributeValueInput = {
    where: SkuAttributeWhereUniqueInput
    create: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput>
  }

  export type SkuAttributeCreateManyAttributeValueInputEnvelope = {
    data: SkuAttributeCreateManyAttributeValueInput | SkuAttributeCreateManyAttributeValueInput[]
    skipDuplicates?: boolean
  }

  export type SkuVariationValueCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuVariationValuesInput
    spuVariation: SpuVariationCreateNestedOneWithoutSkuVariationValuesInput
  }

  export type SkuVariationValueUncheckedCreateWithoutAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    spuVariationId: string
  }

  export type SkuVariationValueCreateOrConnectWithoutAttributeValueInput = {
    where: SkuVariationValueWhereUniqueInput
    create: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput>
  }

  export type SkuVariationValueCreateManyAttributeValueInputEnvelope = {
    data: SkuVariationValueCreateManyAttributeValueInput | SkuVariationValueCreateManyAttributeValueInput[]
    skipDuplicates?: boolean
  }

  export type AttributeUpsertWithoutAttributeValuesInput = {
    update: XOR<AttributeUpdateWithoutAttributeValuesInput, AttributeUncheckedUpdateWithoutAttributeValuesInput>
    create: XOR<AttributeCreateWithoutAttributeValuesInput, AttributeUncheckedCreateWithoutAttributeValuesInput>
    where?: AttributeWhereInput
  }

  export type AttributeUpdateToOneWithWhereWithoutAttributeValuesInput = {
    where?: AttributeWhereInput
    data: XOR<AttributeUpdateWithoutAttributeValuesInput, AttributeUncheckedUpdateWithoutAttributeValuesInput>
  }

  export type AttributeUpdateWithoutAttributeValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateWithoutAttributeValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type SpuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput = {
    where: SpuAttributeWhereUniqueInput
    update: XOR<SpuAttributeUpdateWithoutAttributeValueInput, SpuAttributeUncheckedUpdateWithoutAttributeValueInput>
    create: XOR<SpuAttributeCreateWithoutAttributeValueInput, SpuAttributeUncheckedCreateWithoutAttributeValueInput>
  }

  export type SpuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput = {
    where: SpuAttributeWhereUniqueInput
    data: XOR<SpuAttributeUpdateWithoutAttributeValueInput, SpuAttributeUncheckedUpdateWithoutAttributeValueInput>
  }

  export type SpuAttributeUpdateManyWithWhereWithoutAttributeValueInput = {
    where: SpuAttributeScalarWhereInput
    data: XOR<SpuAttributeUpdateManyMutationInput, SpuAttributeUncheckedUpdateManyWithoutAttributeValueInput>
  }

  export type SkuAttributeUpsertWithWhereUniqueWithoutAttributeValueInput = {
    where: SkuAttributeWhereUniqueInput
    update: XOR<SkuAttributeUpdateWithoutAttributeValueInput, SkuAttributeUncheckedUpdateWithoutAttributeValueInput>
    create: XOR<SkuAttributeCreateWithoutAttributeValueInput, SkuAttributeUncheckedCreateWithoutAttributeValueInput>
  }

  export type SkuAttributeUpdateWithWhereUniqueWithoutAttributeValueInput = {
    where: SkuAttributeWhereUniqueInput
    data: XOR<SkuAttributeUpdateWithoutAttributeValueInput, SkuAttributeUncheckedUpdateWithoutAttributeValueInput>
  }

  export type SkuAttributeUpdateManyWithWhereWithoutAttributeValueInput = {
    where: SkuAttributeScalarWhereInput
    data: XOR<SkuAttributeUpdateManyMutationInput, SkuAttributeUncheckedUpdateManyWithoutAttributeValueInput>
  }

  export type SkuVariationValueUpsertWithWhereUniqueWithoutAttributeValueInput = {
    where: SkuVariationValueWhereUniqueInput
    update: XOR<SkuVariationValueUpdateWithoutAttributeValueInput, SkuVariationValueUncheckedUpdateWithoutAttributeValueInput>
    create: XOR<SkuVariationValueCreateWithoutAttributeValueInput, SkuVariationValueUncheckedCreateWithoutAttributeValueInput>
  }

  export type SkuVariationValueUpdateWithWhereUniqueWithoutAttributeValueInput = {
    where: SkuVariationValueWhereUniqueInput
    data: XOR<SkuVariationValueUpdateWithoutAttributeValueInput, SkuVariationValueUncheckedUpdateWithoutAttributeValueInput>
  }

  export type SkuVariationValueUpdateManyWithWhereWithoutAttributeValueInput = {
    where: SkuVariationValueScalarWhereInput
    data: XOR<SkuVariationValueUpdateManyMutationInput, SkuVariationValueUncheckedUpdateManyWithoutAttributeValueInput>
  }

  export type SpuCreateWithoutSpuAttributesInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutSpuAttributesInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutSpuAttributesInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutSpuAttributesInput, SpuUncheckedCreateWithoutSpuAttributesInput>
  }

  export type AttributeCreateWithoutSpuAttributesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateWithoutSpuAttributesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueUncheckedCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeCreateOrConnectWithoutSpuAttributesInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutSpuAttributesInput, AttributeUncheckedCreateWithoutSpuAttributesInput>
  }

  export type AttributeValueCreateWithoutSpuAttributesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutAttributeValuesInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUncheckedCreateWithoutSpuAttributesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attributeId: string
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueCreateOrConnectWithoutSpuAttributesInput = {
    where: AttributeValueWhereUniqueInput
    create: XOR<AttributeValueCreateWithoutSpuAttributesInput, AttributeValueUncheckedCreateWithoutSpuAttributesInput>
  }

  export type SpuUpsertWithoutSpuAttributesInput = {
    update: XOR<SpuUpdateWithoutSpuAttributesInput, SpuUncheckedUpdateWithoutSpuAttributesInput>
    create: XOR<SpuCreateWithoutSpuAttributesInput, SpuUncheckedCreateWithoutSpuAttributesInput>
    where?: SpuWhereInput
  }

  export type SpuUpdateToOneWithWhereWithoutSpuAttributesInput = {
    where?: SpuWhereInput
    data: XOR<SpuUpdateWithoutSpuAttributesInput, SpuUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type SpuUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type AttributeUpsertWithoutSpuAttributesInput = {
    update: XOR<AttributeUpdateWithoutSpuAttributesInput, AttributeUncheckedUpdateWithoutSpuAttributesInput>
    create: XOR<AttributeCreateWithoutSpuAttributesInput, AttributeUncheckedCreateWithoutSpuAttributesInput>
    where?: AttributeWhereInput
  }

  export type AttributeUpdateToOneWithWhereWithoutSpuAttributesInput = {
    where?: AttributeWhereInput
    data: XOR<AttributeUpdateWithoutSpuAttributesInput, AttributeUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type AttributeUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUncheckedUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeValueUpsertWithoutSpuAttributesInput = {
    update: XOR<AttributeValueUpdateWithoutSpuAttributesInput, AttributeValueUncheckedUpdateWithoutSpuAttributesInput>
    create: XOR<AttributeValueCreateWithoutSpuAttributesInput, AttributeValueUncheckedCreateWithoutSpuAttributesInput>
    where?: AttributeValueWhereInput
  }

  export type AttributeValueUpdateToOneWithWhereWithoutSpuAttributesInput = {
    where?: AttributeValueWhereInput
    data: XOR<AttributeValueUpdateWithoutSpuAttributesInput, AttributeValueUncheckedUpdateWithoutSpuAttributesInput>
  }

  export type AttributeValueUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutAttributeValuesNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateWithoutSpuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutAttributeValueNestedInput
  }

  export type SkuCreateWithoutSkuAttributesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spu: SpuCreateNestedOneWithoutSkusInput
    skuImages?: SkuImageCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutSkuAttributesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuId: string
    skuImages?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutSkuAttributesInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutSkuAttributesInput, SkuUncheckedCreateWithoutSkuAttributesInput>
  }

  export type AttributeCreateWithoutSkuAttributesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateWithoutSkuAttributesInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueUncheckedCreateNestedManyWithoutAttributeInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeCreateOrConnectWithoutSkuAttributesInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutSkuAttributesInput, AttributeUncheckedCreateWithoutSkuAttributesInput>
  }

  export type AttributeValueCreateWithoutSkuAttributesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutAttributeValuesInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUncheckedCreateWithoutSkuAttributesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attributeId: string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuVariationValues?: SkuVariationValueUncheckedCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueCreateOrConnectWithoutSkuAttributesInput = {
    where: AttributeValueWhereUniqueInput
    create: XOR<AttributeValueCreateWithoutSkuAttributesInput, AttributeValueUncheckedCreateWithoutSkuAttributesInput>
  }

  export type SkuUpsertWithoutSkuAttributesInput = {
    update: XOR<SkuUpdateWithoutSkuAttributesInput, SkuUncheckedUpdateWithoutSkuAttributesInput>
    create: XOR<SkuCreateWithoutSkuAttributesInput, SkuUncheckedCreateWithoutSkuAttributesInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutSkuAttributesInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutSkuAttributesInput, SkuUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type SkuUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSkusNestedInput
    skuImages?: SkuImageUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    skuImages?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type AttributeUpsertWithoutSkuAttributesInput = {
    update: XOR<AttributeUpdateWithoutSkuAttributesInput, AttributeUncheckedUpdateWithoutSkuAttributesInput>
    create: XOR<AttributeCreateWithoutSkuAttributesInput, AttributeUncheckedCreateWithoutSkuAttributesInput>
    where?: AttributeWhereInput
  }

  export type AttributeUpdateToOneWithWhereWithoutSkuAttributesInput = {
    where?: AttributeWhereInput
    data: XOR<AttributeUpdateWithoutSkuAttributesInput, AttributeUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type AttributeUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUncheckedUpdateManyWithoutAttributeNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeValueUpsertWithoutSkuAttributesInput = {
    update: XOR<AttributeValueUpdateWithoutSkuAttributesInput, AttributeValueUncheckedUpdateWithoutSkuAttributesInput>
    create: XOR<AttributeValueCreateWithoutSkuAttributesInput, AttributeValueUncheckedCreateWithoutSkuAttributesInput>
    where?: AttributeValueWhereInput
  }

  export type AttributeValueUpdateToOneWithWhereWithoutSkuAttributesInput = {
    where?: AttributeValueWhereInput
    data: XOR<AttributeValueUpdateWithoutSkuAttributesInput, AttributeValueUncheckedUpdateWithoutSkuAttributesInput>
  }

  export type AttributeValueUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutAttributeValuesNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateWithoutSkuAttributesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutAttributeValueNestedInput
  }

  export type SpuCreateWithoutSpuVariationsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutSpuVariationsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutSpuVariationsInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutSpuVariationsInput, SpuUncheckedCreateWithoutSpuVariationsInput>
  }

  export type AttributeCreateWithoutSpuVariationsInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateWithoutSpuVariationsInput = {
    id?: string
    name: string
    displayName: string
    type?: $Enums.AttributeType
    isRequired?: boolean
    isVariation?: boolean
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeInput
    attributeValues?: AttributeValueUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeCreateOrConnectWithoutSpuVariationsInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutSpuVariationsInput, AttributeUncheckedCreateWithoutSpuVariationsInput>
  }

  export type SkuVariationValueCreateWithoutSpuVariationInput = {
    id?: string
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutSkuVariationValuesInput
    attributeValue: AttributeValueCreateNestedOneWithoutSkuVariationValuesInput
  }

  export type SkuVariationValueUncheckedCreateWithoutSpuVariationInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeValueId: string
  }

  export type SkuVariationValueCreateOrConnectWithoutSpuVariationInput = {
    where: SkuVariationValueWhereUniqueInput
    create: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput>
  }

  export type SkuVariationValueCreateManySpuVariationInputEnvelope = {
    data: SkuVariationValueCreateManySpuVariationInput | SkuVariationValueCreateManySpuVariationInput[]
    skipDuplicates?: boolean
  }

  export type SpuUpsertWithoutSpuVariationsInput = {
    update: XOR<SpuUpdateWithoutSpuVariationsInput, SpuUncheckedUpdateWithoutSpuVariationsInput>
    create: XOR<SpuCreateWithoutSpuVariationsInput, SpuUncheckedCreateWithoutSpuVariationsInput>
    where?: SpuWhereInput
  }

  export type SpuUpdateToOneWithWhereWithoutSpuVariationsInput = {
    where?: SpuWhereInput
    data: XOR<SpuUpdateWithoutSpuVariationsInput, SpuUncheckedUpdateWithoutSpuVariationsInput>
  }

  export type SpuUpdateWithoutSpuVariationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutSpuVariationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type AttributeUpsertWithoutSpuVariationsInput = {
    update: XOR<AttributeUpdateWithoutSpuVariationsInput, AttributeUncheckedUpdateWithoutSpuVariationsInput>
    create: XOR<AttributeCreateWithoutSpuVariationsInput, AttributeUncheckedCreateWithoutSpuVariationsInput>
    where?: AttributeWhereInput
  }

  export type AttributeUpdateToOneWithWhereWithoutSpuVariationsInput = {
    where?: AttributeWhereInput
    data: XOR<AttributeUpdateWithoutSpuVariationsInput, AttributeUncheckedUpdateWithoutSpuVariationsInput>
  }

  export type AttributeUpdateWithoutSpuVariationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateWithoutSpuVariationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isVariation?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeNestedInput
    attributeValues?: AttributeValueUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type SkuVariationValueUpsertWithWhereUniqueWithoutSpuVariationInput = {
    where: SkuVariationValueWhereUniqueInput
    update: XOR<SkuVariationValueUpdateWithoutSpuVariationInput, SkuVariationValueUncheckedUpdateWithoutSpuVariationInput>
    create: XOR<SkuVariationValueCreateWithoutSpuVariationInput, SkuVariationValueUncheckedCreateWithoutSpuVariationInput>
  }

  export type SkuVariationValueUpdateWithWhereUniqueWithoutSpuVariationInput = {
    where: SkuVariationValueWhereUniqueInput
    data: XOR<SkuVariationValueUpdateWithoutSpuVariationInput, SkuVariationValueUncheckedUpdateWithoutSpuVariationInput>
  }

  export type SkuVariationValueUpdateManyWithWhereWithoutSpuVariationInput = {
    where: SkuVariationValueScalarWhereInput
    data: XOR<SkuVariationValueUpdateManyMutationInput, SkuVariationValueUncheckedUpdateManyWithoutSpuVariationInput>
  }

  export type SkuCreateWithoutSkuVariationValuesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spu: SpuCreateNestedOneWithoutSkusInput
    skuImages?: SkuImageCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutSkuVariationValuesInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    spuId: string
    skuImages?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutSkuVariationValuesInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutSkuVariationValuesInput, SkuUncheckedCreateWithoutSkuVariationValuesInput>
  }

  export type SpuVariationCreateWithoutSkuVariationValuesInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuVariationsInput
    attribute: AttributeCreateNestedOneWithoutSpuVariationsInput
  }

  export type SpuVariationUncheckedCreateWithoutSkuVariationValuesInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spuId: string
    attributeId: string
  }

  export type SpuVariationCreateOrConnectWithoutSkuVariationValuesInput = {
    where: SpuVariationWhereUniqueInput
    create: XOR<SpuVariationCreateWithoutSkuVariationValuesInput, SpuVariationUncheckedCreateWithoutSkuVariationValuesInput>
  }

  export type AttributeValueCreateWithoutSkuVariationValuesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attribute: AttributeCreateNestedOneWithoutAttributeValuesInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueUncheckedCreateWithoutSkuVariationValuesInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attributeId: string
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
    skuAttributes?: SkuAttributeUncheckedCreateNestedManyWithoutAttributeValueInput
  }

  export type AttributeValueCreateOrConnectWithoutSkuVariationValuesInput = {
    where: AttributeValueWhereUniqueInput
    create: XOR<AttributeValueCreateWithoutSkuVariationValuesInput, AttributeValueUncheckedCreateWithoutSkuVariationValuesInput>
  }

  export type SkuUpsertWithoutSkuVariationValuesInput = {
    update: XOR<SkuUpdateWithoutSkuVariationValuesInput, SkuUncheckedUpdateWithoutSkuVariationValuesInput>
    create: XOR<SkuCreateWithoutSkuVariationValuesInput, SkuUncheckedCreateWithoutSkuVariationValuesInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutSkuVariationValuesInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutSkuVariationValuesInput, SkuUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type SkuUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSkusNestedInput
    skuImages?: SkuImageUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    skuImages?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SpuVariationUpsertWithoutSkuVariationValuesInput = {
    update: XOR<SpuVariationUpdateWithoutSkuVariationValuesInput, SpuVariationUncheckedUpdateWithoutSkuVariationValuesInput>
    create: XOR<SpuVariationCreateWithoutSkuVariationValuesInput, SpuVariationUncheckedCreateWithoutSkuVariationValuesInput>
    where?: SpuVariationWhereInput
  }

  export type SpuVariationUpdateToOneWithWhereWithoutSkuVariationValuesInput = {
    where?: SpuVariationWhereInput
    data: XOR<SpuVariationUpdateWithoutSkuVariationValuesInput, SpuVariationUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type SpuVariationUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuVariationsNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSpuVariationsNestedInput
  }

  export type SpuVariationUncheckedUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeValueUpsertWithoutSkuVariationValuesInput = {
    update: XOR<AttributeValueUpdateWithoutSkuVariationValuesInput, AttributeValueUncheckedUpdateWithoutSkuVariationValuesInput>
    create: XOR<AttributeValueCreateWithoutSkuVariationValuesInput, AttributeValueUncheckedCreateWithoutSkuVariationValuesInput>
    where?: AttributeValueWhereInput
  }

  export type AttributeValueUpdateToOneWithWhereWithoutSkuVariationValuesInput = {
    where?: AttributeValueWhereInput
    data: XOR<AttributeValueUpdateWithoutSkuVariationValuesInput, AttributeValueUncheckedUpdateWithoutSkuVariationValuesInput>
  }

  export type AttributeValueUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutAttributeValuesNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateWithoutSkuVariationValuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
  }

  export type SpuTagCreateWithoutTagInput = {
    id?: string
    createdAt?: Date | string
    spu: SpuCreateNestedOneWithoutSpuTagsInput
  }

  export type SpuTagUncheckedCreateWithoutTagInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
  }

  export type SpuTagCreateOrConnectWithoutTagInput = {
    where: SpuTagWhereUniqueInput
    create: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput>
  }

  export type SpuTagCreateManyTagInputEnvelope = {
    data: SpuTagCreateManyTagInput | SpuTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type SpuTagUpsertWithWhereUniqueWithoutTagInput = {
    where: SpuTagWhereUniqueInput
    update: XOR<SpuTagUpdateWithoutTagInput, SpuTagUncheckedUpdateWithoutTagInput>
    create: XOR<SpuTagCreateWithoutTagInput, SpuTagUncheckedCreateWithoutTagInput>
  }

  export type SpuTagUpdateWithWhereUniqueWithoutTagInput = {
    where: SpuTagWhereUniqueInput
    data: XOR<SpuTagUpdateWithoutTagInput, SpuTagUncheckedUpdateWithoutTagInput>
  }

  export type SpuTagUpdateManyWithWhereWithoutTagInput = {
    where: SpuTagScalarWhereInput
    data: XOR<SpuTagUpdateManyMutationInput, SpuTagUncheckedUpdateManyWithoutTagInput>
  }

  export type SpuCreateWithoutSpuTagsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    shop: ShopCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutSpuTagsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    shopId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutSpuTagsInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutSpuTagsInput, SpuUncheckedCreateWithoutSpuTagsInput>
  }

  export type TagCreateWithoutSpuTagsInput = {
    id?: string
    name: string
    slug: string
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUncheckedCreateWithoutSpuTagsInput = {
    id?: string
    name: string
    slug: string
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateOrConnectWithoutSpuTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutSpuTagsInput, TagUncheckedCreateWithoutSpuTagsInput>
  }

  export type SpuUpsertWithoutSpuTagsInput = {
    update: XOR<SpuUpdateWithoutSpuTagsInput, SpuUncheckedUpdateWithoutSpuTagsInput>
    create: XOR<SpuCreateWithoutSpuTagsInput, SpuUncheckedCreateWithoutSpuTagsInput>
    where?: SpuWhereInput
  }

  export type SpuUpdateToOneWithWhereWithoutSpuTagsInput = {
    where?: SpuWhereInput
    data: XOR<SpuUpdateWithoutSpuTagsInput, SpuUncheckedUpdateWithoutSpuTagsInput>
  }

  export type SpuUpdateWithoutSpuTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutSpuTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type TagUpsertWithoutSpuTagsInput = {
    update: XOR<TagUpdateWithoutSpuTagsInput, TagUncheckedUpdateWithoutSpuTagsInput>
    create: XOR<TagCreateWithoutSpuTagsInput, TagUncheckedCreateWithoutSpuTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutSpuTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutSpuTagsInput, TagUncheckedUpdateWithoutSpuTagsInput>
  }

  export type TagUpdateWithoutSpuTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutSpuTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutShopsInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    codes?: CodeCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserCreateNestedManyWithoutUserInput
    CreditCard?: CreditCardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShopsInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    codes?: CodeUncheckedCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserUncheckedCreateNestedManyWithoutUserInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShopsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
  }

  export type SpuCreateWithoutShopInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutSpusInput
    brand: BrandCreateNestedOneWithoutSpusInput
    skus?: SkuCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationCreateNestedManyWithoutSpuInput
  }

  export type SpuUncheckedCreateWithoutShopInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
    skus?: SkuUncheckedCreateNestedManyWithoutSpuInput
    spuImages?: SpuImageUncheckedCreateNestedManyWithoutSpuInput
    spuAttributes?: SpuAttributeUncheckedCreateNestedManyWithoutSpuInput
    spuTags?: SpuTagUncheckedCreateNestedManyWithoutSpuInput
    spuVariations?: SpuVariationUncheckedCreateNestedManyWithoutSpuInput
  }

  export type SpuCreateOrConnectWithoutShopInput = {
    where: SpuWhereUniqueInput
    create: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput>
  }

  export type SpuCreateManyShopInputEnvelope = {
    data: SpuCreateManyShopInput | SpuCreateManyShopInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShopsInput = {
    update: XOR<UserUpdateWithoutShopsInput, UserUncheckedUpdateWithoutShopsInput>
    create: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShopsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShopsInput, UserUncheckedUpdateWithoutShopsInput>
  }

  export type UserUpdateWithoutShopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    codes?: CodeUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUpdateManyWithoutUserNestedInput
    CreditCard?: CreditCardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    codes?: CodeUncheckedUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUncheckedUpdateManyWithoutUserNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SpuUpsertWithWhereUniqueWithoutShopInput = {
    where: SpuWhereUniqueInput
    update: XOR<SpuUpdateWithoutShopInput, SpuUncheckedUpdateWithoutShopInput>
    create: XOR<SpuCreateWithoutShopInput, SpuUncheckedCreateWithoutShopInput>
  }

  export type SpuUpdateWithWhereUniqueWithoutShopInput = {
    where: SpuWhereUniqueInput
    data: XOR<SpuUpdateWithoutShopInput, SpuUncheckedUpdateWithoutShopInput>
  }

  export type SpuUpdateManyWithWhereWithoutShopInput = {
    where: SpuScalarWhereInput
    data: XOR<SpuUpdateManyMutationInput, SpuUncheckedUpdateManyWithoutShopInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CodeCreateWithoutUserInput = {
    id?: string
    code: string
    createdAt?: Date | string
    expiredAt: Date | string
  }

  export type CodeUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    createdAt?: Date | string
    expiredAt: Date | string
  }

  export type CodeCreateOrConnectWithoutUserInput = {
    where: CodeWhereUniqueInput
    create: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
  }

  export type Oauth2UserCreateWithoutUserInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type Oauth2UserUncheckedCreateWithoutUserInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type Oauth2UserCreateOrConnectWithoutUserInput = {
    where: Oauth2UserWhereUniqueInput
    create: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput>
  }

  export type Oauth2UserCreateManyUserInputEnvelope = {
    data: Oauth2UserCreateManyUserInput | Oauth2UserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShopCreateWithoutOwnerInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    spus?: SpuCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    spus?: SpuUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutOwnerInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
  }

  export type ShopCreateManyOwnerInputEnvelope = {
    data: ShopCreateManyOwnerInput | ShopCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CreditCardCreateWithoutUserInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditCardUncheckedCreateWithoutUserInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditCardCreateOrConnectWithoutUserInput = {
    where: CreditCardWhereUniqueInput
    create: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput>
  }

  export type CreditCardCreateManyUserInputEnvelope = {
    data: CreditCardCreateManyUserInput | CreditCardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: UuidFilter<"Session"> | string
    hashingRefreshToken?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringFilter<"Session"> | string
    userIp?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    loginedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    logoutedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: UuidFilter<"Session"> | string
  }

  export type CodeUpsertWithoutUserInput = {
    update: XOR<CodeUpdateWithoutUserInput, CodeUncheckedUpdateWithoutUserInput>
    create: XOR<CodeCreateWithoutUserInput, CodeUncheckedCreateWithoutUserInput>
    where?: CodeWhereInput
  }

  export type CodeUpdateToOneWithWhereWithoutUserInput = {
    where?: CodeWhereInput
    data: XOR<CodeUpdateWithoutUserInput, CodeUncheckedUpdateWithoutUserInput>
  }

  export type CodeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Oauth2UserUpsertWithWhereUniqueWithoutUserInput = {
    where: Oauth2UserWhereUniqueInput
    update: XOR<Oauth2UserUpdateWithoutUserInput, Oauth2UserUncheckedUpdateWithoutUserInput>
    create: XOR<Oauth2UserCreateWithoutUserInput, Oauth2UserUncheckedCreateWithoutUserInput>
  }

  export type Oauth2UserUpdateWithWhereUniqueWithoutUserInput = {
    where: Oauth2UserWhereUniqueInput
    data: XOR<Oauth2UserUpdateWithoutUserInput, Oauth2UserUncheckedUpdateWithoutUserInput>
  }

  export type Oauth2UserUpdateManyWithWhereWithoutUserInput = {
    where: Oauth2UserScalarWhereInput
    data: XOR<Oauth2UserUpdateManyMutationInput, Oauth2UserUncheckedUpdateManyWithoutUserInput>
  }

  export type Oauth2UserScalarWhereInput = {
    AND?: Oauth2UserScalarWhereInput | Oauth2UserScalarWhereInput[]
    OR?: Oauth2UserScalarWhereInput[]
    NOT?: Oauth2UserScalarWhereInput | Oauth2UserScalarWhereInput[]
    id?: UuidFilter<"Oauth2User"> | string
    provider?: EnumProviderFilter<"Oauth2User"> | $Enums.Provider
    providerUserId?: StringFilter<"Oauth2User"> | string
    email?: StringFilter<"Oauth2User"> | string
    phone?: StringNullableFilter<"Oauth2User"> | string | null
    firstname?: StringNullableFilter<"Oauth2User"> | string | null
    lastname?: StringNullableFilter<"Oauth2User"> | string | null
    fullname?: StringNullableFilter<"Oauth2User"> | string | null
    avatarUrl?: StringNullableFilter<"Oauth2User"> | string | null
    username?: StringNullableFilter<"Oauth2User"> | string | null
    createdAt?: DateTimeFilter<"Oauth2User"> | Date | string
    updatedAt?: DateTimeFilter<"Oauth2User"> | Date | string
    userId?: UuidFilter<"Oauth2User"> | string
  }

  export type ShopUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ShopWhereUniqueInput
    update: XOR<ShopUpdateWithoutOwnerInput, ShopUncheckedUpdateWithoutOwnerInput>
    create: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
  }

  export type ShopUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ShopWhereUniqueInput
    data: XOR<ShopUpdateWithoutOwnerInput, ShopUncheckedUpdateWithoutOwnerInput>
  }

  export type ShopUpdateManyWithWhereWithoutOwnerInput = {
    where: ShopScalarWhereInput
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ShopScalarWhereInput = {
    AND?: ShopScalarWhereInput | ShopScalarWhereInput[]
    OR?: ShopScalarWhereInput[]
    NOT?: ShopScalarWhereInput | ShopScalarWhereInput[]
    id?: UuidFilter<"Shop"> | string
    name?: StringFilter<"Shop"> | string
    slug?: StringFilter<"Shop"> | string
    description?: StringNullableFilter<"Shop"> | string | null
    logoUrl?: StringNullableFilter<"Shop"> | string | null
    bannerUrl?: StringNullableFilter<"Shop"> | string | null
    email?: StringNullableFilter<"Shop"> | string | null
    phone?: StringNullableFilter<"Shop"> | string | null
    address?: StringNullableFilter<"Shop"> | string | null
    website?: StringNullableFilter<"Shop"> | string | null
    status?: EnumShopStatusFilter<"Shop"> | $Enums.ShopStatus
    isActive?: BoolFilter<"Shop"> | boolean
    isVerified?: BoolFilter<"Shop"> | boolean
    rating?: DecimalNullableFilter<"Shop"> | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFilter<"Shop"> | number
    createdAt?: DateTimeFilter<"Shop"> | Date | string
    updatedAt?: DateTimeFilter<"Shop"> | Date | string
    ownerId?: UuidFilter<"Shop"> | string
  }

  export type CreditCardUpsertWithWhereUniqueWithoutUserInput = {
    where: CreditCardWhereUniqueInput
    update: XOR<CreditCardUpdateWithoutUserInput, CreditCardUncheckedUpdateWithoutUserInput>
    create: XOR<CreditCardCreateWithoutUserInput, CreditCardUncheckedCreateWithoutUserInput>
  }

  export type CreditCardUpdateWithWhereUniqueWithoutUserInput = {
    where: CreditCardWhereUniqueInput
    data: XOR<CreditCardUpdateWithoutUserInput, CreditCardUncheckedUpdateWithoutUserInput>
  }

  export type CreditCardUpdateManyWithWhereWithoutUserInput = {
    where: CreditCardScalarWhereInput
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyWithoutUserInput>
  }

  export type CreditCardScalarWhereInput = {
    AND?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
    OR?: CreditCardScalarWhereInput[]
    NOT?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
    id?: UuidFilter<"CreditCard"> | string
    creditNumber?: StringFilter<"CreditCard"> | string
    expiredDate?: DateTimeFilter<"CreditCard"> | Date | string
    ccvSecure?: StringFilter<"CreditCard"> | string
    name?: StringFilter<"CreditCard"> | string
    address?: StringFilter<"CreditCard"> | string
    postalCode?: StringFilter<"CreditCard"> | string
    userId?: UuidFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
  }

  export type UserCreateWithoutOauth2UserInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    codes?: CodeCreateNestedOneWithoutUserInput
    shops?: ShopCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOauth2UserInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    codes?: CodeUncheckedCreateNestedOneWithoutUserInput
    shops?: ShopUncheckedCreateNestedManyWithoutOwnerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOauth2UserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauth2UserInput, UserUncheckedCreateWithoutOauth2UserInput>
  }

  export type UserUpsertWithoutOauth2UserInput = {
    update: XOR<UserUpdateWithoutOauth2UserInput, UserUncheckedUpdateWithoutOauth2UserInput>
    create: XOR<UserCreateWithoutOauth2UserInput, UserUncheckedCreateWithoutOauth2UserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauth2UserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauth2UserInput, UserUncheckedUpdateWithoutOauth2UserInput>
  }

  export type UserUpdateWithoutOauth2UserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    codes?: CodeUpdateOneWithoutUserNestedInput
    shops?: ShopUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOauth2UserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    codes?: CodeUncheckedUpdateOneWithoutUserNestedInput
    shops?: ShopUncheckedUpdateManyWithoutOwnerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCreditCardInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    codes?: CodeCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserCreateNestedManyWithoutUserInput
    shops?: ShopCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutCreditCardInput = {
    id?: string
    fullname: string
    username: string
    email: string
    phone?: string | null
    hashingPassword?: string | null
    accountType?: $Enums.AccountType
    avatarUrl?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    flags?: UserCreateflagsInput | $Enums.UserFlag[]
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: $Enums.UserVisibility
    isBanned?: boolean
    isLocked?: boolean
    isVerified?: boolean
    lastActived?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    codes?: CodeUncheckedCreateNestedOneWithoutUserInput
    Oauth2User?: Oauth2UserUncheckedCreateNestedManyWithoutUserInput
    shops?: ShopUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutCreditCardInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreditCardInput, UserUncheckedCreateWithoutCreditCardInput>
  }

  export type UserUpsertWithoutCreditCardInput = {
    update: XOR<UserUpdateWithoutCreditCardInput, UserUncheckedUpdateWithoutCreditCardInput>
    create: XOR<UserCreateWithoutCreditCardInput, UserUncheckedCreateWithoutCreditCardInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreditCardInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreditCardInput, UserUncheckedUpdateWithoutCreditCardInput>
  }

  export type UserUpdateWithoutCreditCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    codes?: CodeUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUpdateManyWithoutUserNestedInput
    shops?: ShopUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutCreditCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    flags?: UserUpdateflagsInput | $Enums.UserFlag[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: EnumUserVisibilityFieldUpdateOperationsInput | $Enums.UserVisibility
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    lastActived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    codes?: CodeUncheckedUpdateOneWithoutUserNestedInput
    Oauth2User?: Oauth2UserUncheckedUpdateManyWithoutUserNestedInput
    shops?: ShopUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpuCreateManyCategoryInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    shopId: string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    spus?: SpuUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    spus?: SpuUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuCreateManyBrandInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    shopId: string
  }

  export type SpuUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    shop?: ShopUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    shopId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuCreateManySpuInput = {
    id?: string
    skuCode: string
    name: string
    originalPrice: Decimal | DecimalJsLike | number | string
    salePrice?: Decimal | DecimalJsLike | number | string | null
    stock?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    length?: Decimal | DecimalJsLike | number | string | null
    width?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.SkuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpuImageCreateManySpuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SpuAttributeCreateManySpuInput = {
    id?: string
    createdAt?: Date | string
    attributeId: string
    attributeValueId: string
  }

  export type SpuTagCreateManySpuInput = {
    id?: string
    createdAt?: Date | string
    tagId: string
  }

  export type SpuVariationCreateManySpuInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    attributeId: string
  }

  export type SkuUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuImages?: SkuImageUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuImages?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutSkuNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateManyWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    salePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    length?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    width?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumSkuStatusFieldUpdateOperationsInput | $Enums.SkuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuImageUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuImageUncheckedUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuImageUncheckedUpdateManyWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuAttributeUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutSpuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSpuAttributesNestedInput
  }

  export type SpuAttributeUncheckedUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeUncheckedUpdateManyWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuTagUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutSpuTagsNestedInput
  }

  export type SpuTagUncheckedUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuTagUncheckedUpdateManyWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuVariationUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutSpuVariationsNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationUncheckedUpdateWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationUncheckedUpdateManyWithoutSpuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuImageCreateManySkuInput = {
    id?: string
    imageUrl: string
    altText?: string | null
    sortOrder?: number
    isMain?: boolean
    createdAt?: Date | string
  }

  export type SkuAttributeCreateManySkuInput = {
    id?: string
    createdAt?: Date | string
    attributeId: string
    attributeValueId: string
  }

  export type SkuVariationValueCreateManySkuInput = {
    id?: string
    createdAt?: Date | string
    spuVariationId: string
    attributeValueId: string
  }

  export type SkuImageUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuAttributeUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attribute?: AttributeUpdateOneRequiredWithoutSkuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuAttributesNestedInput
  }

  export type SkuAttributeUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributeId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuVariation?: SpuVariationUpdateOneRequiredWithoutSkuVariationValuesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuVariationValuesNestedInput
  }

  export type SkuVariationValueUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeCreateManyAttributeInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeValueId: string
  }

  export type SkuAttributeCreateManyAttributeInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeValueId: string
  }

  export type AttributeValueCreateManyAttributeInput = {
    id?: string
    value: string
    displayName?: string | null
    colorCode?: string | null
    imageUrl?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpuVariationCreateManyAttributeInput = {
    id?: string
    name: string
    sortOrder?: number
    createdAt?: Date | string
    spuId: string
  }

  export type SpuAttributeUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSpuAttributesNestedInput
  }

  export type SpuAttributeUncheckedUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeUncheckedUpdateManyWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuAttributesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuAttributesNestedInput
  }

  export type SkuAttributeUncheckedUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeUncheckedUpdateManyWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeValueUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuAttributes?: SkuAttributeUncheckedUpdateManyWithoutAttributeValueNestedInput
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutAttributeValueNestedInput
  }

  export type AttributeValueUncheckedUpdateManyWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpuVariationUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuVariationsNestedInput
    skuVariationValues?: SkuVariationValueUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationUncheckedUpdateWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    skuVariationValues?: SkuVariationValueUncheckedUpdateManyWithoutSpuVariationNestedInput
  }

  export type SpuVariationUncheckedUpdateManyWithoutAttributeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeCreateManyAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
    attributeId: string
  }

  export type SkuAttributeCreateManyAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeId: string
  }

  export type SkuVariationValueCreateManyAttributeValueInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    spuVariationId: string
  }

  export type SpuAttributeUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuAttributesNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSpuAttributesNestedInput
  }

  export type SpuAttributeUncheckedUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuAttributeUncheckedUpdateManyWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuAttributesNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutSkuAttributesNestedInput
  }

  export type SkuAttributeUncheckedUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuAttributeUncheckedUpdateManyWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuVariationValuesNestedInput
    spuVariation?: SpuVariationUpdateOneRequiredWithoutSkuVariationValuesNestedInput
  }

  export type SkuVariationValueUncheckedUpdateWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutAttributeValueInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    spuVariationId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueCreateManySpuVariationInput = {
    id?: string
    createdAt?: Date | string
    skuId: string
    attributeValueId: string
  }

  export type SkuVariationValueUpdateWithoutSpuVariationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutSkuVariationValuesNestedInput
    attributeValue?: AttributeValueUpdateOneRequiredWithoutSkuVariationValuesNestedInput
  }

  export type SkuVariationValueUncheckedUpdateWithoutSpuVariationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SkuVariationValueUncheckedUpdateManyWithoutSpuVariationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skuId?: StringFieldUpdateOperationsInput | string
    attributeValueId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuTagCreateManyTagInput = {
    id?: string
    createdAt?: Date | string
    spuId: string
  }

  export type SpuTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spu?: SpuUpdateOneRequiredWithoutSpuTagsNestedInput
  }

  export type SpuTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spuId?: StringFieldUpdateOperationsInput | string
  }

  export type SpuCreateManyShopInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    shortDesc?: string | null
    status?: $Enums.SpuStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    brandId: string
  }

  export type SpuUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSpusNestedInput
    brand?: BrandUpdateOneRequiredWithoutSpusNestedInput
    skus?: SkuUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    skus?: SkuUncheckedUpdateManyWithoutSpuNestedInput
    spuImages?: SpuImageUncheckedUpdateManyWithoutSpuNestedInput
    spuAttributes?: SpuAttributeUncheckedUpdateManyWithoutSpuNestedInput
    spuTags?: SpuTagUncheckedUpdateManyWithoutSpuNestedInput
    spuVariations?: SpuVariationUncheckedUpdateManyWithoutSpuNestedInput
  }

  export type SpuUncheckedUpdateManyWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSpuStatusFieldUpdateOperationsInput | $Enums.SpuStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    hashingRefreshToken?: string | null
    userAgent: string
    userIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginedAt?: Date | string | null
    logoutedAt?: Date | string | null
  }

  export type Oauth2UserCreateManyUserInput = {
    id?: string
    provider: $Enums.Provider
    providerUserId: string
    email: string
    phone?: string | null
    firstname?: string | null
    lastname?: string | null
    fullname?: string | null
    avatarUrl?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopCreateManyOwnerInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    logoUrl?: string | null
    bannerUrl?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    status?: $Enums.ShopStatus
    isActive?: boolean
    isVerified?: boolean
    rating?: Decimal | DecimalJsLike | number | string | null
    totalReviews?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditCardCreateManyUserInput = {
    id?: string
    creditNumber: string
    expiredDate: Date | string
    ccvSecure: string
    name: string
    address: string
    postalCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashingRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: StringFieldUpdateOperationsInput | string
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logoutedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Oauth2UserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Oauth2UserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Oauth2UserUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    providerUserId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spus?: SpuUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spus?: SpuUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShopStatusFieldUpdateOperationsInput | $Enums.ShopStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalReviews?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditNumber?: StringFieldUpdateOperationsInput | string
    expiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ccvSecure?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
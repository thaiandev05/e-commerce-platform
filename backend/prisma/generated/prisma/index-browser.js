
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  hashingRefreshToken: 'hashingRefreshToken',
  userAgent: 'userAgent',
  userIp: 'userIp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loginedAt: 'loginedAt',
  logoutedAt: 'logoutedAt',
  userId: 'userId'
};

exports.Prisma.CodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt',
  userId: 'userId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  websiteUrl: 'websiteUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpuScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDesc: 'shortDesc',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId',
  brandId: 'brandId',
  shopId: 'shopId'
};

exports.Prisma.SkuScalarFieldEnum = {
  id: 'id',
  skuCode: 'skuCode',
  name: 'name',
  originalPrice: 'originalPrice',
  salePrice: 'salePrice',
  stock: 'stock',
  weight: 'weight',
  length: 'length',
  width: 'width',
  height: 'height',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  spuId: 'spuId'
};

exports.Prisma.SpuImageScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  altText: 'altText',
  sortOrder: 'sortOrder',
  isMain: 'isMain',
  createdAt: 'createdAt',
  spuId: 'spuId'
};

exports.Prisma.SkuImageScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  altText: 'altText',
  sortOrder: 'sortOrder',
  isMain: 'isMain',
  createdAt: 'createdAt',
  skuId: 'skuId'
};

exports.Prisma.AttributeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  type: 'type',
  isRequired: 'isRequired',
  isVariation: 'isVariation',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttributeValueScalarFieldEnum = {
  id: 'id',
  value: 'value',
  displayName: 'displayName',
  colorCode: 'colorCode',
  imageUrl: 'imageUrl',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  attributeId: 'attributeId'
};

exports.Prisma.SpuAttributeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  spuId: 'spuId',
  attributeId: 'attributeId',
  attributeValueId: 'attributeValueId'
};

exports.Prisma.SkuAttributeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  skuId: 'skuId',
  attributeId: 'attributeId',
  attributeValueId: 'attributeValueId'
};

exports.Prisma.SpuVariationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  spuId: 'spuId',
  attributeId: 'attributeId'
};

exports.Prisma.SkuVariationValueScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  skuId: 'skuId',
  spuVariationId: 'spuVariationId',
  attributeValueId: 'attributeValueId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpuTagScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  spuId: 'spuId',
  tagId: 'tagId'
};

exports.Prisma.ShopScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  status: 'status',
  isActive: 'isActive',
  isVerified: 'isVerified',
  rating: 'rating',
  totalReviews: 'totalReviews',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  phone: 'phone',
  hashingPassword: 'hashingPassword',
  accountType: 'accountType',
  avatarUrl: 'avatarUrl',
  address: 'address',
  city: 'city',
  state: 'state',
  roles: 'roles',
  flags: 'flags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  visible: 'visible',
  isBanned: 'isBanned',
  isLocked: 'isLocked',
  isVerified: 'isVerified',
  lastActived: 'lastActived'
};

exports.Prisma.Oauth2UserScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerUserId: 'providerUserId',
  email: 'email',
  phone: 'phone',
  firstname: 'firstname',
  lastname: 'lastname',
  fullname: 'fullname',
  avatarUrl: 'avatarUrl',
  username: 'username',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.CreditCardScalarFieldEnum = {
  id: 'id',
  creditNumber: 'creditNumber',
  expiredDate: 'expiredDate',
  ccvSecure: 'ccvSecure',
  name: 'name',
  address: 'address',
  postalCode: 'postalCode',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SpuStatus = exports.$Enums.SpuStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.SkuStatus = exports.$Enums.SkuStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  DISCONTINUED: 'DISCONTINUED'
};

exports.AttributeType = exports.$Enums.AttributeType = {
  TEXT: 'TEXT',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  COLOR: 'COLOR',
  IMAGE: 'IMAGE',
  SELECT: 'SELECT',
  MULTI_SELECT: 'MULTI_SELECT'
};

exports.ShopStatus = exports.$Enums.ShopStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED',
  CLOSED: 'CLOSED'
};

exports.AccountType = exports.$Enums.AccountType = {
  EMAIL: 'EMAIL',
  OAUTH2: 'OAUTH2'
};

exports.UserVisibility = exports.$Enums.UserVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONTACT_ONLY: 'CONTACT_ONLY'
};

exports.UserRole = exports.$Enums.UserRole = {
  ROOT: 'ROOT',
  ADMINSTRATOR: 'ADMINSTRATOR',
  SUPPORTER: 'SUPPORTER',
  COLLABORATOR: 'COLLABORATOR',
  SELLER: 'SELLER',
  USER: 'USER'
};

exports.UserFlag = exports.$Enums.UserFlag = {
  BEST_CUSTOMER: 'BEST_CUSTOMER',
  DIAMOND_CUSTOMER: 'DIAMOND_CUSTOMER',
  GOLD_CUSTOMER: 'GOLD_CUSTOMER',
  SILVER_CUSTOMER: 'SILVER_CUSTOMER',
  COPPER_CUSTOMER: 'COPPER_CUSTOMER',
  CUSTOMER: 'CUSTOMER'
};

exports.Provider = exports.$Enums.Provider = {
  FACEBOOK: 'FACEBOOK',
  GOOGLE: 'GOOGLE'
};

exports.Prisma.ModelName = {
  Session: 'Session',
  Code: 'Code',
  Category: 'Category',
  Brand: 'Brand',
  Spu: 'Spu',
  Sku: 'Sku',
  SpuImage: 'SpuImage',
  SkuImage: 'SkuImage',
  Attribute: 'Attribute',
  AttributeValue: 'AttributeValue',
  SpuAttribute: 'SpuAttribute',
  SkuAttribute: 'SkuAttribute',
  SpuVariation: 'SpuVariation',
  SkuVariationValue: 'SkuVariationValue',
  Tag: 'Tag',
  SpuTag: 'SpuTag',
  Shop: 'Shop',
  User: 'User',
  Oauth2User: 'Oauth2User',
  CreditCard: 'CreditCard'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
